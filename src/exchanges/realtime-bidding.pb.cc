// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: realtime-bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "realtime-bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Hyperlocal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Hyperlocal_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Hyperlocal_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Hyperlocal_Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_HyperlocalSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_HyperlocalSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_UserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_UserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Vertical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Vertical_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_DeviceOsVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_DeviceOsVersion_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileDeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_ScreenOrientation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_CompanionSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_CompanionSlot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_CompanionSlot_CreativeFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_InventoryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_SkippableBidRequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_MatchingAdData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_MatchingAdData_DirectDeal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_SlotVisibility_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_BidResponseFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_BidResponseFeedback_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_MatchingNetwork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_MatchingNetwork_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_TemplateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_TemplateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_AdSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_AdSlot_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_realtime_2dbidding_2eproto() {
  protobuf_AddDesc_realtime_2dbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "realtime-bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, google_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, cookie_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, cookie_age_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, hosted_match_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, geo_criteria_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, postal_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, postal_code_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, encrypted_hyperlocal_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, timezone_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, seller_network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, anonymous_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, vertical_dictionary_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_content_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, site_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, key_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, bid_response_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_predicted_to_be_ignored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_click_tracking_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_metro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_hashed_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_excluded_click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_seller_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_matching_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deprecated_experimental_deadline_),
  };
  BidRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _internal_metadata_),
      -1);
  BidRequest_Hyperlocal_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_Hyperlocal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal, corners_),
  };
  BidRequest_Hyperlocal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Hyperlocal_descriptor_,
      BidRequest_Hyperlocal::default_instance_,
      BidRequest_Hyperlocal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Hyperlocal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal, _internal_metadata_),
      -1);
  BidRequest_Hyperlocal_Point_descriptor_ = BidRequest_Hyperlocal_descriptor_->nested_type(0);
  static const int BidRequest_Hyperlocal_Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal_Point, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal_Point, longitude_),
  };
  BidRequest_Hyperlocal_Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Hyperlocal_Point_descriptor_,
      BidRequest_Hyperlocal_Point::default_instance_,
      BidRequest_Hyperlocal_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal_Point, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Hyperlocal_Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Hyperlocal_Point, _internal_metadata_),
      -1);
  BidRequest_HyperlocalSet_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_HyperlocalSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_HyperlocalSet, hyperlocal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_HyperlocalSet, center_point_),
  };
  BidRequest_HyperlocalSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_HyperlocalSet_descriptor_,
      BidRequest_HyperlocalSet::default_instance_,
      BidRequest_HyperlocalSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_HyperlocalSet, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_HyperlocalSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_HyperlocalSet, _internal_metadata_),
      -1);
  BidRequest_UserList_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_UserList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserList, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserList, age_seconds_),
  };
  BidRequest_UserList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_UserList_descriptor_,
      BidRequest_UserList::default_instance_,
      BidRequest_UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserList, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_UserList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserList, _internal_metadata_),
      -1);
  BidRequest_Vertical_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Vertical_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Vertical, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Vertical, weight_),
  };
  BidRequest_Vertical_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Vertical_descriptor_,
      BidRequest_Vertical::default_instance_,
      BidRequest_Vertical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Vertical, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Vertical),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Vertical, _internal_metadata_),
      -1);
  BidRequest_KeyValue_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_KeyValue, value_),
  };
  BidRequest_KeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_KeyValue_descriptor_,
      BidRequest_KeyValue::default_instance_,
      BidRequest_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_KeyValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_KeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_KeyValue, _internal_metadata_),
      -1);
  BidRequest_Mobile_descriptor_ = BidRequest_descriptor_->nested_type(5);
  static const int BidRequest_Mobile_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, carrier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, mobile_device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, screen_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, screen_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, screen_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_interstitial_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_category_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_mobile_web_optimized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, device_pixel_ratio_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, encrypted_advertising_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, encrypted_hashed_idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_company_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_carrier_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_carrier_country_),
  };
  BidRequest_Mobile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_descriptor_,
      BidRequest_Mobile::default_instance_,
      BidRequest_Mobile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _internal_metadata_),
      -1);
  BidRequest_Mobile_DeviceOsVersion_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_DeviceOsVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_micro_),
  };
  BidRequest_Mobile_DeviceOsVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_DeviceOsVersion_descriptor_,
      BidRequest_Mobile_DeviceOsVersion::default_instance_,
      BidRequest_Mobile_DeviceOsVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_DeviceOsVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, _internal_metadata_),
      -1);
  BidRequest_Mobile_MobileDeviceType_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(0);
  BidRequest_Mobile_ScreenOrientation_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(1);
  BidRequest_Video_descriptor_ = BidRequest_descriptor_->nested_type(6);
  static const int BidRequest_Video_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, description_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, is_embedded_offsite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, videoad_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, max_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, min_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, inventory_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, video_ad_skippable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, skippable_max_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, allowed_video_formats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, companion_slot_),
  };
  BidRequest_Video_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Video_descriptor_,
      BidRequest_Video::default_instance_,
      BidRequest_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Video),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _internal_metadata_),
      -1);
  BidRequest_Video_CompanionSlot_descriptor_ = BidRequest_Video_descriptor_->nested_type(0);
  static const int BidRequest_Video_CompanionSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, creative_format_),
  };
  BidRequest_Video_CompanionSlot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Video_CompanionSlot_descriptor_,
      BidRequest_Video_CompanionSlot::default_instance_,
      BidRequest_Video_CompanionSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Video_CompanionSlot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_CompanionSlot, _internal_metadata_),
      -1);
  BidRequest_Video_CompanionSlot_CreativeFormat_descriptor_ = BidRequest_Video_CompanionSlot_descriptor_->enum_type(0);
  BidRequest_Video_InventoryType_descriptor_ = BidRequest_Video_descriptor_->enum_type(0);
  BidRequest_Video_SkippableBidRequestType_descriptor_ = BidRequest_Video_descriptor_->enum_type(1);
  BidRequest_Video_VideoFormat_descriptor_ = BidRequest_Video_descriptor_->enum_type(2);
  BidRequest_AdSlot_descriptor_ = BidRequest_descriptor_->nested_type(7);
  static const int BidRequest_AdSlot_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, ad_block_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, targetable_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, excluded_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, allowed_vendor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, excluded_sensitive_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, allowed_restricted_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, excluded_product_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, matching_ad_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, slot_visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, deprecated_allowed_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, deprecated_publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, deprecated_excluded_click_through_url_),
  };
  BidRequest_AdSlot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_descriptor_,
      BidRequest_AdSlot::default_instance_,
      BidRequest_AdSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _internal_metadata_),
      -1);
  BidRequest_AdSlot_MatchingAdData_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_MatchingAdData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, adgroup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, minimum_cpm_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, direct_deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, deprecated_campaign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, deprecated_per_buyer_minimum_cpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, deprecated_fixed_cpm_micros_),
  };
  BidRequest_AdSlot_MatchingAdData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_MatchingAdData_descriptor_,
      BidRequest_AdSlot_MatchingAdData::default_instance_,
      BidRequest_AdSlot_MatchingAdData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_MatchingAdData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData, _internal_metadata_),
      -1);
  BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_ = BidRequest_AdSlot_MatchingAdData_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_MatchingAdData_DirectDeal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, direct_deal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, fixed_cpm_micros_),
  };
  BidRequest_AdSlot_MatchingAdData_DirectDeal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_,
      BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_,
      BidRequest_AdSlot_MatchingAdData_DirectDeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_MatchingAdData_DirectDeal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_MatchingAdData_DirectDeal, _internal_metadata_),
      -1);
  BidRequest_AdSlot_SlotVisibility_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(0);
  BidRequest_BidResponseFeedback_descriptor_ = BidRequest_descriptor_->nested_type(8);
  static const int BidRequest_BidResponseFeedback_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, creative_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, creative_status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, cpm_micros_),
  };
  BidRequest_BidResponseFeedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_BidResponseFeedback_descriptor_,
      BidRequest_BidResponseFeedback::default_instance_,
      BidRequest_BidResponseFeedback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_BidResponseFeedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BidResponseFeedback, _internal_metadata_),
      -1);
  BidRequest_MatchingNetwork_descriptor_ = BidRequest_descriptor_->nested_type(9);
  static const int BidRequest_MatchingNetwork_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_MatchingNetwork, deprecated_network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_MatchingNetwork, deprecated_google_user_id_),
  };
  BidRequest_MatchingNetwork_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_MatchingNetwork_descriptor_,
      BidRequest_MatchingNetwork::default_instance_,
      BidRequest_MatchingNetwork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_MatchingNetwork, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_MatchingNetwork),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_MatchingNetwork, _internal_metadata_),
      -1);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, ad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, debug_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, processing_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, deprecated_protocol_version_),
  };
  BidResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _internal_metadata_),
      -1);
  BidResponse_Ad_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Ad_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, buyer_creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, html_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, video_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, snippet_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, template_parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, vendor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, restricted_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, advertiser_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, agency_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, adslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, deprecated_creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, deprecated_click_through_url_),
  };
  BidResponse_Ad_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ad_descriptor_,
      BidResponse_Ad::default_instance_,
      BidResponse_Ad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_Ad),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _internal_metadata_),
      -1);
  BidResponse_Ad_TemplateParameter_descriptor_ = BidResponse_Ad_descriptor_->nested_type(0);
  static const int BidResponse_Ad_TemplateParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, parameter_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, blank_ad_parameter_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, buyer_creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, backup_index_),
  };
  BidResponse_Ad_TemplateParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ad_TemplateParameter_descriptor_,
      BidResponse_Ad_TemplateParameter::default_instance_,
      BidResponse_Ad_TemplateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_Ad_TemplateParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_TemplateParameter, _internal_metadata_),
      -1);
  BidResponse_Ad_AdSlot_descriptor_ = BidResponse_Ad_descriptor_->nested_type(1);
  static const int BidResponse_Ad_AdSlot_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, max_cpm_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, min_cpm_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, adgroup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, deal_id_),
  };
  BidResponse_Ad_AdSlot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ad_AdSlot_descriptor_,
      BidResponse_Ad_AdSlot::default_instance_,
      BidResponse_Ad_AdSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_Ad_AdSlot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_AdSlot, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_realtime_2dbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Hyperlocal_descriptor_, &BidRequest_Hyperlocal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Hyperlocal_Point_descriptor_, &BidRequest_Hyperlocal_Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_HyperlocalSet_descriptor_, &BidRequest_HyperlocalSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_UserList_descriptor_, &BidRequest_UserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Vertical_descriptor_, &BidRequest_Vertical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_KeyValue_descriptor_, &BidRequest_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_descriptor_, &BidRequest_Mobile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_DeviceOsVersion_descriptor_, &BidRequest_Mobile_DeviceOsVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Video_descriptor_, &BidRequest_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Video_CompanionSlot_descriptor_, &BidRequest_Video_CompanionSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_descriptor_, &BidRequest_AdSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_MatchingAdData_descriptor_, &BidRequest_AdSlot_MatchingAdData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_, &BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_BidResponseFeedback_descriptor_, &BidRequest_BidResponseFeedback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_MatchingNetwork_descriptor_, &BidRequest_MatchingNetwork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ad_descriptor_, &BidResponse_Ad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ad_TemplateParameter_descriptor_, &BidResponse_Ad_TemplateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ad_AdSlot_descriptor_, &BidResponse_Ad_AdSlot::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_realtime_2dbidding_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_Hyperlocal::default_instance_;
  delete BidRequest_Hyperlocal_reflection_;
  delete BidRequest_Hyperlocal_Point::default_instance_;
  delete BidRequest_Hyperlocal_Point_reflection_;
  delete BidRequest_HyperlocalSet::default_instance_;
  delete BidRequest_HyperlocalSet_reflection_;
  delete BidRequest_UserList::default_instance_;
  delete BidRequest_UserList_reflection_;
  delete BidRequest_Vertical::default_instance_;
  delete BidRequest_Vertical_reflection_;
  delete BidRequest_KeyValue::default_instance_;
  delete BidRequest_KeyValue_reflection_;
  delete BidRequest_Mobile::default_instance_;
  delete BidRequest_Mobile_reflection_;
  delete BidRequest_Mobile_DeviceOsVersion::default_instance_;
  delete BidRequest_Mobile_DeviceOsVersion_reflection_;
  delete BidRequest_Video::default_instance_;
  delete BidRequest_Video_reflection_;
  delete BidRequest_Video_CompanionSlot::default_instance_;
  delete BidRequest_Video_CompanionSlot_reflection_;
  delete BidRequest_AdSlot::default_instance_;
  delete BidRequest_AdSlot_reflection_;
  delete BidRequest_AdSlot_MatchingAdData::default_instance_;
  delete BidRequest_AdSlot_MatchingAdData_reflection_;
  delete BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_;
  delete BidRequest_AdSlot_MatchingAdData_DirectDeal_reflection_;
  delete BidRequest_BidResponseFeedback::default_instance_;
  delete BidRequest_BidResponseFeedback_reflection_;
  delete BidRequest_MatchingNetwork::default_instance_;
  delete BidRequest_MatchingNetwork_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Ad::default_instance_;
  delete BidResponse_Ad_reflection_;
  delete BidResponse_Ad_TemplateParameter::default_instance_;
  delete BidResponse_Ad_TemplateParameter_reflection_;
  delete BidResponse_Ad_AdSlot::default_instance_;
  delete BidResponse_Ad_AdSlot_reflection_;
}

void protobuf_AddDesc_realtime_2dbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026realtime-bidding.proto\"\366$\n\nBidRequest\022"
    "\n\n\002id\030\002 \002(\014\022\n\n\002ip\030\004 \001(\014\022\026\n\016google_user_i"
    "d\030\025 \001(\t\022\026\n\016cookie_version\030\024 \001(\r\022\032\n\022cooki"
    "e_age_seconds\030\037 \001(\005\022\031\n\021hosted_match_data"
    "\030% \001(\014\022\022\n\nuser_agent\030\006 \001(\t\022\027\n\017geo_criter"
    "ia_id\030\' \001(\005\022\023\n\013postal_code\030! \001(\t\022\032\n\022post"
    "al_code_prefix\030\" \001(\t\022 \n\030encrypted_hyperl"
    "ocal_set\030( \001(\014\022\027\n\017timezone_offset\030\031 \001(\005\022"
    "\031\n\ruser_vertical\030\036 \003(\005B\002\020\001\022\'\n\tuser_list\030"
    "  \003(\0132\024.BidRequest.UserList\022\031\n\021seller_ne"
    "twork_id\030) \001(\005\022\013\n\003url\030\013 \001(\t\022\024\n\014anonymous"
    "_id\030\023 \001(\t\022\031\n\021detected_language\030\014 \003(\t\022/\n\021"
    "detected_vertical\030\r \003(\0132\024.BidRequest.Ver"
    "tical\022#\n\033vertical_dictionary_version\030\030 \001"
    "(\005\022\"\n\026detected_content_label\030\032 \003(\005B\002\020\001\022\024"
    "\n\014site_list_id\030$ \003(\005\022\'\n\tkey_value\030& \003(\0132"
    "\024.BidRequest.KeyValue\022\"\n\006mobile\030\034 \001(\0132\022."
    "BidRequest.Mobile\022 \n\005video\030\035 \001(\0132\021.BidRe"
    "quest.Video\022\"\n\032publisher_settings_list_i"
    "d\030* \001(\006\022\"\n\006adslot\030\016 \003(\0132\022.BidRequest.AdS"
    "lot\022>\n\025bid_response_feedback\030, \003(\0132\037.Bid"
    "Request.BidResponseFeedback\022\026\n\007is_test\030\017"
    " \001(\010:\005false\022\026\n\007is_ping\030\021 \001(\010:\005false\022)\n\032i"
    "s_predicted_to_be_ignored\030- \001(\010:\005false\022#"
    "\n\033DEPRECATED_protocol_version\030\001 \001(\005\022%\n\035D"
    "EPRECATED_click_tracking_url\030\003 \001(\t\022\031\n\021DE"
    "PRECATED_cookie\030\005 \001(\004\022\032\n\022DEPRECATED_coun"
    "try\030\007 \001(\t\022\031\n\021DEPRECATED_region\030\010 \001(\t\022\027\n\017"
    "DEPRECATED_city\030\t \001(\t\022\030\n\020DEPRECATED_metr"
    "o\030\n \001(\005\022 \n\030DEPRECATED_hashed_cookie\030\020 \001("
    "\014\022-\n%DEPRECATED_excluded_click_through_u"
    "rl\030\022 \003(\t\022!\n\031DEPRECATED_seller_network\030\026 "
    "\001(\t\022-\n%DEPRECATED_publisher_settings_lis"
    "t_id\030\027 \001(\014\022@\n\033DEPRECATED_matching_networ"
    "k\030\033 \003(\0132\033.BidRequest.MatchingNetwork\022/\n "
    "DEPRECATED_experimental_deadline\030# \001(\010:\005"
    "false\032i\n\nHyperlocal\022-\n\007corners\030\001 \003(\0132\034.B"
    "idRequest.Hyperlocal.Point\032,\n\005Point\022\020\n\010l"
    "atitude\030\001 \001(\002\022\021\n\tlongitude\030\002 \001(\002\032o\n\rHype"
    "rlocalSet\022*\n\nhyperlocal\030\001 \003(\0132\026.BidReque"
    "st.Hyperlocal\0222\n\014center_point\030\002 \001(\0132\034.Bi"
    "dRequest.Hyperlocal.Point\032+\n\010UserList\022\n\n"
    "\002id\030\001 \001(\003\022\023\n\013age_seconds\030\002 \001(\005\032&\n\010Vertic"
    "al\022\n\n\002id\030\001 \002(\005\022\016\n\006weight\030\002 \002(\002\032&\n\010KeyVal"
    "ue\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032\261\007\n\006Mobil"
    "e\022\020\n\010platform\030\003 \001(\t\022\r\n\005brand\030\014 \001(\t\022\r\n\005mo"
    "del\030\r \001(\t\0226\n\nos_version\030\016 \001(\0132\".BidReque"
    "st.Mobile.DeviceOsVersion\022\022\n\ncarrier_id\030"
    "\022 \001(\003\022\025\n\006is_app\030\007 \001(\010:\005false\022\016\n\006app_id\030\006"
    " \001(\t\022H\n\022mobile_device_type\030\010 \001(\0162#.BidRe"
    "quest.Mobile.MobileDeviceType:\007UNKNOWN\022\024"
    "\n\014screen_width\030\017 \001(\005\022\025\n\rscreen_height\030\020 "
    "\001(\005\022\035\n\022screen_orientation\030\t \001(\005:\0010\022&\n\027is"
    "_interstitial_request\030\n \001(\010:\005false\022\030\n\020ap"
    "p_category_ids\030\013 \003(\005\022&\n\027is_mobile_web_op"
    "timized\030\021 \001(\010:\005false\022\'\n\031device_pixel_rat"
    "io_millis\030\023 \001(\005:\0041000\022 \n\030encrypted_adver"
    "tising_id\030\024 \001(\014\022\035\n\025encrypted_hashed_idfa"
    "\030\025 \001(\014\022\033\n\023DEPRECATED_app_name\030\001 \001(\t\022\037\n\027D"
    "EPRECATED_company_name\030\002 \001(\t\022\037\n\027DEPRECAT"
    "ED_carrier_name\030\004 \001(\t\022\"\n\032DEPRECATED_carr"
    "ier_country\030\005 \001(\t\032_\n\017DeviceOsVersion\022\030\n\020"
    "os_version_major\030\001 \001(\005\022\030\n\020os_version_min"
    "or\030\002 \001(\005\022\030\n\020os_version_micro\030\003 \001(\005\">\n\020Mo"
    "bileDeviceType\022\013\n\007UNKNOWN\020\000\022\021\n\rHIGHEND_P"
    "HONE\020\001\022\n\n\006TABLET\020\002\"v\n\021ScreenOrientation\022"
    "\036\n\032SCREEN_ORIENTATION_UNKNOWN\020\000\022\037\n\033SCREE"
    "N_ORIENTATION_PORTRAIT\020\001\022 \n\034SCREEN_ORIEN"
    "TATION_LANDSCAPE\020\002\032\300\006\n\005Video\022\027\n\017descript"
    "ion_url\030\n \001(\t\022\"\n\023is_embedded_offsite\030\013 \001"
    "(\010:\005false\022\033\n\023videoad_start_delay\030\001 \001(\005\022\027"
    "\n\017max_ad_duration\030\002 \001(\005\022\027\n\017min_ad_durati"
    "on\030\010 \001(\005\022\031\n\016inventory_type\030\003 \001(\005:\0010\022V\n\022v"
    "ideo_ad_skippable\030\004 \001(\0162).BidRequest.Vid"
    "eo.SkippableBidRequestType:\017ALLOW_SKIPPA"
    "BLE\022!\n\031skippable_max_ad_duration\030\005 \001(\005\022<"
    "\n\025allowed_video_formats\030\006 \003(\0162\035.BidReque"
    "st.Video.VideoFormat\0227\n\016companion_slot\030\007"
    " \003(\0132\037.BidRequest.Video.CompanionSlot\032\314\001"
    "\n\rCompanionSlot\022\022\n\006height\030\001 \003(\005B\002\020\001\022\021\n\005w"
    "idth\030\002 \003(\005B\002\020\001\022G\n\017creative_format\030\003 \003(\0162"
    "..BidRequest.Video.CompanionSlot.Creativ"
    "eFormat\"K\n\016CreativeFormat\022\022\n\016IMAGE_CREAT"
    "IVE\020\000\022\022\n\016FLASH_CREATIVE\020\001\022\021\n\rHTML_CREATI"
    "VE\020\002\"B\n\rInventoryType\022\r\n\tWEB_VIDEO\020\000\022\t\n\005"
    "GAMES\020\001\022\027\n\023MOBILE_INTERSTITIAL\020\002\"Z\n\027Skip"
    "pableBidRequestType\022\023\n\017ALLOW_SKIPPABLE\020\000"
    "\022\025\n\021REQUIRE_SKIPPABLE\020\001\022\023\n\017BLOCK_SKIPPAB"
    "LE\020\002\"/\n\013VideoFormat\022\017\n\013VIDEO_FLASH\020\000\022\017\n\013"
    "VIDEO_HTML5\020\001\032\317\007\n\006AdSlot\022\n\n\002id\030\001 \002(\005\022\024\n\014"
    "ad_block_key\030\016 \001(\004\022\032\n\022targetable_channel"
    "\030\n \003(\t\022\r\n\005width\030\002 \003(\005\022\016\n\006height\030\003 \003(\005\022\036\n"
    "\022excluded_attribute\030\004 \003(\005B\002\020\001\022\037\n\023allowed"
    "_vendor_type\030\006 \003(\005B\002\020\001\022\'\n\033excluded_sensi"
    "tive_category\030\007 \003(\005B\002\020\001\022\'\n\033allowed_restr"
    "icted_category\030\020 \003(\005B\002\020\001\022%\n\031excluded_pro"
    "duct_category\030\r \003(\005B\002\020\001\022;\n\020matching_ad_d"
    "ata\030\t \003(\0132!.BidRequest.AdSlot.MatchingAd"
    "Data\022\"\n\032publisher_settings_list_id\030\017 \001(\006"
    "\022H\n\017slot_visibility\030\014 \001(\0162!.BidRequest.A"
    "dSlot.SlotVisibility:\014NO_DETECTION\022$\n\034DE"
    "PRECATED_allowed_attribute\030\005 \003(\005\022-\n%DEPR"
    "ECATED_publisher_settings_list_id\030\013 \003(\014\022"
    "-\n%DEPRECATED_excluded_click_through_url"
    "\030\010 \003(\t\032\262\002\n\016MatchingAdData\022\022\n\nadgroup_id\030"
    "\002 \001(\003\022\032\n\022minimum_cpm_micros\030\005 \001(\003\022A\n\013dir"
    "ect_deal\030\006 \003(\0132,.BidRequest.AdSlot.Match"
    "ingAdData.DirectDeal\022\036\n\026DEPRECATED_campa"
    "ign_id\030\001 \001(\003\022(\n DEPRECATED_per_buyer_min"
    "imum_cpm\030\003 \001(\010\022#\n\033DEPRECATED_fixed_cpm_m"
    "icros\030\004 \001(\003\032>\n\nDirectDeal\022\026\n\016direct_deal"
    "_id\030\001 \001(\003\022\030\n\020fixed_cpm_micros\030\002 \001(\003\"J\n\016S"
    "lotVisibility\022\020\n\014NO_DETECTION\020\000\022\022\n\016ABOVE"
    "_THE_FOLD\020\001\022\022\n\016BELOW_THE_FOLD\020\002\032s\n\023BidRe"
    "sponseFeedback\022\022\n\nrequest_id\030\001 \001(\014\022\026\n\016cr"
    "eative_index\030\002 \001(\005\022\034\n\024creative_status_co"
    "de\030\003 \001(\005\022\022\n\ncpm_micros\030\004 \001(\003\032S\n\017Matching"
    "Network\022\035\n\025DEPRECATED_network_id\030\001 \001(\t\022!"
    "\n\031DEPRECATED_google_user_id\030\002 \001(\t\"\225\007\n\013Bi"
    "dResponse\022\033\n\002ad\030\002 \003(\0132\017.BidResponse.Ad\022\024"
    "\n\014debug_string\030\005 \001(\t\022\032\n\022processing_time_"
    "ms\030\004 \001(\005\022#\n\033DEPRECATED_protocol_version\030"
    "\001 \001(\005\032\221\006\n\002Ad\022\031\n\021buyer_creative_id\030\n \001(\t\022"
    "\024\n\014html_snippet\030\001 \001(\t\022\021\n\tvideo_url\030\t \001(\t"
    "\022\030\n\020snippet_template\030\014 \001(\t\022=\n\022template_p"
    "arameter\030\r \003(\0132!.BidResponse.Ad.Template"
    "Parameter\022\031\n\021click_through_url\030\004 \003(\t\022\023\n\013"
    "vendor_type\030\005 \003(\005\022\021\n\tattribute\030\006 \003(\005\022\020\n\010"
    "category\030\007 \003(\005\022\033\n\023restricted_category\030\021 "
    "\003(\005\022\027\n\017advertiser_name\030\013 \003(\t\022\r\n\005width\030\016 "
    "\001(\005\022\016\n\006height\030\017 \001(\005\022\021\n\tagency_id\030\020 \001(\003\022&"
    "\n\006adslot\030\003 \003(\0132\026.BidResponse.Ad.AdSlot\022\036"
    "\n\026DEPRECATED_creative_id\030\010 \001(\003\022$\n\034DEPREC"
    "ATED_click_through_url\030\002 \001(\t\032\324\001\n\021Templat"
    "eParameter\022\027\n\017parameter_value\030\001 \001(\t\022 \n\030b"
    "lank_ad_parameter_value\030\010 \001(\t\022\031\n\021buyer_c"
    "reative_id\030\002 \001(\t\022\031\n\021click_through_url\030\003 "
    "\001(\t\022\014\n\004left\030\004 \001(\005\022\r\n\005right\030\005 \001(\005\022\013\n\003top\030"
    "\006 \001(\005\022\016\n\006bottom\030\007 \001(\005\022\024\n\014backup_index\030\t "
    "\001(\005\032l\n\006AdSlot\022\n\n\002id\030\001 \002(\005\022\026\n\016max_cpm_mic"
    "ros\030\002 \002(\003\022\026\n\016min_cpm_micros\030\003 \001(\003\022\022\n\nadg"
    "roup_id\030\004 \001(\003\022\022\n\007deal_id\030\005 \001(\003:\0010", 5673);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "realtime-bidding.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_Hyperlocal::default_instance_ = new BidRequest_Hyperlocal();
  BidRequest_Hyperlocal_Point::default_instance_ = new BidRequest_Hyperlocal_Point();
  BidRequest_HyperlocalSet::default_instance_ = new BidRequest_HyperlocalSet();
  BidRequest_UserList::default_instance_ = new BidRequest_UserList();
  BidRequest_Vertical::default_instance_ = new BidRequest_Vertical();
  BidRequest_KeyValue::default_instance_ = new BidRequest_KeyValue();
  BidRequest_Mobile::default_instance_ = new BidRequest_Mobile();
  BidRequest_Mobile_DeviceOsVersion::default_instance_ = new BidRequest_Mobile_DeviceOsVersion();
  BidRequest_Video::default_instance_ = new BidRequest_Video();
  BidRequest_Video_CompanionSlot::default_instance_ = new BidRequest_Video_CompanionSlot();
  BidRequest_AdSlot::default_instance_ = new BidRequest_AdSlot();
  BidRequest_AdSlot_MatchingAdData::default_instance_ = new BidRequest_AdSlot_MatchingAdData();
  BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_ = new BidRequest_AdSlot_MatchingAdData_DirectDeal();
  BidRequest_BidResponseFeedback::default_instance_ = new BidRequest_BidResponseFeedback();
  BidRequest_MatchingNetwork::default_instance_ = new BidRequest_MatchingNetwork();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Ad::default_instance_ = new BidResponse_Ad();
  BidResponse_Ad_TemplateParameter::default_instance_ = new BidResponse_Ad_TemplateParameter();
  BidResponse_Ad_AdSlot::default_instance_ = new BidResponse_Ad_AdSlot();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_Hyperlocal::default_instance_->InitAsDefaultInstance();
  BidRequest_Hyperlocal_Point::default_instance_->InitAsDefaultInstance();
  BidRequest_HyperlocalSet::default_instance_->InitAsDefaultInstance();
  BidRequest_UserList::default_instance_->InitAsDefaultInstance();
  BidRequest_Vertical::default_instance_->InitAsDefaultInstance();
  BidRequest_KeyValue::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_DeviceOsVersion::default_instance_->InitAsDefaultInstance();
  BidRequest_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_Video_CompanionSlot::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_MatchingAdData::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_->InitAsDefaultInstance();
  BidRequest_BidResponseFeedback::default_instance_->InitAsDefaultInstance();
  BidRequest_MatchingNetwork::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_TemplateParameter::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_AdSlot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_realtime_2dbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_realtime_2dbidding_2eproto {
  StaticDescriptorInitializer_realtime_2dbidding_2eproto() {
    protobuf_AddDesc_realtime_2dbidding_2eproto();
  }
} static_descriptor_initializer_realtime_2dbidding_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Hyperlocal_Point::kLatitudeFieldNumber;
const int BidRequest_Hyperlocal_Point::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Hyperlocal_Point::BidRequest_Hyperlocal_Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Hyperlocal.Point)
}

void BidRequest_Hyperlocal_Point::InitAsDefaultInstance() {
}

BidRequest_Hyperlocal_Point::BidRequest_Hyperlocal_Point(const BidRequest_Hyperlocal_Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Hyperlocal.Point)
}

void BidRequest_Hyperlocal_Point::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Hyperlocal_Point::~BidRequest_Hyperlocal_Point() {
  // @@protoc_insertion_point(destructor:BidRequest.Hyperlocal.Point)
  SharedDtor();
}

void BidRequest_Hyperlocal_Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Hyperlocal_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Hyperlocal_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Hyperlocal_Point_descriptor_;
}

const BidRequest_Hyperlocal_Point& BidRequest_Hyperlocal_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Hyperlocal_Point* BidRequest_Hyperlocal_Point::default_instance_ = NULL;

BidRequest_Hyperlocal_Point* BidRequest_Hyperlocal_Point::New(::google::protobuf::Arena* arena) const {
  BidRequest_Hyperlocal_Point* n = new BidRequest_Hyperlocal_Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Hyperlocal_Point::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Hyperlocal_Point*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(latitude_, longitude_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Hyperlocal_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Hyperlocal.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float latitude = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // optional float longitude = 2;
      case 2: {
        if (tag == 21) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Hyperlocal.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Hyperlocal.Point)
  return false;
#undef DO_
}

void BidRequest_Hyperlocal_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Hyperlocal.Point)
  // optional float latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Hyperlocal.Point)
}

::google::protobuf::uint8* BidRequest_Hyperlocal_Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Hyperlocal.Point)
  // optional float latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Hyperlocal.Point)
  return target;
}

int BidRequest_Hyperlocal_Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Hyperlocal_Point::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_Hyperlocal_Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Hyperlocal_Point>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Hyperlocal_Point::MergeFrom(const BidRequest_Hyperlocal_Point& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Hyperlocal_Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Hyperlocal_Point::CopyFrom(const BidRequest_Hyperlocal_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Hyperlocal_Point::IsInitialized() const {

  return true;
}

void BidRequest_Hyperlocal_Point::Swap(BidRequest_Hyperlocal_Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Hyperlocal_Point::InternalSwap(BidRequest_Hyperlocal_Point* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Hyperlocal_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Hyperlocal_Point_descriptor_;
  metadata.reflection = BidRequest_Hyperlocal_Point_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Hyperlocal::kCornersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Hyperlocal::BidRequest_Hyperlocal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Hyperlocal)
}

void BidRequest_Hyperlocal::InitAsDefaultInstance() {
}

BidRequest_Hyperlocal::BidRequest_Hyperlocal(const BidRequest_Hyperlocal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Hyperlocal)
}

void BidRequest_Hyperlocal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Hyperlocal::~BidRequest_Hyperlocal() {
  // @@protoc_insertion_point(destructor:BidRequest.Hyperlocal)
  SharedDtor();
}

void BidRequest_Hyperlocal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Hyperlocal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Hyperlocal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Hyperlocal_descriptor_;
}

const BidRequest_Hyperlocal& BidRequest_Hyperlocal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Hyperlocal* BidRequest_Hyperlocal::default_instance_ = NULL;

BidRequest_Hyperlocal* BidRequest_Hyperlocal::New(::google::protobuf::Arena* arena) const {
  BidRequest_Hyperlocal* n = new BidRequest_Hyperlocal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Hyperlocal::Clear() {
  corners_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Hyperlocal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Hyperlocal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BidRequest.Hyperlocal.Point corners = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_corners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_corners()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_corners;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Hyperlocal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Hyperlocal)
  return false;
#undef DO_
}

void BidRequest_Hyperlocal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Hyperlocal)
  // repeated .BidRequest.Hyperlocal.Point corners = 1;
  for (unsigned int i = 0, n = this->corners_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->corners(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Hyperlocal)
}

::google::protobuf::uint8* BidRequest_Hyperlocal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Hyperlocal)
  // repeated .BidRequest.Hyperlocal.Point corners = 1;
  for (unsigned int i = 0, n = this->corners_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->corners(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Hyperlocal)
  return target;
}

int BidRequest_Hyperlocal::ByteSize() const {
  int total_size = 0;

  // repeated .BidRequest.Hyperlocal.Point corners = 1;
  total_size += 1 * this->corners_size();
  for (int i = 0; i < this->corners_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->corners(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Hyperlocal::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_Hyperlocal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Hyperlocal>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Hyperlocal::MergeFrom(const BidRequest_Hyperlocal& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  corners_.MergeFrom(from.corners_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Hyperlocal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Hyperlocal::CopyFrom(const BidRequest_Hyperlocal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Hyperlocal::IsInitialized() const {

  return true;
}

void BidRequest_Hyperlocal::Swap(BidRequest_Hyperlocal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Hyperlocal::InternalSwap(BidRequest_Hyperlocal* other) {
  corners_.UnsafeArenaSwap(&other->corners_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Hyperlocal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Hyperlocal_descriptor_;
  metadata.reflection = BidRequest_Hyperlocal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_HyperlocalSet::kHyperlocalFieldNumber;
const int BidRequest_HyperlocalSet::kCenterPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_HyperlocalSet::BidRequest_HyperlocalSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.HyperlocalSet)
}

void BidRequest_HyperlocalSet::InitAsDefaultInstance() {
  center_point_ = const_cast< ::BidRequest_Hyperlocal_Point*>(&::BidRequest_Hyperlocal_Point::default_instance());
}

BidRequest_HyperlocalSet::BidRequest_HyperlocalSet(const BidRequest_HyperlocalSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.HyperlocalSet)
}

void BidRequest_HyperlocalSet::SharedCtor() {
  _cached_size_ = 0;
  center_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_HyperlocalSet::~BidRequest_HyperlocalSet() {
  // @@protoc_insertion_point(destructor:BidRequest.HyperlocalSet)
  SharedDtor();
}

void BidRequest_HyperlocalSet::SharedDtor() {
  if (this != default_instance_) {
    delete center_point_;
  }
}

void BidRequest_HyperlocalSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_HyperlocalSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_HyperlocalSet_descriptor_;
}

const BidRequest_HyperlocalSet& BidRequest_HyperlocalSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_HyperlocalSet* BidRequest_HyperlocalSet::default_instance_ = NULL;

BidRequest_HyperlocalSet* BidRequest_HyperlocalSet::New(::google::protobuf::Arena* arena) const {
  BidRequest_HyperlocalSet* n = new BidRequest_HyperlocalSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_HyperlocalSet::Clear() {
  if (has_center_point()) {
    if (center_point_ != NULL) center_point_->::BidRequest_Hyperlocal_Point::Clear();
  }
  hyperlocal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_HyperlocalSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.HyperlocalSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BidRequest.Hyperlocal hyperlocal = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hyperlocal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hyperlocal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_hyperlocal;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_center_point;
        break;
      }

      // optional .BidRequest.Hyperlocal.Point center_point = 2;
      case 2: {
        if (tag == 18) {
         parse_center_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.HyperlocalSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.HyperlocalSet)
  return false;
#undef DO_
}

void BidRequest_HyperlocalSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.HyperlocalSet)
  // repeated .BidRequest.Hyperlocal hyperlocal = 1;
  for (unsigned int i = 0, n = this->hyperlocal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hyperlocal(i), output);
  }

  // optional .BidRequest.Hyperlocal.Point center_point = 2;
  if (has_center_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->center_point_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.HyperlocalSet)
}

::google::protobuf::uint8* BidRequest_HyperlocalSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.HyperlocalSet)
  // repeated .BidRequest.Hyperlocal hyperlocal = 1;
  for (unsigned int i = 0, n = this->hyperlocal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hyperlocal(i), target);
  }

  // optional .BidRequest.Hyperlocal.Point center_point = 2;
  if (has_center_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->center_point_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.HyperlocalSet)
  return target;
}

int BidRequest_HyperlocalSet::ByteSize() const {
  int total_size = 0;

  // optional .BidRequest.Hyperlocal.Point center_point = 2;
  if (has_center_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_point_);
  }

  // repeated .BidRequest.Hyperlocal hyperlocal = 1;
  total_size += 1 * this->hyperlocal_size();
  for (int i = 0; i < this->hyperlocal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hyperlocal(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_HyperlocalSet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_HyperlocalSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_HyperlocalSet>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_HyperlocalSet::MergeFrom(const BidRequest_HyperlocalSet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  hyperlocal_.MergeFrom(from.hyperlocal_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_center_point()) {
      mutable_center_point()->::BidRequest_Hyperlocal_Point::MergeFrom(from.center_point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_HyperlocalSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_HyperlocalSet::CopyFrom(const BidRequest_HyperlocalSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_HyperlocalSet::IsInitialized() const {

  return true;
}

void BidRequest_HyperlocalSet::Swap(BidRequest_HyperlocalSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_HyperlocalSet::InternalSwap(BidRequest_HyperlocalSet* other) {
  hyperlocal_.UnsafeArenaSwap(&other->hyperlocal_);
  std::swap(center_point_, other->center_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_HyperlocalSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_HyperlocalSet_descriptor_;
  metadata.reflection = BidRequest_HyperlocalSet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_UserList::kIdFieldNumber;
const int BidRequest_UserList::kAgeSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_UserList::BidRequest_UserList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.UserList)
}

void BidRequest_UserList::InitAsDefaultInstance() {
}

BidRequest_UserList::BidRequest_UserList(const BidRequest_UserList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.UserList)
}

void BidRequest_UserList::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  age_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_UserList::~BidRequest_UserList() {
  // @@protoc_insertion_point(destructor:BidRequest.UserList)
  SharedDtor();
}

void BidRequest_UserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_UserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_UserList_descriptor_;
}

const BidRequest_UserList& BidRequest_UserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_UserList* BidRequest_UserList::default_instance_ = NULL;

BidRequest_UserList* BidRequest_UserList::New(::google::protobuf::Arena* arena) const {
  BidRequest_UserList* n = new BidRequest_UserList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_UserList::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_UserList*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, age_seconds_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.UserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_age_seconds;
        break;
      }

      // optional int32 age_seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_age_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_seconds_)));
          set_has_age_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.UserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.UserList)
  return false;
#undef DO_
}

void BidRequest_UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.UserList)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 age_seconds = 2;
  if (has_age_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.UserList)
}

::google::protobuf::uint8* BidRequest_UserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.UserList)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 age_seconds = 2;
  if (has_age_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.UserList)
  return target;
}

int BidRequest_UserList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 age_seconds = 2;
    if (has_age_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_seconds());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_UserList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_UserList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_UserList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_UserList::MergeFrom(const BidRequest_UserList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_age_seconds()) {
      set_age_seconds(from.age_seconds());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_UserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_UserList::CopyFrom(const BidRequest_UserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_UserList::IsInitialized() const {

  return true;
}

void BidRequest_UserList::Swap(BidRequest_UserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_UserList::InternalSwap(BidRequest_UserList* other) {
  std::swap(id_, other->id_);
  std::swap(age_seconds_, other->age_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_UserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_UserList_descriptor_;
  metadata.reflection = BidRequest_UserList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Vertical::kIdFieldNumber;
const int BidRequest_Vertical::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Vertical::BidRequest_Vertical()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Vertical)
}

void BidRequest_Vertical::InitAsDefaultInstance() {
}

BidRequest_Vertical::BidRequest_Vertical(const BidRequest_Vertical& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Vertical)
}

void BidRequest_Vertical::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Vertical::~BidRequest_Vertical() {
  // @@protoc_insertion_point(destructor:BidRequest.Vertical)
  SharedDtor();
}

void BidRequest_Vertical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Vertical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Vertical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Vertical_descriptor_;
}

const BidRequest_Vertical& BidRequest_Vertical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Vertical* BidRequest_Vertical::default_instance_ = NULL;

BidRequest_Vertical* BidRequest_Vertical::New(::google::protobuf::Arena* arena) const {
  BidRequest_Vertical* n = new BidRequest_Vertical;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Vertical::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Vertical*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, weight_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Vertical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Vertical)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_weight;
        break;
      }

      // required float weight = 2;
      case 2: {
        if (tag == 21) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Vertical)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Vertical)
  return false;
#undef DO_
}

void BidRequest_Vertical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Vertical)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Vertical)
}

::google::protobuf::uint8* BidRequest_Vertical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Vertical)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Vertical)
  return target;
}

int BidRequest_Vertical::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_weight()) {
    // required float weight = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int BidRequest_Vertical::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float weight = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Vertical::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_Vertical* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Vertical>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Vertical::MergeFrom(const BidRequest_Vertical& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Vertical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Vertical::CopyFrom(const BidRequest_Vertical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Vertical::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_Vertical::Swap(BidRequest_Vertical* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Vertical::InternalSwap(BidRequest_Vertical* other) {
  std::swap(id_, other->id_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Vertical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Vertical_descriptor_;
  metadata.reflection = BidRequest_Vertical_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_KeyValue::kKeyFieldNumber;
const int BidRequest_KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_KeyValue::BidRequest_KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.KeyValue)
}

void BidRequest_KeyValue::InitAsDefaultInstance() {
}

BidRequest_KeyValue::BidRequest_KeyValue(const BidRequest_KeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.KeyValue)
}

void BidRequest_KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_KeyValue::~BidRequest_KeyValue() {
  // @@protoc_insertion_point(destructor:BidRequest.KeyValue)
  SharedDtor();
}

void BidRequest_KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_KeyValue_descriptor_;
}

const BidRequest_KeyValue& BidRequest_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_KeyValue* BidRequest_KeyValue::default_instance_ = NULL;

BidRequest_KeyValue* BidRequest_KeyValue::New(::google::protobuf::Arena* arena) const {
  BidRequest_KeyValue* n = new BidRequest_KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.KeyValue.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.KeyValue.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.KeyValue)
  return false;
#undef DO_
}

void BidRequest_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.KeyValue)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.KeyValue.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.KeyValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.KeyValue)
}

::google::protobuf::uint8* BidRequest_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.KeyValue)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.KeyValue.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.KeyValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.KeyValue)
  return target;
}

int BidRequest_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_KeyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_KeyValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_KeyValue::MergeFrom(const BidRequest_KeyValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_KeyValue::CopyFrom(const BidRequest_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_KeyValue::IsInitialized() const {

  return true;
}

void BidRequest_KeyValue::Swap(BidRequest_KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_KeyValue::InternalSwap(BidRequest_KeyValue* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_KeyValue_descriptor_;
  metadata.reflection = BidRequest_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileDeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileDeviceType_descriptor_;
}
bool BidRequest_Mobile_MobileDeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::UNKNOWN;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::HIGHEND_PHONE;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::TABLET;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::MobileDeviceType_MIN;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::MobileDeviceType_MAX;
const int BidRequest_Mobile::MobileDeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_ScreenOrientation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_ScreenOrientation_descriptor_;
}
bool BidRequest_Mobile_ScreenOrientation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::SCREEN_ORIENTATION_UNKNOWN;
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::SCREEN_ORIENTATION_PORTRAIT;
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::SCREEN_ORIENTATION_LANDSCAPE;
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::ScreenOrientation_MIN;
const BidRequest_Mobile_ScreenOrientation BidRequest_Mobile::ScreenOrientation_MAX;
const int BidRequest_Mobile::ScreenOrientation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMajorFieldNumber;
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMinorFieldNumber;
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMicroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_DeviceOsVersion::BidRequest_Mobile_DeviceOsVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Mobile.DeviceOsVersion)
}

void BidRequest_Mobile_DeviceOsVersion::InitAsDefaultInstance() {
}

BidRequest_Mobile_DeviceOsVersion::BidRequest_Mobile_DeviceOsVersion(const BidRequest_Mobile_DeviceOsVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Mobile.DeviceOsVersion)
}

void BidRequest_Mobile_DeviceOsVersion::SharedCtor() {
  _cached_size_ = 0;
  os_version_major_ = 0;
  os_version_minor_ = 0;
  os_version_micro_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_DeviceOsVersion::~BidRequest_Mobile_DeviceOsVersion() {
  // @@protoc_insertion_point(destructor:BidRequest.Mobile.DeviceOsVersion)
  SharedDtor();
}

void BidRequest_Mobile_DeviceOsVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_DeviceOsVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_DeviceOsVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_DeviceOsVersion_descriptor_;
}

const BidRequest_Mobile_DeviceOsVersion& BidRequest_Mobile_DeviceOsVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile_DeviceOsVersion::default_instance_ = NULL;

BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile_DeviceOsVersion::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_DeviceOsVersion* n = new BidRequest_Mobile_DeviceOsVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_DeviceOsVersion::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile_DeviceOsVersion*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(os_version_major_, os_version_micro_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_DeviceOsVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Mobile.DeviceOsVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 os_version_major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_major_)));
          set_has_os_version_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_os_version_minor;
        break;
      }

      // optional int32 os_version_minor = 2;
      case 2: {
        if (tag == 16) {
         parse_os_version_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_minor_)));
          set_has_os_version_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_os_version_micro;
        break;
      }

      // optional int32 os_version_micro = 3;
      case 3: {
        if (tag == 24) {
         parse_os_version_micro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_micro_)));
          set_has_os_version_micro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Mobile.DeviceOsVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Mobile.DeviceOsVersion)
  return false;
#undef DO_
}

void BidRequest_Mobile_DeviceOsVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Mobile.DeviceOsVersion)
  // optional int32 os_version_major = 1;
  if (has_os_version_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->os_version_major(), output);
  }

  // optional int32 os_version_minor = 2;
  if (has_os_version_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->os_version_minor(), output);
  }

  // optional int32 os_version_micro = 3;
  if (has_os_version_micro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->os_version_micro(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Mobile.DeviceOsVersion)
}

::google::protobuf::uint8* BidRequest_Mobile_DeviceOsVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Mobile.DeviceOsVersion)
  // optional int32 os_version_major = 1;
  if (has_os_version_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->os_version_major(), target);
  }

  // optional int32 os_version_minor = 2;
  if (has_os_version_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->os_version_minor(), target);
  }

  // optional int32 os_version_micro = 3;
  if (has_os_version_micro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->os_version_micro(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Mobile.DeviceOsVersion)
  return target;
}

int BidRequest_Mobile_DeviceOsVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 os_version_major = 1;
    if (has_os_version_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_major());
    }

    // optional int32 os_version_minor = 2;
    if (has_os_version_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_minor());
    }

    // optional int32 os_version_micro = 3;
    if (has_os_version_micro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_micro());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_DeviceOsVersion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_Mobile_DeviceOsVersion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_DeviceOsVersion>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_DeviceOsVersion::MergeFrom(const BidRequest_Mobile_DeviceOsVersion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os_version_major()) {
      set_os_version_major(from.os_version_major());
    }
    if (from.has_os_version_minor()) {
      set_os_version_minor(from.os_version_minor());
    }
    if (from.has_os_version_micro()) {
      set_os_version_micro(from.os_version_micro());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_DeviceOsVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_DeviceOsVersion::CopyFrom(const BidRequest_Mobile_DeviceOsVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_DeviceOsVersion::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_DeviceOsVersion::Swap(BidRequest_Mobile_DeviceOsVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_DeviceOsVersion::InternalSwap(BidRequest_Mobile_DeviceOsVersion* other) {
  std::swap(os_version_major_, other->os_version_major_);
  std::swap(os_version_minor_, other->os_version_minor_);
  std::swap(os_version_micro_, other->os_version_micro_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_DeviceOsVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_DeviceOsVersion_descriptor_;
  metadata.reflection = BidRequest_Mobile_DeviceOsVersion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile::kPlatformFieldNumber;
const int BidRequest_Mobile::kBrandFieldNumber;
const int BidRequest_Mobile::kModelFieldNumber;
const int BidRequest_Mobile::kOsVersionFieldNumber;
const int BidRequest_Mobile::kCarrierIdFieldNumber;
const int BidRequest_Mobile::kIsAppFieldNumber;
const int BidRequest_Mobile::kAppIdFieldNumber;
const int BidRequest_Mobile::kMobileDeviceTypeFieldNumber;
const int BidRequest_Mobile::kScreenWidthFieldNumber;
const int BidRequest_Mobile::kScreenHeightFieldNumber;
const int BidRequest_Mobile::kScreenOrientationFieldNumber;
const int BidRequest_Mobile::kIsInterstitialRequestFieldNumber;
const int BidRequest_Mobile::kAppCategoryIdsFieldNumber;
const int BidRequest_Mobile::kIsMobileWebOptimizedFieldNumber;
const int BidRequest_Mobile::kDevicePixelRatioMillisFieldNumber;
const int BidRequest_Mobile::kEncryptedAdvertisingIdFieldNumber;
const int BidRequest_Mobile::kEncryptedHashedIdfaFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDAppNameFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDCompanyNameFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDCarrierNameFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDCarrierCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile::BidRequest_Mobile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Mobile)
}

void BidRequest_Mobile::InitAsDefaultInstance() {
  os_version_ = const_cast< ::BidRequest_Mobile_DeviceOsVersion*>(&::BidRequest_Mobile_DeviceOsVersion::default_instance());
}

BidRequest_Mobile::BidRequest_Mobile(const BidRequest_Mobile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Mobile)
}

void BidRequest_Mobile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = NULL;
  carrier_id_ = GOOGLE_LONGLONG(0);
  is_app_ = false;
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_device_type_ = 0;
  screen_width_ = 0;
  screen_height_ = 0;
  screen_orientation_ = 0;
  is_interstitial_request_ = false;
  is_mobile_web_optimized_ = false;
  device_pixel_ratio_millis_ = 1000;
  encrypted_advertising_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_hashed_idfa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_company_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_carrier_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_carrier_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile::~BidRequest_Mobile() {
  // @@protoc_insertion_point(destructor:BidRequest.Mobile)
  SharedDtor();
}

void BidRequest_Mobile::SharedDtor() {
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_advertising_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_hashed_idfa_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_app_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_company_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_carrier_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_carrier_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete os_version_;
  }
}

void BidRequest_Mobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_descriptor_;
}

const BidRequest_Mobile& BidRequest_Mobile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile* BidRequest_Mobile::default_instance_ = NULL;

BidRequest_Mobile* BidRequest_Mobile::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile* n = new BidRequest_Mobile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    if (has_platform()) {
      platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_brand()) {
      brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model()) {
      model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_os_version()) {
      if (os_version_ != NULL) os_version_->::BidRequest_Mobile_DeviceOsVersion::Clear();
    }
    carrier_id_ = GOOGLE_LONGLONG(0);
    is_app_ = false;
    if (has_app_id()) {
      app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mobile_device_type_ = 0;
  }
  if (_has_bits_[8 / 32] & 61184u) {
    ZR_(screen_width_, screen_height_);
    ZR_(is_interstitial_request_, is_mobile_web_optimized_);
    screen_orientation_ = 0;
    device_pixel_ratio_millis_ = 1000;
    if (has_encrypted_advertising_id()) {
      encrypted_advertising_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    if (has_encrypted_hashed_idfa()) {
      encrypted_hashed_idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_app_name()) {
      deprecated_app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_company_name()) {
      deprecated_company_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_carrier_name()) {
      deprecated_carrier_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_carrier_country()) {
      deprecated_carrier_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  app_category_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Mobile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DEPRECATED_app_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_app_name().data(), this->deprecated_app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.Mobile.DEPRECATED_app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DEPRECATED_company_name;
        break;
      }

      // optional string DEPRECATED_company_name = 2;
      case 2: {
        if (tag == 18) {
         parse_DEPRECATED_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_company_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_company_name().data(), this->deprecated_company_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.Mobile.DEPRECATED_company_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }

      // optional string platform = 3;
      case 3: {
        if (tag == 26) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.Mobile.platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DEPRECATED_carrier_name;
        break;
      }

      // optional string DEPRECATED_carrier_name = 4;
      case 4: {
        if (tag == 34) {
         parse_DEPRECATED_carrier_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_carrier_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_carrier_name().data(), this->deprecated_carrier_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.Mobile.DEPRECATED_carrier_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DEPRECATED_carrier_country;
        break;
      }

      // optional string DEPRECATED_carrier_country = 5;
      case 5: {
        if (tag == 42) {
         parse_DEPRECATED_carrier_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_carrier_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_carrier_country().data(), this->deprecated_carrier_country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.Mobile.DEPRECATED_carrier_country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_app_id;
        break;
      }

      // optional string app_id = 6;
      case 6: {
        if (tag == 50) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.Mobile.app_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_app;
        break;
      }

      // optional bool is_app = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_is_app:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_app_)));
          set_has_is_app();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mobile_device_type;
        break;
      }

      // optional .BidRequest.Mobile.MobileDeviceType mobile_device_type = 8 [default = UNKNOWN];
      case 8: {
        if (tag == 64) {
         parse_mobile_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Mobile_MobileDeviceType_IsValid(value)) {
            set_mobile_device_type(static_cast< ::BidRequest_Mobile_MobileDeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_screen_orientation;
        break;
      }

      // optional int32 screen_orientation = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_screen_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_orientation_)));
          set_has_screen_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_interstitial_request;
        break;
      }

      // optional bool is_interstitial_request = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_is_interstitial_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_interstitial_request_)));
          set_has_is_interstitial_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_app_category_ids;
        break;
      }

      // repeated int32 app_category_ids = 11;
      case 11: {
        if (tag == 88) {
         parse_app_category_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_app_category_ids())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_app_category_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_app_category_ids;
        if (input->ExpectTag(98)) goto parse_brand;
        break;
      }

      // optional string brand = 12;
      case 12: {
        if (tag == 98) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.Mobile.brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_model;
        break;
      }

      // optional string model = 13;
      case 13: {
        if (tag == 106) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.Mobile.model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_os_version;
        break;
      }

      // optional .BidRequest.Mobile.DeviceOsVersion os_version = 14;
      case 14: {
        if (tag == 114) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_screen_width;
        break;
      }

      // optional int32 screen_width = 15;
      case 15: {
        if (tag == 120) {
         parse_screen_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_width_)));
          set_has_screen_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_screen_height;
        break;
      }

      // optional int32 screen_height = 16;
      case 16: {
        if (tag == 128) {
         parse_screen_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_height_)));
          set_has_screen_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_is_mobile_web_optimized;
        break;
      }

      // optional bool is_mobile_web_optimized = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_is_mobile_web_optimized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mobile_web_optimized_)));
          set_has_is_mobile_web_optimized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_carrier_id;
        break;
      }

      // optional int64 carrier_id = 18;
      case 18: {
        if (tag == 144) {
         parse_carrier_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrier_id_)));
          set_has_carrier_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_device_pixel_ratio_millis;
        break;
      }

      // optional int32 device_pixel_ratio_millis = 19 [default = 1000];
      case 19: {
        if (tag == 152) {
         parse_device_pixel_ratio_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_pixel_ratio_millis_)));
          set_has_device_pixel_ratio_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_encrypted_advertising_id;
        break;
      }

      // optional bytes encrypted_advertising_id = 20;
      case 20: {
        if (tag == 162) {
         parse_encrypted_advertising_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_advertising_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_encrypted_hashed_idfa;
        break;
      }

      // optional bytes encrypted_hashed_idfa = 21;
      case 21: {
        if (tag == 170) {
         parse_encrypted_hashed_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_hashed_idfa()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Mobile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Mobile)
  return false;
#undef DO_
}

void BidRequest_Mobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Mobile)
  // optional string DEPRECATED_app_name = 1;
  if (has_deprecated_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_app_name().data(), this->deprecated_app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.DEPRECATED_app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deprecated_app_name(), output);
  }

  // optional string DEPRECATED_company_name = 2;
  if (has_deprecated_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_company_name().data(), this->deprecated_company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.DEPRECATED_company_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deprecated_company_name(), output);
  }

  // optional string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform(), output);
  }

  // optional string DEPRECATED_carrier_name = 4;
  if (has_deprecated_carrier_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_carrier_name().data(), this->deprecated_carrier_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.DEPRECATED_carrier_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deprecated_carrier_name(), output);
  }

  // optional string DEPRECATED_carrier_country = 5;
  if (has_deprecated_carrier_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_carrier_country().data(), this->deprecated_carrier_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.DEPRECATED_carrier_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->deprecated_carrier_country(), output);
  }

  // optional string app_id = 6;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->app_id(), output);
  }

  // optional bool is_app = 7 [default = false];
  if (has_is_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_app(), output);
  }

  // optional .BidRequest.Mobile.MobileDeviceType mobile_device_type = 8 [default = UNKNOWN];
  if (has_mobile_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->mobile_device_type(), output);
  }

  // optional int32 screen_orientation = 9 [default = 0];
  if (has_screen_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->screen_orientation(), output);
  }

  // optional bool is_interstitial_request = 10 [default = false];
  if (has_is_interstitial_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_interstitial_request(), output);
  }

  // repeated int32 app_category_ids = 11;
  for (int i = 0; i < this->app_category_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->app_category_ids(i), output);
  }

  // optional string brand = 12;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->brand(), output);
  }

  // optional string model = 13;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->model(), output);
  }

  // optional .BidRequest.Mobile.DeviceOsVersion os_version = 14;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->os_version_, output);
  }

  // optional int32 screen_width = 15;
  if (has_screen_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->screen_width(), output);
  }

  // optional int32 screen_height = 16;
  if (has_screen_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->screen_height(), output);
  }

  // optional bool is_mobile_web_optimized = 17 [default = false];
  if (has_is_mobile_web_optimized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_mobile_web_optimized(), output);
  }

  // optional int64 carrier_id = 18;
  if (has_carrier_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->carrier_id(), output);
  }

  // optional int32 device_pixel_ratio_millis = 19 [default = 1000];
  if (has_device_pixel_ratio_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->device_pixel_ratio_millis(), output);
  }

  // optional bytes encrypted_advertising_id = 20;
  if (has_encrypted_advertising_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->encrypted_advertising_id(), output);
  }

  // optional bytes encrypted_hashed_idfa = 21;
  if (has_encrypted_hashed_idfa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->encrypted_hashed_idfa(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Mobile)
}

::google::protobuf::uint8* BidRequest_Mobile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Mobile)
  // optional string DEPRECATED_app_name = 1;
  if (has_deprecated_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_app_name().data(), this->deprecated_app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.DEPRECATED_app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deprecated_app_name(), target);
  }

  // optional string DEPRECATED_company_name = 2;
  if (has_deprecated_company_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_company_name().data(), this->deprecated_company_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.DEPRECATED_company_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deprecated_company_name(), target);
  }

  // optional string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // optional string DEPRECATED_carrier_name = 4;
  if (has_deprecated_carrier_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_carrier_name().data(), this->deprecated_carrier_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.DEPRECATED_carrier_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deprecated_carrier_name(), target);
  }

  // optional string DEPRECATED_carrier_country = 5;
  if (has_deprecated_carrier_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_carrier_country().data(), this->deprecated_carrier_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.DEPRECATED_carrier_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deprecated_carrier_country(), target);
  }

  // optional string app_id = 6;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->app_id(), target);
  }

  // optional bool is_app = 7 [default = false];
  if (has_is_app()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_app(), target);
  }

  // optional .BidRequest.Mobile.MobileDeviceType mobile_device_type = 8 [default = UNKNOWN];
  if (has_mobile_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->mobile_device_type(), target);
  }

  // optional int32 screen_orientation = 9 [default = 0];
  if (has_screen_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->screen_orientation(), target);
  }

  // optional bool is_interstitial_request = 10 [default = false];
  if (has_is_interstitial_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_interstitial_request(), target);
  }

  // repeated int32 app_category_ids = 11;
  for (int i = 0; i < this->app_category_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->app_category_ids(i), target);
  }

  // optional string brand = 12;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->brand(), target);
  }

  // optional string model = 13;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Mobile.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->model(), target);
  }

  // optional .BidRequest.Mobile.DeviceOsVersion os_version = 14;
  if (has_os_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->os_version_, target);
  }

  // optional int32 screen_width = 15;
  if (has_screen_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->screen_width(), target);
  }

  // optional int32 screen_height = 16;
  if (has_screen_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->screen_height(), target);
  }

  // optional bool is_mobile_web_optimized = 17 [default = false];
  if (has_is_mobile_web_optimized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_mobile_web_optimized(), target);
  }

  // optional int64 carrier_id = 18;
  if (has_carrier_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->carrier_id(), target);
  }

  // optional int32 device_pixel_ratio_millis = 19 [default = 1000];
  if (has_device_pixel_ratio_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->device_pixel_ratio_millis(), target);
  }

  // optional bytes encrypted_advertising_id = 20;
  if (has_encrypted_advertising_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->encrypted_advertising_id(), target);
  }

  // optional bytes encrypted_hashed_idfa = 21;
  if (has_encrypted_hashed_idfa()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->encrypted_hashed_idfa(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Mobile)
  return target;
}

int BidRequest_Mobile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string brand = 12;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 13;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional .BidRequest.Mobile.DeviceOsVersion os_version = 14;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->os_version_);
    }

    // optional int64 carrier_id = 18;
    if (has_carrier_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrier_id());
    }

    // optional bool is_app = 7 [default = false];
    if (has_is_app()) {
      total_size += 1 + 1;
    }

    // optional string app_id = 6;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional .BidRequest.Mobile.MobileDeviceType mobile_device_type = 8 [default = UNKNOWN];
    if (has_mobile_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mobile_device_type());
    }

  }
  if (_has_bits_[8 / 32] & 61184u) {
    // optional int32 screen_width = 15;
    if (has_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_width());
    }

    // optional int32 screen_height = 16;
    if (has_screen_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_height());
    }

    // optional int32 screen_orientation = 9 [default = 0];
    if (has_screen_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_orientation());
    }

    // optional bool is_interstitial_request = 10 [default = false];
    if (has_is_interstitial_request()) {
      total_size += 1 + 1;
    }

    // optional bool is_mobile_web_optimized = 17 [default = false];
    if (has_is_mobile_web_optimized()) {
      total_size += 2 + 1;
    }

    // optional int32 device_pixel_ratio_millis = 19 [default = 1000];
    if (has_device_pixel_ratio_millis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_pixel_ratio_millis());
    }

    // optional bytes encrypted_advertising_id = 20;
    if (has_encrypted_advertising_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_advertising_id());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional bytes encrypted_hashed_idfa = 21;
    if (has_encrypted_hashed_idfa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_hashed_idfa());
    }

    // optional string DEPRECATED_app_name = 1;
    if (has_deprecated_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_app_name());
    }

    // optional string DEPRECATED_company_name = 2;
    if (has_deprecated_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_company_name());
    }

    // optional string DEPRECATED_carrier_name = 4;
    if (has_deprecated_carrier_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_carrier_name());
    }

    // optional string DEPRECATED_carrier_country = 5;
    if (has_deprecated_carrier_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_carrier_country());
    }

  }
  // repeated int32 app_category_ids = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_category_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->app_category_ids(i));
    }
    total_size += 1 * this->app_category_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_Mobile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Mobile::MergeFrom(const BidRequest_Mobile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  app_category_ids_.MergeFrom(from.app_category_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (from.has_brand()) {
      set_has_brand();
      brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
    }
    if (from.has_model()) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (from.has_os_version()) {
      mutable_os_version()->::BidRequest_Mobile_DeviceOsVersion::MergeFrom(from.os_version());
    }
    if (from.has_carrier_id()) {
      set_carrier_id(from.carrier_id());
    }
    if (from.has_is_app()) {
      set_is_app(from.is_app());
    }
    if (from.has_app_id()) {
      set_has_app_id();
      app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (from.has_mobile_device_type()) {
      set_mobile_device_type(from.mobile_device_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_screen_width()) {
      set_screen_width(from.screen_width());
    }
    if (from.has_screen_height()) {
      set_screen_height(from.screen_height());
    }
    if (from.has_screen_orientation()) {
      set_screen_orientation(from.screen_orientation());
    }
    if (from.has_is_interstitial_request()) {
      set_is_interstitial_request(from.is_interstitial_request());
    }
    if (from.has_is_mobile_web_optimized()) {
      set_is_mobile_web_optimized(from.is_mobile_web_optimized());
    }
    if (from.has_device_pixel_ratio_millis()) {
      set_device_pixel_ratio_millis(from.device_pixel_ratio_millis());
    }
    if (from.has_encrypted_advertising_id()) {
      set_has_encrypted_advertising_id();
      encrypted_advertising_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_advertising_id_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_encrypted_hashed_idfa()) {
      set_has_encrypted_hashed_idfa();
      encrypted_hashed_idfa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_hashed_idfa_);
    }
    if (from.has_deprecated_app_name()) {
      set_has_deprecated_app_name();
      deprecated_app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_app_name_);
    }
    if (from.has_deprecated_company_name()) {
      set_has_deprecated_company_name();
      deprecated_company_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_company_name_);
    }
    if (from.has_deprecated_carrier_name()) {
      set_has_deprecated_carrier_name();
      deprecated_carrier_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_carrier_name_);
    }
    if (from.has_deprecated_carrier_country()) {
      set_has_deprecated_carrier_country();
      deprecated_carrier_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_carrier_country_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile::CopyFrom(const BidRequest_Mobile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile::IsInitialized() const {

  return true;
}

void BidRequest_Mobile::Swap(BidRequest_Mobile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile::InternalSwap(BidRequest_Mobile* other) {
  platform_.Swap(&other->platform_);
  brand_.Swap(&other->brand_);
  model_.Swap(&other->model_);
  std::swap(os_version_, other->os_version_);
  std::swap(carrier_id_, other->carrier_id_);
  std::swap(is_app_, other->is_app_);
  app_id_.Swap(&other->app_id_);
  std::swap(mobile_device_type_, other->mobile_device_type_);
  std::swap(screen_width_, other->screen_width_);
  std::swap(screen_height_, other->screen_height_);
  std::swap(screen_orientation_, other->screen_orientation_);
  std::swap(is_interstitial_request_, other->is_interstitial_request_);
  app_category_ids_.UnsafeArenaSwap(&other->app_category_ids_);
  std::swap(is_mobile_web_optimized_, other->is_mobile_web_optimized_);
  std::swap(device_pixel_ratio_millis_, other->device_pixel_ratio_millis_);
  encrypted_advertising_id_.Swap(&other->encrypted_advertising_id_);
  encrypted_hashed_idfa_.Swap(&other->encrypted_hashed_idfa_);
  deprecated_app_name_.Swap(&other->deprecated_app_name_);
  deprecated_company_name_.Swap(&other->deprecated_company_name_);
  deprecated_carrier_name_.Swap(&other->deprecated_carrier_name_);
  deprecated_carrier_country_.Swap(&other->deprecated_carrier_country_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_descriptor_;
  metadata.reflection = BidRequest_Mobile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Video_InventoryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_InventoryType_descriptor_;
}
bool BidRequest_Video_InventoryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Video_InventoryType BidRequest_Video::WEB_VIDEO;
const BidRequest_Video_InventoryType BidRequest_Video::GAMES;
const BidRequest_Video_InventoryType BidRequest_Video::MOBILE_INTERSTITIAL;
const BidRequest_Video_InventoryType BidRequest_Video::InventoryType_MIN;
const BidRequest_Video_InventoryType BidRequest_Video::InventoryType_MAX;
const int BidRequest_Video::InventoryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Video_SkippableBidRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_SkippableBidRequestType_descriptor_;
}
bool BidRequest_Video_SkippableBidRequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::ALLOW_SKIPPABLE;
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::REQUIRE_SKIPPABLE;
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::BLOCK_SKIPPABLE;
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::SkippableBidRequestType_MIN;
const BidRequest_Video_SkippableBidRequestType BidRequest_Video::SkippableBidRequestType_MAX;
const int BidRequest_Video::SkippableBidRequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_VideoFormat_descriptor_;
}
bool BidRequest_Video_VideoFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_FLASH;
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_HTML5;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MIN;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MAX;
const int BidRequest_Video::VideoFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Video_CompanionSlot_CreativeFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_CompanionSlot_CreativeFormat_descriptor_;
}
bool BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::IMAGE_CREATIVE;
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::FLASH_CREATIVE;
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::HTML_CREATIVE;
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::CreativeFormat_MIN;
const BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::CreativeFormat_MAX;
const int BidRequest_Video_CompanionSlot::CreativeFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Video_CompanionSlot::kHeightFieldNumber;
const int BidRequest_Video_CompanionSlot::kWidthFieldNumber;
const int BidRequest_Video_CompanionSlot::kCreativeFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Video_CompanionSlot::BidRequest_Video_CompanionSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Video.CompanionSlot)
}

void BidRequest_Video_CompanionSlot::InitAsDefaultInstance() {
}

BidRequest_Video_CompanionSlot::BidRequest_Video_CompanionSlot(const BidRequest_Video_CompanionSlot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Video.CompanionSlot)
}

void BidRequest_Video_CompanionSlot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video_CompanionSlot::~BidRequest_Video_CompanionSlot() {
  // @@protoc_insertion_point(destructor:BidRequest.Video.CompanionSlot)
  SharedDtor();
}

void BidRequest_Video_CompanionSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Video_CompanionSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video_CompanionSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_CompanionSlot_descriptor_;
}

const BidRequest_Video_CompanionSlot& BidRequest_Video_CompanionSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video_CompanionSlot* BidRequest_Video_CompanionSlot::default_instance_ = NULL;

BidRequest_Video_CompanionSlot* BidRequest_Video_CompanionSlot::New(::google::protobuf::Arena* arena) const {
  BidRequest_Video_CompanionSlot* n = new BidRequest_Video_CompanionSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Video_CompanionSlot::Clear() {
  height_.Clear();
  width_.Clear();
  creative_format_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Video_CompanionSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Video.CompanionSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 height = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_height())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_height())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_width;
        break;
      }

      // repeated int32 width = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_width())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_width())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creative_format;
        break;
      }

      // repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
      case 3: {
        if (tag == 24) {
         parse_creative_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(value)) {
            add_creative_format(static_cast< ::BidRequest_Video_CompanionSlot_CreativeFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::BidRequest_Video_CompanionSlot_CreativeFormat_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_creative_format())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creative_format;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Video.CompanionSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Video.CompanionSlot)
  return false;
#undef DO_
}

void BidRequest_Video_CompanionSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Video.CompanionSlot)
  // repeated int32 height = 1 [packed = true];
  if (this->height_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_height_cached_byte_size_);
  }
  for (int i = 0; i < this->height_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->height(i), output);
  }

  // repeated int32 width = 2 [packed = true];
  if (this->width_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_width_cached_byte_size_);
  }
  for (int i = 0; i < this->width_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->width(i), output);
  }

  // repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
  for (int i = 0; i < this->creative_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->creative_format(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Video.CompanionSlot)
}

::google::protobuf::uint8* BidRequest_Video_CompanionSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Video.CompanionSlot)
  // repeated int32 height = 1 [packed = true];
  if (this->height_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _height_cached_byte_size_, target);
  }
  for (int i = 0; i < this->height_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->height(i), target);
  }

  // repeated int32 width = 2 [packed = true];
  if (this->width_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _width_cached_byte_size_, target);
  }
  for (int i = 0; i < this->width_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->width(i), target);
  }

  // repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
  for (int i = 0; i < this->creative_format_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->creative_format(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Video.CompanionSlot)
  return target;
}

int BidRequest_Video_CompanionSlot::ByteSize() const {
  int total_size = 0;

  // repeated int32 height = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->height_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->height(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _height_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 width = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->width_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->width(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _width_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_format_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->creative_format(i));
    }
    total_size += 1 * this->creative_format_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video_CompanionSlot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_Video_CompanionSlot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Video_CompanionSlot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video_CompanionSlot::MergeFrom(const BidRequest_Video_CompanionSlot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  height_.MergeFrom(from.height_);
  width_.MergeFrom(from.width_);
  creative_format_.MergeFrom(from.creative_format_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Video_CompanionSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video_CompanionSlot::CopyFrom(const BidRequest_Video_CompanionSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video_CompanionSlot::IsInitialized() const {

  return true;
}

void BidRequest_Video_CompanionSlot::Swap(BidRequest_Video_CompanionSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Video_CompanionSlot::InternalSwap(BidRequest_Video_CompanionSlot* other) {
  height_.UnsafeArenaSwap(&other->height_);
  width_.UnsafeArenaSwap(&other->width_);
  creative_format_.UnsafeArenaSwap(&other->creative_format_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Video_CompanionSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_CompanionSlot_descriptor_;
  metadata.reflection = BidRequest_Video_CompanionSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Video::kDescriptionUrlFieldNumber;
const int BidRequest_Video::kIsEmbeddedOffsiteFieldNumber;
const int BidRequest_Video::kVideoadStartDelayFieldNumber;
const int BidRequest_Video::kMaxAdDurationFieldNumber;
const int BidRequest_Video::kMinAdDurationFieldNumber;
const int BidRequest_Video::kInventoryTypeFieldNumber;
const int BidRequest_Video::kVideoAdSkippableFieldNumber;
const int BidRequest_Video::kSkippableMaxAdDurationFieldNumber;
const int BidRequest_Video::kAllowedVideoFormatsFieldNumber;
const int BidRequest_Video::kCompanionSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Video::BidRequest_Video()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.Video)
}

void BidRequest_Video::InitAsDefaultInstance() {
}

BidRequest_Video::BidRequest_Video(const BidRequest_Video& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.Video)
}

void BidRequest_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  description_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_embedded_offsite_ = false;
  videoad_start_delay_ = 0;
  max_ad_duration_ = 0;
  min_ad_duration_ = 0;
  inventory_type_ = 0;
  video_ad_skippable_ = 0;
  skippable_max_ad_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video::~BidRequest_Video() {
  // @@protoc_insertion_point(destructor:BidRequest.Video)
  SharedDtor();
}

void BidRequest_Video::SharedDtor() {
  description_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_descriptor_;
}

const BidRequest_Video& BidRequest_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video* BidRequest_Video::default_instance_ = NULL;

BidRequest_Video* BidRequest_Video::New(::google::protobuf::Arena* arena) const {
  BidRequest_Video* n = new BidRequest_Video;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Video::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Video*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(is_embedded_offsite_, video_ad_skippable_);
    if (has_description_url()) {
      description_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    skippable_max_ad_duration_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  allowed_video_formats_.Clear();
  companion_slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 videoad_start_delay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_start_delay_)));
          set_has_videoad_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_ad_duration;
        break;
      }

      // optional int32 max_ad_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_max_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ad_duration_)));
          set_has_max_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inventory_type;
        break;
      }

      // optional int32 inventory_type = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_inventory_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inventory_type_)));
          set_has_inventory_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_video_ad_skippable;
        break;
      }

      // optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
      case 4: {
        if (tag == 32) {
         parse_video_ad_skippable:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_SkippableBidRequestType_IsValid(value)) {
            set_video_ad_skippable(static_cast< ::BidRequest_Video_SkippableBidRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skippable_max_ad_duration;
        break;
      }

      // optional int32 skippable_max_ad_duration = 5;
      case 5: {
        if (tag == 40) {
         parse_skippable_max_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skippable_max_ad_duration_)));
          set_has_skippable_max_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allowed_video_formats;
        break;
      }

      // repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
      case 6: {
        if (tag == 48) {
         parse_allowed_video_formats:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_Video_VideoFormat_IsValid(value)) {
            add_allowed_video_formats(static_cast< ::BidRequest_Video_VideoFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::BidRequest_Video_VideoFormat_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_allowed_video_formats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allowed_video_formats;
        if (input->ExpectTag(58)) goto parse_companion_slot;
        break;
      }

      // repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
      case 7: {
        if (tag == 58) {
         parse_companion_slot:
          DO_(input->IncrementRecursionDepth());
         parse_loop_companion_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_companion_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_companion_slot;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_min_ad_duration;
        break;
      }

      // optional int32 min_ad_duration = 8;
      case 8: {
        if (tag == 64) {
         parse_min_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_ad_duration_)));
          set_has_min_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_description_url;
        break;
      }

      // optional string description_url = 10;
      case 10: {
        if (tag == 82) {
         parse_description_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description_url().data(), this->description_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.Video.description_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_embedded_offsite;
        break;
      }

      // optional bool is_embedded_offsite = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_is_embedded_offsite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_embedded_offsite_)));
          set_has_is_embedded_offsite();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.Video)
  return false;
#undef DO_
}

void BidRequest_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.Video)
  // optional int32 videoad_start_delay = 1;
  if (has_videoad_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->videoad_start_delay(), output);
  }

  // optional int32 max_ad_duration = 2;
  if (has_max_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_ad_duration(), output);
  }

  // optional int32 inventory_type = 3 [default = 0];
  if (has_inventory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inventory_type(), output);
  }

  // optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
  if (has_video_ad_skippable()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->video_ad_skippable(), output);
  }

  // optional int32 skippable_max_ad_duration = 5;
  if (has_skippable_max_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skippable_max_ad_duration(), output);
  }

  // repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
  for (int i = 0; i < this->allowed_video_formats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->allowed_video_formats(i), output);
  }

  // repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
  for (unsigned int i = 0, n = this->companion_slot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->companion_slot(i), output);
  }

  // optional int32 min_ad_duration = 8;
  if (has_min_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->min_ad_duration(), output);
  }

  // optional string description_url = 10;
  if (has_description_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description_url().data(), this->description_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Video.description_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->description_url(), output);
  }

  // optional bool is_embedded_offsite = 11 [default = false];
  if (has_is_embedded_offsite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_embedded_offsite(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.Video)
}

::google::protobuf::uint8* BidRequest_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.Video)
  // optional int32 videoad_start_delay = 1;
  if (has_videoad_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->videoad_start_delay(), target);
  }

  // optional int32 max_ad_duration = 2;
  if (has_max_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_ad_duration(), target);
  }

  // optional int32 inventory_type = 3 [default = 0];
  if (has_inventory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inventory_type(), target);
  }

  // optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
  if (has_video_ad_skippable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->video_ad_skippable(), target);
  }

  // optional int32 skippable_max_ad_duration = 5;
  if (has_skippable_max_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skippable_max_ad_duration(), target);
  }

  // repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
  for (int i = 0; i < this->allowed_video_formats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->allowed_video_formats(i), target);
  }

  // repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
  for (unsigned int i = 0, n = this->companion_slot_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->companion_slot(i), target);
  }

  // optional int32 min_ad_duration = 8;
  if (has_min_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->min_ad_duration(), target);
  }

  // optional string description_url = 10;
  if (has_description_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description_url().data(), this->description_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.Video.description_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->description_url(), target);
  }

  // optional bool is_embedded_offsite = 11 [default = false];
  if (has_is_embedded_offsite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_embedded_offsite(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.Video)
  return target;
}

int BidRequest_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string description_url = 10;
    if (has_description_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description_url());
    }

    // optional bool is_embedded_offsite = 11 [default = false];
    if (has_is_embedded_offsite()) {
      total_size += 1 + 1;
    }

    // optional int32 videoad_start_delay = 1;
    if (has_videoad_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_start_delay());
    }

    // optional int32 max_ad_duration = 2;
    if (has_max_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ad_duration());
    }

    // optional int32 min_ad_duration = 8;
    if (has_min_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_ad_duration());
    }

    // optional int32 inventory_type = 3 [default = 0];
    if (has_inventory_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inventory_type());
    }

    // optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
    if (has_video_ad_skippable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->video_ad_skippable());
    }

    // optional int32 skippable_max_ad_duration = 5;
    if (has_skippable_max_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skippable_max_ad_duration());
    }

  }
  // repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->allowed_video_formats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->allowed_video_formats(i));
    }
    total_size += 1 * this->allowed_video_formats_size() + data_size;
  }

  // repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
  total_size += 1 * this->companion_slot_size();
  for (int i = 0; i < this->companion_slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->companion_slot(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_Video* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Video>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Video::MergeFrom(const BidRequest_Video& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  allowed_video_formats_.MergeFrom(from.allowed_video_formats_);
  companion_slot_.MergeFrom(from.companion_slot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description_url()) {
      set_has_description_url();
      description_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_url_);
    }
    if (from.has_is_embedded_offsite()) {
      set_is_embedded_offsite(from.is_embedded_offsite());
    }
    if (from.has_videoad_start_delay()) {
      set_videoad_start_delay(from.videoad_start_delay());
    }
    if (from.has_max_ad_duration()) {
      set_max_ad_duration(from.max_ad_duration());
    }
    if (from.has_min_ad_duration()) {
      set_min_ad_duration(from.min_ad_duration());
    }
    if (from.has_inventory_type()) {
      set_inventory_type(from.inventory_type());
    }
    if (from.has_video_ad_skippable()) {
      set_video_ad_skippable(from.video_ad_skippable());
    }
    if (from.has_skippable_max_ad_duration()) {
      set_skippable_max_ad_duration(from.skippable_max_ad_duration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video::CopyFrom(const BidRequest_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video::IsInitialized() const {

  return true;
}

void BidRequest_Video::Swap(BidRequest_Video* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Video::InternalSwap(BidRequest_Video* other) {
  description_url_.Swap(&other->description_url_);
  std::swap(is_embedded_offsite_, other->is_embedded_offsite_);
  std::swap(videoad_start_delay_, other->videoad_start_delay_);
  std::swap(max_ad_duration_, other->max_ad_duration_);
  std::swap(min_ad_duration_, other->min_ad_duration_);
  std::swap(inventory_type_, other->inventory_type_);
  std::swap(video_ad_skippable_, other->video_ad_skippable_);
  std::swap(skippable_max_ad_duration_, other->skippable_max_ad_duration_);
  allowed_video_formats_.UnsafeArenaSwap(&other->allowed_video_formats_);
  companion_slot_.UnsafeArenaSwap(&other->companion_slot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_descriptor_;
  metadata.reflection = BidRequest_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_SlotVisibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_SlotVisibility_descriptor_;
}
bool BidRequest_AdSlot_SlotVisibility_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::NO_DETECTION;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::ABOVE_THE_FOLD;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::BELOW_THE_FOLD;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::SlotVisibility_MIN;
const BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::SlotVisibility_MAX;
const int BidRequest_AdSlot::SlotVisibility_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_MatchingAdData_DirectDeal::kDirectDealIdFieldNumber;
const int BidRequest_AdSlot_MatchingAdData_DirectDeal::kFixedCpmMicrosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_MatchingAdData_DirectDeal::BidRequest_AdSlot_MatchingAdData_DirectDeal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.MatchingAdData.DirectDeal)
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::InitAsDefaultInstance() {
}

BidRequest_AdSlot_MatchingAdData_DirectDeal::BidRequest_AdSlot_MatchingAdData_DirectDeal(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.MatchingAdData.DirectDeal)
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::SharedCtor() {
  _cached_size_ = 0;
  direct_deal_id_ = GOOGLE_LONGLONG(0);
  fixed_cpm_micros_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_MatchingAdData_DirectDeal::~BidRequest_AdSlot_MatchingAdData_DirectDeal() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  SharedDtor();
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData_DirectDeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_;
}

const BidRequest_AdSlot_MatchingAdData_DirectDeal& BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_MatchingAdData_DirectDeal* BidRequest_AdSlot_MatchingAdData_DirectDeal::default_instance_ = NULL;

BidRequest_AdSlot_MatchingAdData_DirectDeal* BidRequest_AdSlot_MatchingAdData_DirectDeal::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_MatchingAdData_DirectDeal* n = new BidRequest_AdSlot_MatchingAdData_DirectDeal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_AdSlot_MatchingAdData_DirectDeal*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(direct_deal_id_, fixed_cpm_micros_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_MatchingAdData_DirectDeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 direct_deal_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &direct_deal_id_)));
          set_has_direct_deal_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fixed_cpm_micros;
        break;
      }

      // optional int64 fixed_cpm_micros = 2;
      case 2: {
        if (tag == 16) {
         parse_fixed_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fixed_cpm_micros_)));
          set_has_fixed_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  return false;
#undef DO_
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  // optional int64 direct_deal_id = 1;
  if (has_direct_deal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->direct_deal_id(), output);
  }

  // optional int64 fixed_cpm_micros = 2;
  if (has_fixed_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fixed_cpm_micros(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.MatchingAdData.DirectDeal)
}

::google::protobuf::uint8* BidRequest_AdSlot_MatchingAdData_DirectDeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  // optional int64 direct_deal_id = 1;
  if (has_direct_deal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->direct_deal_id(), target);
  }

  // optional int64 fixed_cpm_micros = 2;
  if (has_fixed_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fixed_cpm_micros(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.MatchingAdData.DirectDeal)
  return target;
}

int BidRequest_AdSlot_MatchingAdData_DirectDeal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 direct_deal_id = 1;
    if (has_direct_deal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->direct_deal_id());
    }

    // optional int64 fixed_cpm_micros = 2;
    if (has_fixed_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fixed_cpm_micros());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_AdSlot_MatchingAdData_DirectDeal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_MatchingAdData_DirectDeal>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::MergeFrom(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direct_deal_id()) {
      set_direct_deal_id(from.direct_deal_id());
    }
    if (from.has_fixed_cpm_micros()) {
      set_fixed_cpm_micros(from.fixed_cpm_micros());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::CopyFrom(const BidRequest_AdSlot_MatchingAdData_DirectDeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_MatchingAdData_DirectDeal::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_MatchingAdData_DirectDeal::Swap(BidRequest_AdSlot_MatchingAdData_DirectDeal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_MatchingAdData_DirectDeal::InternalSwap(BidRequest_AdSlot_MatchingAdData_DirectDeal* other) {
  std::swap(direct_deal_id_, other->direct_deal_id_);
  std::swap(fixed_cpm_micros_, other->fixed_cpm_micros_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_MatchingAdData_DirectDeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_MatchingAdData_DirectDeal_descriptor_;
  metadata.reflection = BidRequest_AdSlot_MatchingAdData_DirectDeal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_MatchingAdData::kAdgroupIdFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kMinimumCpmMicrosFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kDirectDealFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kDEPRECATEDCampaignIdFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kDEPRECATEDPerBuyerMinimumCpmFieldNumber;
const int BidRequest_AdSlot_MatchingAdData::kDEPRECATEDFixedCpmMicrosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_MatchingAdData::BidRequest_AdSlot_MatchingAdData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot.MatchingAdData)
}

void BidRequest_AdSlot_MatchingAdData::InitAsDefaultInstance() {
}

BidRequest_AdSlot_MatchingAdData::BidRequest_AdSlot_MatchingAdData(const BidRequest_AdSlot_MatchingAdData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot.MatchingAdData)
}

void BidRequest_AdSlot_MatchingAdData::SharedCtor() {
  _cached_size_ = 0;
  adgroup_id_ = GOOGLE_LONGLONG(0);
  minimum_cpm_micros_ = GOOGLE_LONGLONG(0);
  deprecated_campaign_id_ = GOOGLE_LONGLONG(0);
  deprecated_per_buyer_minimum_cpm_ = false;
  deprecated_fixed_cpm_micros_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_MatchingAdData::~BidRequest_AdSlot_MatchingAdData() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot.MatchingAdData)
  SharedDtor();
}

void BidRequest_AdSlot_MatchingAdData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_MatchingAdData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_MatchingAdData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_MatchingAdData_descriptor_;
}

const BidRequest_AdSlot_MatchingAdData& BidRequest_AdSlot_MatchingAdData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_MatchingAdData* BidRequest_AdSlot_MatchingAdData::default_instance_ = NULL;

BidRequest_AdSlot_MatchingAdData* BidRequest_AdSlot_MatchingAdData::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_MatchingAdData* n = new BidRequest_AdSlot_MatchingAdData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_MatchingAdData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_AdSlot_MatchingAdData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 59u) {
    ZR_(adgroup_id_, minimum_cpm_micros_);
    ZR_(deprecated_campaign_id_, deprecated_per_buyer_minimum_cpm_);
  }

#undef ZR_HELPER_
#undef ZR_

  direct_deal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_MatchingAdData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot.MatchingAdData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 DEPRECATED_campaign_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_campaign_id_)));
          set_has_deprecated_campaign_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adgroup_id;
        break;
      }

      // optional int64 adgroup_id = 2;
      case 2: {
        if (tag == 16) {
         parse_adgroup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &adgroup_id_)));
          set_has_adgroup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DEPRECATED_per_buyer_minimum_cpm;
        break;
      }

      // optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
      case 3: {
        if (tag == 24) {
         parse_DEPRECATED_per_buyer_minimum_cpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_per_buyer_minimum_cpm_)));
          set_has_deprecated_per_buyer_minimum_cpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DEPRECATED_fixed_cpm_micros;
        break;
      }

      // optional int64 DEPRECATED_fixed_cpm_micros = 4;
      case 4: {
        if (tag == 32) {
         parse_DEPRECATED_fixed_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_fixed_cpm_micros_)));
          set_has_deprecated_fixed_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minimum_cpm_micros;
        break;
      }

      // optional int64 minimum_cpm_micros = 5;
      case 5: {
        if (tag == 40) {
         parse_minimum_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minimum_cpm_micros_)));
          set_has_minimum_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_direct_deal;
        break;
      }

      // repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
      case 6: {
        if (tag == 50) {
         parse_direct_deal:
          DO_(input->IncrementRecursionDepth());
         parse_loop_direct_deal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_direct_deal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_direct_deal;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot.MatchingAdData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot.MatchingAdData)
  return false;
#undef DO_
}

void BidRequest_AdSlot_MatchingAdData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot.MatchingAdData)
  // optional int64 DEPRECATED_campaign_id = 1;
  if (has_deprecated_campaign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->deprecated_campaign_id(), output);
  }

  // optional int64 adgroup_id = 2;
  if (has_adgroup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->adgroup_id(), output);
  }

  // optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
  if (has_deprecated_per_buyer_minimum_cpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->deprecated_per_buyer_minimum_cpm(), output);
  }

  // optional int64 DEPRECATED_fixed_cpm_micros = 4;
  if (has_deprecated_fixed_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->deprecated_fixed_cpm_micros(), output);
  }

  // optional int64 minimum_cpm_micros = 5;
  if (has_minimum_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->minimum_cpm_micros(), output);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
  for (unsigned int i = 0, n = this->direct_deal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->direct_deal(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot.MatchingAdData)
}

::google::protobuf::uint8* BidRequest_AdSlot_MatchingAdData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot.MatchingAdData)
  // optional int64 DEPRECATED_campaign_id = 1;
  if (has_deprecated_campaign_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->deprecated_campaign_id(), target);
  }

  // optional int64 adgroup_id = 2;
  if (has_adgroup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->adgroup_id(), target);
  }

  // optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
  if (has_deprecated_per_buyer_minimum_cpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->deprecated_per_buyer_minimum_cpm(), target);
  }

  // optional int64 DEPRECATED_fixed_cpm_micros = 4;
  if (has_deprecated_fixed_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->deprecated_fixed_cpm_micros(), target);
  }

  // optional int64 minimum_cpm_micros = 5;
  if (has_minimum_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->minimum_cpm_micros(), target);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
  for (unsigned int i = 0, n = this->direct_deal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->direct_deal(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot.MatchingAdData)
  return target;
}

int BidRequest_AdSlot_MatchingAdData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 59u) {
    // optional int64 adgroup_id = 2;
    if (has_adgroup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->adgroup_id());
    }

    // optional int64 minimum_cpm_micros = 5;
    if (has_minimum_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minimum_cpm_micros());
    }

    // optional int64 DEPRECATED_campaign_id = 1;
    if (has_deprecated_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_campaign_id());
    }

    // optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
    if (has_deprecated_per_buyer_minimum_cpm()) {
      total_size += 1 + 1;
    }

    // optional int64 DEPRECATED_fixed_cpm_micros = 4;
    if (has_deprecated_fixed_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_fixed_cpm_micros());
    }

  }
  // repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
  total_size += 1 * this->direct_deal_size();
  for (int i = 0; i < this->direct_deal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->direct_deal(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_MatchingAdData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_AdSlot_MatchingAdData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_MatchingAdData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_MatchingAdData::MergeFrom(const BidRequest_AdSlot_MatchingAdData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  direct_deal_.MergeFrom(from.direct_deal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adgroup_id()) {
      set_adgroup_id(from.adgroup_id());
    }
    if (from.has_minimum_cpm_micros()) {
      set_minimum_cpm_micros(from.minimum_cpm_micros());
    }
    if (from.has_deprecated_campaign_id()) {
      set_deprecated_campaign_id(from.deprecated_campaign_id());
    }
    if (from.has_deprecated_per_buyer_minimum_cpm()) {
      set_deprecated_per_buyer_minimum_cpm(from.deprecated_per_buyer_minimum_cpm());
    }
    if (from.has_deprecated_fixed_cpm_micros()) {
      set_deprecated_fixed_cpm_micros(from.deprecated_fixed_cpm_micros());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_MatchingAdData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_MatchingAdData::CopyFrom(const BidRequest_AdSlot_MatchingAdData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_MatchingAdData::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_MatchingAdData::Swap(BidRequest_AdSlot_MatchingAdData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_MatchingAdData::InternalSwap(BidRequest_AdSlot_MatchingAdData* other) {
  std::swap(adgroup_id_, other->adgroup_id_);
  std::swap(minimum_cpm_micros_, other->minimum_cpm_micros_);
  direct_deal_.UnsafeArenaSwap(&other->direct_deal_);
  std::swap(deprecated_campaign_id_, other->deprecated_campaign_id_);
  std::swap(deprecated_per_buyer_minimum_cpm_, other->deprecated_per_buyer_minimum_cpm_);
  std::swap(deprecated_fixed_cpm_micros_, other->deprecated_fixed_cpm_micros_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_MatchingAdData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_MatchingAdData_descriptor_;
  metadata.reflection = BidRequest_AdSlot_MatchingAdData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot::kIdFieldNumber;
const int BidRequest_AdSlot::kAdBlockKeyFieldNumber;
const int BidRequest_AdSlot::kTargetableChannelFieldNumber;
const int BidRequest_AdSlot::kWidthFieldNumber;
const int BidRequest_AdSlot::kHeightFieldNumber;
const int BidRequest_AdSlot::kExcludedAttributeFieldNumber;
const int BidRequest_AdSlot::kAllowedVendorTypeFieldNumber;
const int BidRequest_AdSlot::kExcludedSensitiveCategoryFieldNumber;
const int BidRequest_AdSlot::kAllowedRestrictedCategoryFieldNumber;
const int BidRequest_AdSlot::kExcludedProductCategoryFieldNumber;
const int BidRequest_AdSlot::kMatchingAdDataFieldNumber;
const int BidRequest_AdSlot::kPublisherSettingsListIdFieldNumber;
const int BidRequest_AdSlot::kSlotVisibilityFieldNumber;
const int BidRequest_AdSlot::kDEPRECATEDAllowedAttributeFieldNumber;
const int BidRequest_AdSlot::kDEPRECATEDPublisherSettingsListIdFieldNumber;
const int BidRequest_AdSlot::kDEPRECATEDExcludedClickThroughUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot::BidRequest_AdSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.AdSlot)
}

void BidRequest_AdSlot::InitAsDefaultInstance() {
}

BidRequest_AdSlot::BidRequest_AdSlot(const BidRequest_AdSlot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.AdSlot)
}

void BidRequest_AdSlot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  ad_block_key_ = GOOGLE_ULONGLONG(0);
  publisher_settings_list_id_ = GOOGLE_ULONGLONG(0);
  slot_visibility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot::~BidRequest_AdSlot() {
  // @@protoc_insertion_point(destructor:BidRequest.AdSlot)
  SharedDtor();
}

void BidRequest_AdSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_descriptor_;
}

const BidRequest_AdSlot& BidRequest_AdSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot* BidRequest_AdSlot::default_instance_ = NULL;

BidRequest_AdSlot* BidRequest_AdSlot::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot* n = new BidRequest_AdSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    id_ = 0;
    ad_block_key_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 6144u) {
    publisher_settings_list_id_ = GOOGLE_ULONGLONG(0);
    slot_visibility_ = 0;
  }
  targetable_channel_.Clear();
  width_.Clear();
  height_.Clear();
  excluded_attribute_.Clear();
  allowed_vendor_type_.Clear();
  excluded_sensitive_category_.Clear();
  allowed_restricted_category_.Clear();
  excluded_product_category_.Clear();
  matching_ad_data_.Clear();
  deprecated_allowed_attribute_.Clear();
  deprecated_publisher_settings_list_id_.Clear();
  deprecated_excluded_click_through_url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.AdSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // repeated int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_width())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_width())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // repeated int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_height())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_height())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        if (input->ExpectTag(34)) goto parse_excluded_attribute;
        break;
      }

      // repeated int32 excluded_attribute = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_excluded_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_attribute())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_excluded_attribute())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DEPRECATED_allowed_attribute;
        break;
      }

      // repeated int32 DEPRECATED_allowed_attribute = 5;
      case 5: {
        if (tag == 40) {
         parse_DEPRECATED_allowed_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_deprecated_allowed_attribute())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deprecated_allowed_attribute())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DEPRECATED_allowed_attribute;
        if (input->ExpectTag(50)) goto parse_allowed_vendor_type;
        break;
      }

      // repeated int32 allowed_vendor_type = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_allowed_vendor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allowed_vendor_type())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_allowed_vendor_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_excluded_sensitive_category;
        break;
      }

      // repeated int32 excluded_sensitive_category = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_excluded_sensitive_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_sensitive_category())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_excluded_sensitive_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DEPRECATED_excluded_click_through_url;
        break;
      }

      // repeated string DEPRECATED_excluded_click_through_url = 8;
      case 8: {
        if (tag == 66) {
         parse_DEPRECATED_excluded_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deprecated_excluded_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_excluded_click_through_url(this->deprecated_excluded_click_through_url_size() - 1).data(),
            this->deprecated_excluded_click_through_url(this->deprecated_excluded_click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.AdSlot.DEPRECATED_excluded_click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DEPRECATED_excluded_click_through_url;
        if (input->ExpectTag(74)) goto parse_matching_ad_data;
        break;
      }

      // repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
      case 9: {
        if (tag == 74) {
         parse_matching_ad_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_matching_ad_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matching_ad_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_matching_ad_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_targetable_channel;
        break;
      }

      // repeated string targetable_channel = 10;
      case 10: {
        if (tag == 82) {
         parse_targetable_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_targetable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetable_channel(this->targetable_channel_size() - 1).data(),
            this->targetable_channel(this->targetable_channel_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.AdSlot.targetable_channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_targetable_channel;
        if (input->ExpectTag(90)) goto parse_DEPRECATED_publisher_settings_list_id;
        break;
      }

      // repeated bytes DEPRECATED_publisher_settings_list_id = 11;
      case 11: {
        if (tag == 90) {
         parse_DEPRECATED_publisher_settings_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_deprecated_publisher_settings_list_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_DEPRECATED_publisher_settings_list_id;
        if (input->ExpectTag(96)) goto parse_slot_visibility;
        break;
      }

      // optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
      case 12: {
        if (tag == 96) {
         parse_slot_visibility:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BidRequest_AdSlot_SlotVisibility_IsValid(value)) {
            set_slot_visibility(static_cast< ::BidRequest_AdSlot_SlotVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_excluded_product_category;
        break;
      }

      // repeated int32 excluded_product_category = 13 [packed = true];
      case 13: {
        if (tag == 106) {
         parse_excluded_product_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_product_category())));
        } else if (tag == 104) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106, input, this->mutable_excluded_product_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ad_block_key;
        break;
      }

      // optional uint64 ad_block_key = 14;
      case 14: {
        if (tag == 112) {
         parse_ad_block_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ad_block_key_)));
          set_has_ad_block_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_publisher_settings_list_id;
        break;
      }

      // optional fixed64 publisher_settings_list_id = 15;
      case 15: {
        if (tag == 121) {
         parse_publisher_settings_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &publisher_settings_list_id_)));
          set_has_publisher_settings_list_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_allowed_restricted_category;
        break;
      }

      // repeated int32 allowed_restricted_category = 16 [packed = true];
      case 16: {
        if (tag == 130) {
         parse_allowed_restricted_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allowed_restricted_category())));
        } else if (tag == 128) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 130, input, this->mutable_allowed_restricted_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.AdSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.AdSlot)
  return false;
#undef DO_
}

void BidRequest_AdSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.AdSlot)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 width = 2;
  for (int i = 0; i < this->width_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->width(i), output);
  }

  // repeated int32 height = 3;
  for (int i = 0; i < this->height_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->height(i), output);
  }

  // repeated int32 excluded_attribute = 4 [packed = true];
  if (this->excluded_attribute_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_excluded_attribute_cached_byte_size_);
  }
  for (int i = 0; i < this->excluded_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->excluded_attribute(i), output);
  }

  // repeated int32 DEPRECATED_allowed_attribute = 5;
  for (int i = 0; i < this->deprecated_allowed_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->deprecated_allowed_attribute(i), output);
  }

  // repeated int32 allowed_vendor_type = 6 [packed = true];
  if (this->allowed_vendor_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_allowed_vendor_type_cached_byte_size_);
  }
  for (int i = 0; i < this->allowed_vendor_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->allowed_vendor_type(i), output);
  }

  // repeated int32 excluded_sensitive_category = 7 [packed = true];
  if (this->excluded_sensitive_category_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_excluded_sensitive_category_cached_byte_size_);
  }
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->excluded_sensitive_category(i), output);
  }

  // repeated string DEPRECATED_excluded_click_through_url = 8;
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_excluded_click_through_url(i).data(), this->deprecated_excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.AdSlot.DEPRECATED_excluded_click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->deprecated_excluded_click_through_url(i), output);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
  for (unsigned int i = 0, n = this->matching_ad_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->matching_ad_data(i), output);
  }

  // repeated string targetable_channel = 10;
  for (int i = 0; i < this->targetable_channel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetable_channel(i).data(), this->targetable_channel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.AdSlot.targetable_channel");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->targetable_channel(i), output);
  }

  // repeated bytes DEPRECATED_publisher_settings_list_id = 11;
  for (int i = 0; i < this->deprecated_publisher_settings_list_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->deprecated_publisher_settings_list_id(i), output);
  }

  // optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
  if (has_slot_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->slot_visibility(), output);
  }

  // repeated int32 excluded_product_category = 13 [packed = true];
  if (this->excluded_product_category_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_excluded_product_category_cached_byte_size_);
  }
  for (int i = 0; i < this->excluded_product_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->excluded_product_category(i), output);
  }

  // optional uint64 ad_block_key = 14;
  if (has_ad_block_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->ad_block_key(), output);
  }

  // optional fixed64 publisher_settings_list_id = 15;
  if (has_publisher_settings_list_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(15, this->publisher_settings_list_id(), output);
  }

  // repeated int32 allowed_restricted_category = 16 [packed = true];
  if (this->allowed_restricted_category_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_allowed_restricted_category_cached_byte_size_);
  }
  for (int i = 0; i < this->allowed_restricted_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->allowed_restricted_category(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.AdSlot)
}

::google::protobuf::uint8* BidRequest_AdSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.AdSlot)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 width = 2;
  for (int i = 0; i < this->width_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->width(i), target);
  }

  // repeated int32 height = 3;
  for (int i = 0; i < this->height_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->height(i), target);
  }

  // repeated int32 excluded_attribute = 4 [packed = true];
  if (this->excluded_attribute_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _excluded_attribute_cached_byte_size_, target);
  }
  for (int i = 0; i < this->excluded_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->excluded_attribute(i), target);
  }

  // repeated int32 DEPRECATED_allowed_attribute = 5;
  for (int i = 0; i < this->deprecated_allowed_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->deprecated_allowed_attribute(i), target);
  }

  // repeated int32 allowed_vendor_type = 6 [packed = true];
  if (this->allowed_vendor_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _allowed_vendor_type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->allowed_vendor_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->allowed_vendor_type(i), target);
  }

  // repeated int32 excluded_sensitive_category = 7 [packed = true];
  if (this->excluded_sensitive_category_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _excluded_sensitive_category_cached_byte_size_, target);
  }
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->excluded_sensitive_category(i), target);
  }

  // repeated string DEPRECATED_excluded_click_through_url = 8;
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_excluded_click_through_url(i).data(), this->deprecated_excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.AdSlot.DEPRECATED_excluded_click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->deprecated_excluded_click_through_url(i), target);
  }

  // repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
  for (unsigned int i = 0, n = this->matching_ad_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->matching_ad_data(i), target);
  }

  // repeated string targetable_channel = 10;
  for (int i = 0; i < this->targetable_channel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetable_channel(i).data(), this->targetable_channel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.AdSlot.targetable_channel");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->targetable_channel(i), target);
  }

  // repeated bytes DEPRECATED_publisher_settings_list_id = 11;
  for (int i = 0; i < this->deprecated_publisher_settings_list_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(11, this->deprecated_publisher_settings_list_id(i), target);
  }

  // optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
  if (has_slot_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->slot_visibility(), target);
  }

  // repeated int32 excluded_product_category = 13 [packed = true];
  if (this->excluded_product_category_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _excluded_product_category_cached_byte_size_, target);
  }
  for (int i = 0; i < this->excluded_product_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->excluded_product_category(i), target);
  }

  // optional uint64 ad_block_key = 14;
  if (has_ad_block_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->ad_block_key(), target);
  }

  // optional fixed64 publisher_settings_list_id = 15;
  if (has_publisher_settings_list_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(15, this->publisher_settings_list_id(), target);
  }

  // repeated int32 allowed_restricted_category = 16 [packed = true];
  if (this->allowed_restricted_category_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _allowed_restricted_category_cached_byte_size_, target);
  }
  for (int i = 0; i < this->allowed_restricted_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->allowed_restricted_category(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.AdSlot)
  return target;
}

int BidRequest_AdSlot::ByteSize() const {
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // optional uint64 ad_block_key = 14;
  if (has_ad_block_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ad_block_key());
  }

  if (_has_bits_[11 / 32] & 6144u) {
    // optional fixed64 publisher_settings_list_id = 15;
    if (has_publisher_settings_list_id()) {
      total_size += 1 + 8;
    }

    // optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
    if (has_slot_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot_visibility());
    }

  }
  // repeated string targetable_channel = 10;
  total_size += 1 * this->targetable_channel_size();
  for (int i = 0; i < this->targetable_channel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->targetable_channel(i));
  }

  // repeated int32 width = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->width_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->width(i));
    }
    total_size += 1 * this->width_size() + data_size;
  }

  // repeated int32 height = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->height_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->height(i));
    }
    total_size += 1 * this->height_size() + data_size;
  }

  // repeated int32 excluded_attribute = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_attribute(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _excluded_attribute_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 allowed_vendor_type = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->allowed_vendor_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allowed_vendor_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allowed_vendor_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 excluded_sensitive_category = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_sensitive_category(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _excluded_sensitive_category_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 allowed_restricted_category = 16 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->allowed_restricted_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allowed_restricted_category(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allowed_restricted_category_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 excluded_product_category = 13 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_product_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_product_category(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _excluded_product_category_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
  total_size += 1 * this->matching_ad_data_size();
  for (int i = 0; i < this->matching_ad_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matching_ad_data(i));
  }

  // repeated int32 DEPRECATED_allowed_attribute = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->deprecated_allowed_attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deprecated_allowed_attribute(i));
    }
    total_size += 1 * this->deprecated_allowed_attribute_size() + data_size;
  }

  // repeated bytes DEPRECATED_publisher_settings_list_id = 11;
  total_size += 1 * this->deprecated_publisher_settings_list_id_size();
  for (int i = 0; i < this->deprecated_publisher_settings_list_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->deprecated_publisher_settings_list_id(i));
  }

  // repeated string DEPRECATED_excluded_click_through_url = 8;
  total_size += 1 * this->deprecated_excluded_click_through_url_size();
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deprecated_excluded_click_through_url(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_AdSlot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot::MergeFrom(const BidRequest_AdSlot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  targetable_channel_.MergeFrom(from.targetable_channel_);
  width_.MergeFrom(from.width_);
  height_.MergeFrom(from.height_);
  excluded_attribute_.MergeFrom(from.excluded_attribute_);
  allowed_vendor_type_.MergeFrom(from.allowed_vendor_type_);
  excluded_sensitive_category_.MergeFrom(from.excluded_sensitive_category_);
  allowed_restricted_category_.MergeFrom(from.allowed_restricted_category_);
  excluded_product_category_.MergeFrom(from.excluded_product_category_);
  matching_ad_data_.MergeFrom(from.matching_ad_data_);
  deprecated_allowed_attribute_.MergeFrom(from.deprecated_allowed_attribute_);
  deprecated_publisher_settings_list_id_.MergeFrom(from.deprecated_publisher_settings_list_id_);
  deprecated_excluded_click_through_url_.MergeFrom(from.deprecated_excluded_click_through_url_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ad_block_key()) {
      set_ad_block_key(from.ad_block_key());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_publisher_settings_list_id()) {
      set_publisher_settings_list_id(from.publisher_settings_list_id());
    }
    if (from.has_slot_visibility()) {
      set_slot_visibility(from.slot_visibility());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot::CopyFrom(const BidRequest_AdSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_AdSlot::Swap(BidRequest_AdSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot::InternalSwap(BidRequest_AdSlot* other) {
  std::swap(id_, other->id_);
  std::swap(ad_block_key_, other->ad_block_key_);
  targetable_channel_.UnsafeArenaSwap(&other->targetable_channel_);
  width_.UnsafeArenaSwap(&other->width_);
  height_.UnsafeArenaSwap(&other->height_);
  excluded_attribute_.UnsafeArenaSwap(&other->excluded_attribute_);
  allowed_vendor_type_.UnsafeArenaSwap(&other->allowed_vendor_type_);
  excluded_sensitive_category_.UnsafeArenaSwap(&other->excluded_sensitive_category_);
  allowed_restricted_category_.UnsafeArenaSwap(&other->allowed_restricted_category_);
  excluded_product_category_.UnsafeArenaSwap(&other->excluded_product_category_);
  matching_ad_data_.UnsafeArenaSwap(&other->matching_ad_data_);
  std::swap(publisher_settings_list_id_, other->publisher_settings_list_id_);
  std::swap(slot_visibility_, other->slot_visibility_);
  deprecated_allowed_attribute_.UnsafeArenaSwap(&other->deprecated_allowed_attribute_);
  deprecated_publisher_settings_list_id_.UnsafeArenaSwap(&other->deprecated_publisher_settings_list_id_);
  deprecated_excluded_click_through_url_.UnsafeArenaSwap(&other->deprecated_excluded_click_through_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_descriptor_;
  metadata.reflection = BidRequest_AdSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_BidResponseFeedback::kRequestIdFieldNumber;
const int BidRequest_BidResponseFeedback::kCreativeIndexFieldNumber;
const int BidRequest_BidResponseFeedback::kCreativeStatusCodeFieldNumber;
const int BidRequest_BidResponseFeedback::kCpmMicrosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_BidResponseFeedback::BidRequest_BidResponseFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.BidResponseFeedback)
}

void BidRequest_BidResponseFeedback::InitAsDefaultInstance() {
}

BidRequest_BidResponseFeedback::BidRequest_BidResponseFeedback(const BidRequest_BidResponseFeedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.BidResponseFeedback)
}

void BidRequest_BidResponseFeedback::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_index_ = 0;
  creative_status_code_ = 0;
  cpm_micros_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_BidResponseFeedback::~BidRequest_BidResponseFeedback() {
  // @@protoc_insertion_point(destructor:BidRequest.BidResponseFeedback)
  SharedDtor();
}

void BidRequest_BidResponseFeedback::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_BidResponseFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_BidResponseFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_BidResponseFeedback_descriptor_;
}

const BidRequest_BidResponseFeedback& BidRequest_BidResponseFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_BidResponseFeedback* BidRequest_BidResponseFeedback::default_instance_ = NULL;

BidRequest_BidResponseFeedback* BidRequest_BidResponseFeedback::New(::google::protobuf::Arena* arena) const {
  BidRequest_BidResponseFeedback* n = new BidRequest_BidResponseFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_BidResponseFeedback::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_BidResponseFeedback*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(creative_index_, cpm_micros_);
    if (has_request_id()) {
      request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_BidResponseFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.BidResponseFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creative_index;
        break;
      }

      // optional int32 creative_index = 2;
      case 2: {
        if (tag == 16) {
         parse_creative_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_index_)));
          set_has_creative_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creative_status_code;
        break;
      }

      // optional int32 creative_status_code = 3;
      case 3: {
        if (tag == 24) {
         parse_creative_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_status_code_)));
          set_has_creative_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cpm_micros;
        break;
      }

      // optional int64 cpm_micros = 4;
      case 4: {
        if (tag == 32) {
         parse_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpm_micros_)));
          set_has_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.BidResponseFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.BidResponseFeedback)
  return false;
#undef DO_
}

void BidRequest_BidResponseFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.BidResponseFeedback)
  // optional bytes request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->request_id(), output);
  }

  // optional int32 creative_index = 2;
  if (has_creative_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->creative_index(), output);
  }

  // optional int32 creative_status_code = 3;
  if (has_creative_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->creative_status_code(), output);
  }

  // optional int64 cpm_micros = 4;
  if (has_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cpm_micros(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.BidResponseFeedback)
}

::google::protobuf::uint8* BidRequest_BidResponseFeedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.BidResponseFeedback)
  // optional bytes request_id = 1;
  if (has_request_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request_id(), target);
  }

  // optional int32 creative_index = 2;
  if (has_creative_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->creative_index(), target);
  }

  // optional int32 creative_status_code = 3;
  if (has_creative_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->creative_status_code(), target);
  }

  // optional int64 cpm_micros = 4;
  if (has_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cpm_micros(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.BidResponseFeedback)
  return target;
}

int BidRequest_BidResponseFeedback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_id());
    }

    // optional int32 creative_index = 2;
    if (has_creative_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_index());
    }

    // optional int32 creative_status_code = 3;
    if (has_creative_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_status_code());
    }

    // optional int64 cpm_micros = 4;
    if (has_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cpm_micros());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_BidResponseFeedback::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_BidResponseFeedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_BidResponseFeedback>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_BidResponseFeedback::MergeFrom(const BidRequest_BidResponseFeedback& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (from.has_creative_index()) {
      set_creative_index(from.creative_index());
    }
    if (from.has_creative_status_code()) {
      set_creative_status_code(from.creative_status_code());
    }
    if (from.has_cpm_micros()) {
      set_cpm_micros(from.cpm_micros());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_BidResponseFeedback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_BidResponseFeedback::CopyFrom(const BidRequest_BidResponseFeedback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_BidResponseFeedback::IsInitialized() const {

  return true;
}

void BidRequest_BidResponseFeedback::Swap(BidRequest_BidResponseFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_BidResponseFeedback::InternalSwap(BidRequest_BidResponseFeedback* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(creative_index_, other->creative_index_);
  std::swap(creative_status_code_, other->creative_status_code_);
  std::swap(cpm_micros_, other->cpm_micros_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_BidResponseFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_BidResponseFeedback_descriptor_;
  metadata.reflection = BidRequest_BidResponseFeedback_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_MatchingNetwork::kDEPRECATEDNetworkIdFieldNumber;
const int BidRequest_MatchingNetwork::kDEPRECATEDGoogleUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_MatchingNetwork::BidRequest_MatchingNetwork()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest.MatchingNetwork)
}

void BidRequest_MatchingNetwork::InitAsDefaultInstance() {
}

BidRequest_MatchingNetwork::BidRequest_MatchingNetwork(const BidRequest_MatchingNetwork& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest.MatchingNetwork)
}

void BidRequest_MatchingNetwork::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deprecated_network_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_google_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_MatchingNetwork::~BidRequest_MatchingNetwork() {
  // @@protoc_insertion_point(destructor:BidRequest.MatchingNetwork)
  SharedDtor();
}

void BidRequest_MatchingNetwork::SharedDtor() {
  deprecated_network_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_google_user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_MatchingNetwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_MatchingNetwork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_MatchingNetwork_descriptor_;
}

const BidRequest_MatchingNetwork& BidRequest_MatchingNetwork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest_MatchingNetwork* BidRequest_MatchingNetwork::default_instance_ = NULL;

BidRequest_MatchingNetwork* BidRequest_MatchingNetwork::New(::google::protobuf::Arena* arena) const {
  BidRequest_MatchingNetwork* n = new BidRequest_MatchingNetwork;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_MatchingNetwork::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_deprecated_network_id()) {
      deprecated_network_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_google_user_id()) {
      deprecated_google_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_MatchingNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest.MatchingNetwork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DEPRECATED_network_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_network_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_network_id().data(), this->deprecated_network_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.MatchingNetwork.DEPRECATED_network_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DEPRECATED_google_user_id;
        break;
      }

      // optional string DEPRECATED_google_user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_DEPRECATED_google_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_google_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_google_user_id().data(), this->deprecated_google_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.MatchingNetwork.DEPRECATED_google_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest.MatchingNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest.MatchingNetwork)
  return false;
#undef DO_
}

void BidRequest_MatchingNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest.MatchingNetwork)
  // optional string DEPRECATED_network_id = 1;
  if (has_deprecated_network_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_network_id().data(), this->deprecated_network_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.MatchingNetwork.DEPRECATED_network_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deprecated_network_id(), output);
  }

  // optional string DEPRECATED_google_user_id = 2;
  if (has_deprecated_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_google_user_id().data(), this->deprecated_google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.MatchingNetwork.DEPRECATED_google_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deprecated_google_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest.MatchingNetwork)
}

::google::protobuf::uint8* BidRequest_MatchingNetwork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest.MatchingNetwork)
  // optional string DEPRECATED_network_id = 1;
  if (has_deprecated_network_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_network_id().data(), this->deprecated_network_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.MatchingNetwork.DEPRECATED_network_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deprecated_network_id(), target);
  }

  // optional string DEPRECATED_google_user_id = 2;
  if (has_deprecated_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_google_user_id().data(), this->deprecated_google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.MatchingNetwork.DEPRECATED_google_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deprecated_google_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest.MatchingNetwork)
  return target;
}

int BidRequest_MatchingNetwork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string DEPRECATED_network_id = 1;
    if (has_deprecated_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_network_id());
    }

    // optional string DEPRECATED_google_user_id = 2;
    if (has_deprecated_google_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_google_user_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_MatchingNetwork::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest_MatchingNetwork* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_MatchingNetwork>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_MatchingNetwork::MergeFrom(const BidRequest_MatchingNetwork& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deprecated_network_id()) {
      set_has_deprecated_network_id();
      deprecated_network_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_network_id_);
    }
    if (from.has_deprecated_google_user_id()) {
      set_has_deprecated_google_user_id();
      deprecated_google_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_google_user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_MatchingNetwork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_MatchingNetwork::CopyFrom(const BidRequest_MatchingNetwork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_MatchingNetwork::IsInitialized() const {

  return true;
}

void BidRequest_MatchingNetwork::Swap(BidRequest_MatchingNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_MatchingNetwork::InternalSwap(BidRequest_MatchingNetwork* other) {
  deprecated_network_id_.Swap(&other->deprecated_network_id_);
  deprecated_google_user_id_.Swap(&other->deprecated_google_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_MatchingNetwork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_MatchingNetwork_descriptor_;
  metadata.reflection = BidRequest_MatchingNetwork_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest::kIdFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kGoogleUserIdFieldNumber;
const int BidRequest::kCookieVersionFieldNumber;
const int BidRequest::kCookieAgeSecondsFieldNumber;
const int BidRequest::kHostedMatchDataFieldNumber;
const int BidRequest::kUserAgentFieldNumber;
const int BidRequest::kGeoCriteriaIdFieldNumber;
const int BidRequest::kPostalCodeFieldNumber;
const int BidRequest::kPostalCodePrefixFieldNumber;
const int BidRequest::kEncryptedHyperlocalSetFieldNumber;
const int BidRequest::kTimezoneOffsetFieldNumber;
const int BidRequest::kUserVerticalFieldNumber;
const int BidRequest::kUserListFieldNumber;
const int BidRequest::kSellerNetworkIdFieldNumber;
const int BidRequest::kUrlFieldNumber;
const int BidRequest::kAnonymousIdFieldNumber;
const int BidRequest::kDetectedLanguageFieldNumber;
const int BidRequest::kDetectedVerticalFieldNumber;
const int BidRequest::kVerticalDictionaryVersionFieldNumber;
const int BidRequest::kDetectedContentLabelFieldNumber;
const int BidRequest::kSiteListIdFieldNumber;
const int BidRequest::kKeyValueFieldNumber;
const int BidRequest::kMobileFieldNumber;
const int BidRequest::kVideoFieldNumber;
const int BidRequest::kPublisherSettingsListIdFieldNumber;
const int BidRequest::kAdslotFieldNumber;
const int BidRequest::kBidResponseFeedbackFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kIsPingFieldNumber;
const int BidRequest::kIsPredictedToBeIgnoredFieldNumber;
const int BidRequest::kDEPRECATEDProtocolVersionFieldNumber;
const int BidRequest::kDEPRECATEDClickTrackingUrlFieldNumber;
const int BidRequest::kDEPRECATEDCookieFieldNumber;
const int BidRequest::kDEPRECATEDCountryFieldNumber;
const int BidRequest::kDEPRECATEDRegionFieldNumber;
const int BidRequest::kDEPRECATEDCityFieldNumber;
const int BidRequest::kDEPRECATEDMetroFieldNumber;
const int BidRequest::kDEPRECATEDHashedCookieFieldNumber;
const int BidRequest::kDEPRECATEDExcludedClickThroughUrlFieldNumber;
const int BidRequest::kDEPRECATEDSellerNetworkFieldNumber;
const int BidRequest::kDEPRECATEDPublisherSettingsListIdFieldNumber;
const int BidRequest::kDEPRECATEDMatchingNetworkFieldNumber;
const int BidRequest::kDEPRECATEDExperimentalDeadlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest::BidRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  mobile_ = const_cast< ::BidRequest_Mobile*>(&::BidRequest_Mobile::default_instance());
  video_ = const_cast< ::BidRequest_Video*>(&::BidRequest_Video::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_version_ = 0u;
  cookie_age_seconds_ = 0;
  hosted_match_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_criteria_id_ = 0;
  postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postal_code_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_hyperlocal_set_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_offset_ = 0;
  seller_network_id_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anonymous_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertical_dictionary_version_ = 0;
  mobile_ = NULL;
  video_ = NULL;
  publisher_settings_list_id_ = GOOGLE_ULONGLONG(0);
  is_test_ = false;
  is_ping_ = false;
  is_predicted_to_be_ignored_ = false;
  deprecated_protocol_version_ = 0;
  deprecated_click_tracking_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_cookie_ = GOOGLE_ULONGLONG(0);
  deprecated_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_metro_ = 0;
  deprecated_hashed_cookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_seller_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_publisher_settings_list_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_experimental_deadline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hosted_match_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postal_code_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_hyperlocal_set_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anonymous_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_click_tracking_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_hashed_cookie_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_seller_network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_publisher_settings_list_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete mobile_;
    delete video_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New(::google::protobuf::Arena* arena) const {
  BidRequest* n = new BidRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(cookie_version_, cookie_age_seconds_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_google_user_id()) {
      google_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hosted_match_data()) {
      hosted_match_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_agent()) {
      user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    geo_criteria_id_ = 0;
  }
  if (_has_bits_[8 / 32] & 52992u) {
    if (has_postal_code()) {
      postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_postal_code_prefix()) {
      postal_code_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_encrypted_hyperlocal_set()) {
      encrypted_hyperlocal_set_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    timezone_offset_ = 0;
    seller_network_id_ = 0;
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 8978432u) {
    if (has_anonymous_id()) {
      anonymous_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    vertical_dictionary_version_ = 0;
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::BidRequest_Mobile::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4076863488u) {
    ZR_(deprecated_protocol_version_, is_predicted_to_be_ignored_);
    if (has_video()) {
      if (video_ != NULL) video_->::BidRequest_Video::Clear();
    }
    publisher_settings_list_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & 127u) {
    if (has_deprecated_click_tracking_url()) {
      deprecated_click_tracking_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    deprecated_cookie_ = GOOGLE_ULONGLONG(0);
    if (has_deprecated_country()) {
      deprecated_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_region()) {
      deprecated_region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_city()) {
      deprecated_city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    deprecated_metro_ = 0;
    if (has_deprecated_hashed_cookie()) {
      deprecated_hashed_cookie_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[40 / 32] & 2816u) {
    if (has_deprecated_seller_network()) {
      deprecated_seller_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_publisher_settings_list_id()) {
      deprecated_publisher_settings_list_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    deprecated_experimental_deadline_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  user_vertical_.Clear();
  user_list_.Clear();
  detected_language_.Clear();
  detected_vertical_.Clear();
  detected_content_label_.Clear();
  site_list_id_.Clear();
  key_value_.Clear();
  adslot_.Clear();
  bid_response_feedback_.Clear();
  deprecated_excluded_click_through_url_.Clear();
  deprecated_matching_network_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DEPRECATED_protocol_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_protocol_version_)));
          set_has_deprecated_protocol_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required bytes id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DEPRECATED_click_tracking_url;
        break;
      }

      // optional string DEPRECATED_click_tracking_url = 3;
      case 3: {
        if (tag == 26) {
         parse_DEPRECATED_click_tracking_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_click_tracking_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_click_tracking_url().data(), this->deprecated_click_tracking_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.DEPRECATED_click_tracking_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional bytes ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DEPRECATED_cookie;
        break;
      }

      // optional uint64 DEPRECATED_cookie = 5;
      case 5: {
        if (tag == 40) {
         parse_DEPRECATED_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deprecated_cookie_)));
          set_has_deprecated_cookie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 6;
      case 6: {
        if (tag == 50) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.user_agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DEPRECATED_country;
        break;
      }

      // optional string DEPRECATED_country = 7;
      case 7: {
        if (tag == 58) {
         parse_DEPRECATED_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_country().data(), this->deprecated_country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.DEPRECATED_country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DEPRECATED_region;
        break;
      }

      // optional string DEPRECATED_region = 8;
      case 8: {
        if (tag == 66) {
         parse_DEPRECATED_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_region().data(), this->deprecated_region().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.DEPRECATED_region");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_DEPRECATED_city;
        break;
      }

      // optional string DEPRECATED_city = 9;
      case 9: {
        if (tag == 74) {
         parse_DEPRECATED_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_city().data(), this->deprecated_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.DEPRECATED_city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_DEPRECATED_metro;
        break;
      }

      // optional int32 DEPRECATED_metro = 10;
      case 10: {
        if (tag == 80) {
         parse_DEPRECATED_metro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_metro_)));
          set_has_deprecated_metro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_url;
        break;
      }

      // optional string url = 11;
      case 11: {
        if (tag == 90) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_detected_language;
        break;
      }

      // repeated string detected_language = 12;
      case 12: {
        if (tag == 98) {
         parse_detected_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_detected_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detected_language(this->detected_language_size() - 1).data(),
            this->detected_language(this->detected_language_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.detected_language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_detected_language;
        if (input->ExpectTag(106)) goto parse_detected_vertical;
        break;
      }

      // repeated .BidRequest.Vertical detected_vertical = 13;
      case 13: {
        if (tag == 106) {
         parse_detected_vertical:
          DO_(input->IncrementRecursionDepth());
         parse_loop_detected_vertical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_detected_vertical()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_detected_vertical;
        if (input->ExpectTag(114)) goto parse_loop_adslot;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .BidRequest.AdSlot adslot = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_adslot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adslot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_adslot;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(120)) goto parse_is_test;
        break;
      }

      // optional bool is_test = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_DEPRECATED_hashed_cookie;
        break;
      }

      // optional bytes DEPRECATED_hashed_cookie = 16;
      case 16: {
        if (tag == 130) {
         parse_DEPRECATED_hashed_cookie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deprecated_hashed_cookie()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_is_ping;
        break;
      }

      // optional bool is_ping = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_DEPRECATED_excluded_click_through_url;
        break;
      }

      // repeated string DEPRECATED_excluded_click_through_url = 18;
      case 18: {
        if (tag == 146) {
         parse_DEPRECATED_excluded_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deprecated_excluded_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_excluded_click_through_url(this->deprecated_excluded_click_through_url_size() - 1).data(),
            this->deprecated_excluded_click_through_url(this->deprecated_excluded_click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.DEPRECATED_excluded_click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_DEPRECATED_excluded_click_through_url;
        if (input->ExpectTag(154)) goto parse_anonymous_id;
        break;
      }

      // optional string anonymous_id = 19;
      case 19: {
        if (tag == 154) {
         parse_anonymous_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anonymous_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->anonymous_id().data(), this->anonymous_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.anonymous_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_cookie_version;
        break;
      }

      // optional uint32 cookie_version = 20;
      case 20: {
        if (tag == 160) {
         parse_cookie_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookie_version_)));
          set_has_cookie_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_google_user_id;
        break;
      }

      // optional string google_user_id = 21;
      case 21: {
        if (tag == 170) {
         parse_google_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->google_user_id().data(), this->google_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.google_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_DEPRECATED_seller_network;
        break;
      }

      // optional string DEPRECATED_seller_network = 22;
      case 22: {
        if (tag == 178) {
         parse_DEPRECATED_seller_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_seller_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_seller_network().data(), this->deprecated_seller_network().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.DEPRECATED_seller_network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_DEPRECATED_publisher_settings_list_id;
        break;
      }

      // optional bytes DEPRECATED_publisher_settings_list_id = 23;
      case 23: {
        if (tag == 186) {
         parse_DEPRECATED_publisher_settings_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deprecated_publisher_settings_list_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_vertical_dictionary_version;
        break;
      }

      // optional int32 vertical_dictionary_version = 24;
      case 24: {
        if (tag == 192) {
         parse_vertical_dictionary_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_dictionary_version_)));
          set_has_vertical_dictionary_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_timezone_offset;
        break;
      }

      // optional int32 timezone_offset = 25;
      case 25: {
        if (tag == 200) {
         parse_timezone_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_offset_)));
          set_has_timezone_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_detected_content_label;
        break;
      }

      // repeated int32 detected_content_label = 26 [packed = true];
      case 26: {
        if (tag == 210) {
         parse_detected_content_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_detected_content_label())));
        } else if (tag == 208) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 210, input, this->mutable_detected_content_label())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_DEPRECATED_matching_network;
        break;
      }

      // repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
      case 27: {
        if (tag == 218) {
         parse_DEPRECATED_matching_network:
          DO_(input->IncrementRecursionDepth());
         parse_loop_DEPRECATED_matching_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_deprecated_matching_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_loop_DEPRECATED_matching_network;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(226)) goto parse_mobile;
        break;
      }

      // optional .BidRequest.Mobile mobile = 28;
      case 28: {
        if (tag == 226) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_video;
        break;
      }

      // optional .BidRequest.Video video = 29;
      case 29: {
        if (tag == 234) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_user_vertical;
        break;
      }

      // repeated int32 user_vertical = 30 [packed = true];
      case 30: {
        if (tag == 242) {
         parse_user_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_vertical())));
        } else if (tag == 240) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 242, input, this->mutable_user_vertical())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_cookie_age_seconds;
        break;
      }

      // optional int32 cookie_age_seconds = 31;
      case 31: {
        if (tag == 248) {
         parse_cookie_age_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cookie_age_seconds_)));
          set_has_cookie_age_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_user_list;
        break;
      }

      // repeated .BidRequest.UserList user_list = 32;
      case 32: {
        if (tag == 258) {
         parse_user_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_loop_user_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(266)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 33;
      case 33: {
        if (tag == 266) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.postal_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_postal_code_prefix;
        break;
      }

      // optional string postal_code_prefix = 34;
      case 34: {
        if (tag == 274) {
         parse_postal_code_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postal_code_prefix().data(), this->postal_code_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.postal_code_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_DEPRECATED_experimental_deadline;
        break;
      }

      // optional bool DEPRECATED_experimental_deadline = 35 [default = false];
      case 35: {
        if (tag == 280) {
         parse_DEPRECATED_experimental_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_experimental_deadline_)));
          set_has_deprecated_experimental_deadline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_site_list_id;
        break;
      }

      // repeated int32 site_list_id = 36;
      case 36: {
        if (tag == 288) {
         parse_site_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 288, input, this->mutable_site_list_id())));
        } else if (tag == 290) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_site_list_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_site_list_id;
        if (input->ExpectTag(298)) goto parse_hosted_match_data;
        break;
      }

      // optional bytes hosted_match_data = 37;
      case 37: {
        if (tag == 298) {
         parse_hosted_match_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hosted_match_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_key_value;
        break;
      }

      // repeated .BidRequest.KeyValue key_value = 38;
      case 38: {
        if (tag == 306) {
         parse_key_value:
          DO_(input->IncrementRecursionDepth());
         parse_loop_key_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_key_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_loop_key_value;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(312)) goto parse_geo_criteria_id;
        break;
      }

      // optional int32 geo_criteria_id = 39;
      case 39: {
        if (tag == 312) {
         parse_geo_criteria_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geo_criteria_id_)));
          set_has_geo_criteria_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_encrypted_hyperlocal_set;
        break;
      }

      // optional bytes encrypted_hyperlocal_set = 40;
      case 40: {
        if (tag == 322) {
         parse_encrypted_hyperlocal_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_hyperlocal_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_seller_network_id;
        break;
      }

      // optional int32 seller_network_id = 41;
      case 41: {
        if (tag == 328) {
         parse_seller_network_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seller_network_id_)));
          set_has_seller_network_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(337)) goto parse_publisher_settings_list_id;
        break;
      }

      // optional fixed64 publisher_settings_list_id = 42;
      case 42: {
        if (tag == 337) {
         parse_publisher_settings_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &publisher_settings_list_id_)));
          set_has_publisher_settings_list_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_bid_response_feedback;
        break;
      }

      // repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
      case 44: {
        if (tag == 354) {
         parse_bid_response_feedback:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bid_response_feedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bid_response_feedback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_loop_bid_response_feedback;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(360)) goto parse_is_predicted_to_be_ignored;
        break;
      }

      // optional bool is_predicted_to_be_ignored = 45 [default = false];
      case 45: {
        if (tag == 360) {
         parse_is_predicted_to_be_ignored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_predicted_to_be_ignored_)));
          set_has_is_predicted_to_be_ignored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest)
  // optional int32 DEPRECATED_protocol_version = 1;
  if (has_deprecated_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deprecated_protocol_version(), output);
  }

  // required bytes id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id(), output);
  }

  // optional string DEPRECATED_click_tracking_url = 3;
  if (has_deprecated_click_tracking_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_click_tracking_url().data(), this->deprecated_click_tracking_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_click_tracking_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deprecated_click_tracking_url(), output);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ip(), output);
  }

  // optional uint64 DEPRECATED_cookie = 5;
  if (has_deprecated_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->deprecated_cookie(), output);
  }

  // optional string user_agent = 6;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_agent(), output);
  }

  // optional string DEPRECATED_country = 7;
  if (has_deprecated_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_country().data(), this->deprecated_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->deprecated_country(), output);
  }

  // optional string DEPRECATED_region = 8;
  if (has_deprecated_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_region().data(), this->deprecated_region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->deprecated_region(), output);
  }

  // optional string DEPRECATED_city = 9;
  if (has_deprecated_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_city().data(), this->deprecated_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->deprecated_city(), output);
  }

  // optional int32 DEPRECATED_metro = 10;
  if (has_deprecated_metro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->deprecated_metro(), output);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->url(), output);
  }

  // repeated string detected_language = 12;
  for (int i = 0; i < this->detected_language_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language(i).data(), this->detected_language(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.detected_language");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->detected_language(i), output);
  }

  // repeated .BidRequest.Vertical detected_vertical = 13;
  for (unsigned int i = 0, n = this->detected_vertical_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->detected_vertical(i), output);
  }

  // repeated .BidRequest.AdSlot adslot = 14;
  for (unsigned int i = 0, n = this->adslot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->adslot(i), output);
  }

  // optional bool is_test = 15 [default = false];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_test(), output);
  }

  // optional bytes DEPRECATED_hashed_cookie = 16;
  if (has_deprecated_hashed_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->deprecated_hashed_cookie(), output);
  }

  // optional bool is_ping = 17 [default = false];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_ping(), output);
  }

  // repeated string DEPRECATED_excluded_click_through_url = 18;
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_excluded_click_through_url(i).data(), this->deprecated_excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_excluded_click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->deprecated_excluded_click_through_url(i), output);
  }

  // optional string anonymous_id = 19;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.anonymous_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->anonymous_id(), output);
  }

  // optional uint32 cookie_version = 20;
  if (has_cookie_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cookie_version(), output);
  }

  // optional string google_user_id = 21;
  if (has_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->google_user_id().data(), this->google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.google_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->google_user_id(), output);
  }

  // optional string DEPRECATED_seller_network = 22;
  if (has_deprecated_seller_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_seller_network().data(), this->deprecated_seller_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_seller_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->deprecated_seller_network(), output);
  }

  // optional bytes DEPRECATED_publisher_settings_list_id = 23;
  if (has_deprecated_publisher_settings_list_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->deprecated_publisher_settings_list_id(), output);
  }

  // optional int32 vertical_dictionary_version = 24;
  if (has_vertical_dictionary_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->vertical_dictionary_version(), output);
  }

  // optional int32 timezone_offset = 25;
  if (has_timezone_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->timezone_offset(), output);
  }

  // repeated int32 detected_content_label = 26 [packed = true];
  if (this->detected_content_label_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(26, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_detected_content_label_cached_byte_size_);
  }
  for (int i = 0; i < this->detected_content_label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->detected_content_label(i), output);
  }

  // repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
  for (unsigned int i = 0, n = this->deprecated_matching_network_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->deprecated_matching_network(i), output);
  }

  // optional .BidRequest.Mobile mobile = 28;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->mobile_, output);
  }

  // optional .BidRequest.Video video = 29;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->video_, output);
  }

  // repeated int32 user_vertical = 30 [packed = true];
  if (this->user_vertical_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(30, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_user_vertical_cached_byte_size_);
  }
  for (int i = 0; i < this->user_vertical_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->user_vertical(i), output);
  }

  // optional int32 cookie_age_seconds = 31;
  if (has_cookie_age_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->cookie_age_seconds(), output);
  }

  // repeated .BidRequest.UserList user_list = 32;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->user_list(i), output);
  }

  // optional string postal_code = 33;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.postal_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->postal_code(), output);
  }

  // optional string postal_code_prefix = 34;
  if (has_postal_code_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code_prefix().data(), this->postal_code_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.postal_code_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->postal_code_prefix(), output);
  }

  // optional bool DEPRECATED_experimental_deadline = 35 [default = false];
  if (has_deprecated_experimental_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->deprecated_experimental_deadline(), output);
  }

  // repeated int32 site_list_id = 36;
  for (int i = 0; i < this->site_list_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      36, this->site_list_id(i), output);
  }

  // optional bytes hosted_match_data = 37;
  if (has_hosted_match_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      37, this->hosted_match_data(), output);
  }

  // repeated .BidRequest.KeyValue key_value = 38;
  for (unsigned int i = 0, n = this->key_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->key_value(i), output);
  }

  // optional int32 geo_criteria_id = 39;
  if (has_geo_criteria_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->geo_criteria_id(), output);
  }

  // optional bytes encrypted_hyperlocal_set = 40;
  if (has_encrypted_hyperlocal_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      40, this->encrypted_hyperlocal_set(), output);
  }

  // optional int32 seller_network_id = 41;
  if (has_seller_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->seller_network_id(), output);
  }

  // optional fixed64 publisher_settings_list_id = 42;
  if (has_publisher_settings_list_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(42, this->publisher_settings_list_id(), output);
  }

  // repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
  for (unsigned int i = 0, n = this->bid_response_feedback_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->bid_response_feedback(i), output);
  }

  // optional bool is_predicted_to_be_ignored = 45 [default = false];
  if (has_is_predicted_to_be_ignored()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->is_predicted_to_be_ignored(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest)
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest)
  // optional int32 DEPRECATED_protocol_version = 1;
  if (has_deprecated_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deprecated_protocol_version(), target);
  }

  // required bytes id = 2;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }

  // optional string DEPRECATED_click_tracking_url = 3;
  if (has_deprecated_click_tracking_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_click_tracking_url().data(), this->deprecated_click_tracking_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_click_tracking_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deprecated_click_tracking_url(), target);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  // optional uint64 DEPRECATED_cookie = 5;
  if (has_deprecated_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->deprecated_cookie(), target);
  }

  // optional string user_agent = 6;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_agent(), target);
  }

  // optional string DEPRECATED_country = 7;
  if (has_deprecated_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_country().data(), this->deprecated_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deprecated_country(), target);
  }

  // optional string DEPRECATED_region = 8;
  if (has_deprecated_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_region().data(), this->deprecated_region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->deprecated_region(), target);
  }

  // optional string DEPRECATED_city = 9;
  if (has_deprecated_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_city().data(), this->deprecated_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->deprecated_city(), target);
  }

  // optional int32 DEPRECATED_metro = 10;
  if (has_deprecated_metro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->deprecated_metro(), target);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->url(), target);
  }

  // repeated string detected_language = 12;
  for (int i = 0; i < this->detected_language_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language(i).data(), this->detected_language(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.detected_language");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->detected_language(i), target);
  }

  // repeated .BidRequest.Vertical detected_vertical = 13;
  for (unsigned int i = 0, n = this->detected_vertical_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->detected_vertical(i), target);
  }

  // repeated .BidRequest.AdSlot adslot = 14;
  for (unsigned int i = 0, n = this->adslot_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->adslot(i), target);
  }

  // optional bool is_test = 15 [default = false];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_test(), target);
  }

  // optional bytes DEPRECATED_hashed_cookie = 16;
  if (has_deprecated_hashed_cookie()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->deprecated_hashed_cookie(), target);
  }

  // optional bool is_ping = 17 [default = false];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_ping(), target);
  }

  // repeated string DEPRECATED_excluded_click_through_url = 18;
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_excluded_click_through_url(i).data(), this->deprecated_excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_excluded_click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->deprecated_excluded_click_through_url(i), target);
  }

  // optional string anonymous_id = 19;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.anonymous_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->anonymous_id(), target);
  }

  // optional uint32 cookie_version = 20;
  if (has_cookie_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cookie_version(), target);
  }

  // optional string google_user_id = 21;
  if (has_google_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->google_user_id().data(), this->google_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.google_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->google_user_id(), target);
  }

  // optional string DEPRECATED_seller_network = 22;
  if (has_deprecated_seller_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_seller_network().data(), this->deprecated_seller_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.DEPRECATED_seller_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->deprecated_seller_network(), target);
  }

  // optional bytes DEPRECATED_publisher_settings_list_id = 23;
  if (has_deprecated_publisher_settings_list_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->deprecated_publisher_settings_list_id(), target);
  }

  // optional int32 vertical_dictionary_version = 24;
  if (has_vertical_dictionary_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->vertical_dictionary_version(), target);
  }

  // optional int32 timezone_offset = 25;
  if (has_timezone_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->timezone_offset(), target);
  }

  // repeated int32 detected_content_label = 26 [packed = true];
  if (this->detected_content_label_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      26,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _detected_content_label_cached_byte_size_, target);
  }
  for (int i = 0; i < this->detected_content_label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->detected_content_label(i), target);
  }

  // repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
  for (unsigned int i = 0, n = this->deprecated_matching_network_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->deprecated_matching_network(i), target);
  }

  // optional .BidRequest.Mobile mobile = 28;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, *this->mobile_, target);
  }

  // optional .BidRequest.Video video = 29;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, *this->video_, target);
  }

  // repeated int32 user_vertical = 30 [packed = true];
  if (this->user_vertical_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      30,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _user_vertical_cached_byte_size_, target);
  }
  for (int i = 0; i < this->user_vertical_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->user_vertical(i), target);
  }

  // optional int32 cookie_age_seconds = 31;
  if (has_cookie_age_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->cookie_age_seconds(), target);
  }

  // repeated .BidRequest.UserList user_list = 32;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->user_list(i), target);
  }

  // optional string postal_code = 33;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.postal_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->postal_code(), target);
  }

  // optional string postal_code_prefix = 34;
  if (has_postal_code_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code_prefix().data(), this->postal_code_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.postal_code_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->postal_code_prefix(), target);
  }

  // optional bool DEPRECATED_experimental_deadline = 35 [default = false];
  if (has_deprecated_experimental_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->deprecated_experimental_deadline(), target);
  }

  // repeated int32 site_list_id = 36;
  for (int i = 0; i < this->site_list_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(36, this->site_list_id(i), target);
  }

  // optional bytes hosted_match_data = 37;
  if (has_hosted_match_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        37, this->hosted_match_data(), target);
  }

  // repeated .BidRequest.KeyValue key_value = 38;
  for (unsigned int i = 0, n = this->key_value_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->key_value(i), target);
  }

  // optional int32 geo_criteria_id = 39;
  if (has_geo_criteria_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->geo_criteria_id(), target);
  }

  // optional bytes encrypted_hyperlocal_set = 40;
  if (has_encrypted_hyperlocal_set()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->encrypted_hyperlocal_set(), target);
  }

  // optional int32 seller_network_id = 41;
  if (has_seller_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->seller_network_id(), target);
  }

  // optional fixed64 publisher_settings_list_id = 42;
  if (has_publisher_settings_list_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(42, this->publisher_settings_list_id(), target);
  }

  // repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
  for (unsigned int i = 0, n = this->bid_response_feedback_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->bid_response_feedback(i), target);
  }

  // optional bool is_predicted_to_be_ignored = 45 [default = false];
  if (has_is_predicted_to_be_ignored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->is_predicted_to_be_ignored(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  // required bytes id = 2;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional string google_user_id = 21;
    if (has_google_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->google_user_id());
    }

    // optional uint32 cookie_version = 20;
    if (has_cookie_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookie_version());
    }

    // optional int32 cookie_age_seconds = 31;
    if (has_cookie_age_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cookie_age_seconds());
    }

    // optional bytes hosted_match_data = 37;
    if (has_hosted_match_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hosted_match_data());
    }

    // optional string user_agent = 6;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional int32 geo_criteria_id = 39;
    if (has_geo_criteria_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->geo_criteria_id());
    }

  }
  if (_has_bits_[8 / 32] & 52992u) {
    // optional string postal_code = 33;
    if (has_postal_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

    // optional string postal_code_prefix = 34;
    if (has_postal_code_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code_prefix());
    }

    // optional bytes encrypted_hyperlocal_set = 40;
    if (has_encrypted_hyperlocal_set()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_hyperlocal_set());
    }

    // optional int32 timezone_offset = 25;
    if (has_timezone_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone_offset());
    }

    // optional int32 seller_network_id = 41;
    if (has_seller_network_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seller_network_id());
    }

    // optional string url = 11;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (_has_bits_[16 / 32] & 8978432u) {
    // optional string anonymous_id = 19;
    if (has_anonymous_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anonymous_id());
    }

    // optional int32 vertical_dictionary_version = 24;
    if (has_vertical_dictionary_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertical_dictionary_version());
    }

    // optional .BidRequest.Mobile mobile = 28;
    if (has_mobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mobile_);
    }

  }
  if (_has_bits_[24 / 32] & 4076863488u) {
    // optional .BidRequest.Video video = 29;
    if (has_video()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_);
    }

    // optional fixed64 publisher_settings_list_id = 42;
    if (has_publisher_settings_list_id()) {
      total_size += 2 + 8;
    }

    // optional bool is_test = 15 [default = false];
    if (has_is_test()) {
      total_size += 1 + 1;
    }

    // optional bool is_ping = 17 [default = false];
    if (has_is_ping()) {
      total_size += 2 + 1;
    }

    // optional bool is_predicted_to_be_ignored = 45 [default = false];
    if (has_is_predicted_to_be_ignored()) {
      total_size += 2 + 1;
    }

    // optional int32 DEPRECATED_protocol_version = 1;
    if (has_deprecated_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_protocol_version());
    }

  }
  if (_has_bits_[32 / 32] & 127u) {
    // optional string DEPRECATED_click_tracking_url = 3;
    if (has_deprecated_click_tracking_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_click_tracking_url());
    }

    // optional uint64 DEPRECATED_cookie = 5;
    if (has_deprecated_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deprecated_cookie());
    }

    // optional string DEPRECATED_country = 7;
    if (has_deprecated_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_country());
    }

    // optional string DEPRECATED_region = 8;
    if (has_deprecated_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_region());
    }

    // optional string DEPRECATED_city = 9;
    if (has_deprecated_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_city());
    }

    // optional int32 DEPRECATED_metro = 10;
    if (has_deprecated_metro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_metro());
    }

    // optional bytes DEPRECATED_hashed_cookie = 16;
    if (has_deprecated_hashed_cookie()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deprecated_hashed_cookie());
    }

  }
  if (_has_bits_[40 / 32] & 2816u) {
    // optional string DEPRECATED_seller_network = 22;
    if (has_deprecated_seller_network()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_seller_network());
    }

    // optional bytes DEPRECATED_publisher_settings_list_id = 23;
    if (has_deprecated_publisher_settings_list_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deprecated_publisher_settings_list_id());
    }

    // optional bool DEPRECATED_experimental_deadline = 35 [default = false];
    if (has_deprecated_experimental_deadline()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 user_vertical = 30 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->user_vertical_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user_vertical(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _user_vertical_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .BidRequest.UserList user_list = 32;
  total_size += 2 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  // repeated string detected_language = 12;
  total_size += 1 * this->detected_language_size();
  for (int i = 0; i < this->detected_language_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->detected_language(i));
  }

  // repeated .BidRequest.Vertical detected_vertical = 13;
  total_size += 1 * this->detected_vertical_size();
  for (int i = 0; i < this->detected_vertical_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detected_vertical(i));
  }

  // repeated int32 detected_content_label = 26 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->detected_content_label_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->detected_content_label(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _detected_content_label_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 site_list_id = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->site_list_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->site_list_id(i));
    }
    total_size += 2 * this->site_list_id_size() + data_size;
  }

  // repeated .BidRequest.KeyValue key_value = 38;
  total_size += 2 * this->key_value_size();
  for (int i = 0; i < this->key_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key_value(i));
  }

  // repeated .BidRequest.AdSlot adslot = 14;
  total_size += 1 * this->adslot_size();
  for (int i = 0; i < this->adslot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adslot(i));
  }

  // repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
  total_size += 2 * this->bid_response_feedback_size();
  for (int i = 0; i < this->bid_response_feedback_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid_response_feedback(i));
  }

  // repeated string DEPRECATED_excluded_click_through_url = 18;
  total_size += 2 * this->deprecated_excluded_click_through_url_size();
  for (int i = 0; i < this->deprecated_excluded_click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deprecated_excluded_click_through_url(i));
  }

  // repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
  total_size += 2 * this->deprecated_matching_network_size();
  for (int i = 0; i < this->deprecated_matching_network_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deprecated_matching_network(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_vertical_.MergeFrom(from.user_vertical_);
  user_list_.MergeFrom(from.user_list_);
  detected_language_.MergeFrom(from.detected_language_);
  detected_vertical_.MergeFrom(from.detected_vertical_);
  detected_content_label_.MergeFrom(from.detected_content_label_);
  site_list_id_.MergeFrom(from.site_list_id_);
  key_value_.MergeFrom(from.key_value_);
  adslot_.MergeFrom(from.adslot_);
  bid_response_feedback_.MergeFrom(from.bid_response_feedback_);
  deprecated_excluded_click_through_url_.MergeFrom(from.deprecated_excluded_click_through_url_);
  deprecated_matching_network_.MergeFrom(from.deprecated_matching_network_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_google_user_id()) {
      set_has_google_user_id();
      google_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.google_user_id_);
    }
    if (from.has_cookie_version()) {
      set_cookie_version(from.cookie_version());
    }
    if (from.has_cookie_age_seconds()) {
      set_cookie_age_seconds(from.cookie_age_seconds());
    }
    if (from.has_hosted_match_data()) {
      set_has_hosted_match_data();
      hosted_match_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hosted_match_data_);
    }
    if (from.has_user_agent()) {
      set_has_user_agent();
      user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
    }
    if (from.has_geo_criteria_id()) {
      set_geo_criteria_id(from.geo_criteria_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_postal_code()) {
      set_has_postal_code();
      postal_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
    }
    if (from.has_postal_code_prefix()) {
      set_has_postal_code_prefix();
      postal_code_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postal_code_prefix_);
    }
    if (from.has_encrypted_hyperlocal_set()) {
      set_has_encrypted_hyperlocal_set();
      encrypted_hyperlocal_set_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_hyperlocal_set_);
    }
    if (from.has_timezone_offset()) {
      set_timezone_offset(from.timezone_offset());
    }
    if (from.has_seller_network_id()) {
      set_seller_network_id(from.seller_network_id());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_anonymous_id()) {
      set_has_anonymous_id();
      anonymous_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anonymous_id_);
    }
    if (from.has_vertical_dictionary_version()) {
      set_vertical_dictionary_version(from.vertical_dictionary_version());
    }
    if (from.has_mobile()) {
      mutable_mobile()->::BidRequest_Mobile::MergeFrom(from.mobile());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_video()) {
      mutable_video()->::BidRequest_Video::MergeFrom(from.video());
    }
    if (from.has_publisher_settings_list_id()) {
      set_publisher_settings_list_id(from.publisher_settings_list_id());
    }
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
    if (from.has_is_predicted_to_be_ignored()) {
      set_is_predicted_to_be_ignored(from.is_predicted_to_be_ignored());
    }
    if (from.has_deprecated_protocol_version()) {
      set_deprecated_protocol_version(from.deprecated_protocol_version());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_deprecated_click_tracking_url()) {
      set_has_deprecated_click_tracking_url();
      deprecated_click_tracking_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_click_tracking_url_);
    }
    if (from.has_deprecated_cookie()) {
      set_deprecated_cookie(from.deprecated_cookie());
    }
    if (from.has_deprecated_country()) {
      set_has_deprecated_country();
      deprecated_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_country_);
    }
    if (from.has_deprecated_region()) {
      set_has_deprecated_region();
      deprecated_region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_region_);
    }
    if (from.has_deprecated_city()) {
      set_has_deprecated_city();
      deprecated_city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_city_);
    }
    if (from.has_deprecated_metro()) {
      set_deprecated_metro(from.deprecated_metro());
    }
    if (from.has_deprecated_hashed_cookie()) {
      set_has_deprecated_hashed_cookie();
      deprecated_hashed_cookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_hashed_cookie_);
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_deprecated_seller_network()) {
      set_has_deprecated_seller_network();
      deprecated_seller_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_seller_network_);
    }
    if (from.has_deprecated_publisher_settings_list_id()) {
      set_has_deprecated_publisher_settings_list_id();
      deprecated_publisher_settings_list_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_publisher_settings_list_id_);
    }
    if (from.has_deprecated_experimental_deadline()) {
      set_deprecated_experimental_deadline(from.deprecated_experimental_deadline());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->detected_vertical())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->adslot())) return false;
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest::InternalSwap(BidRequest* other) {
  id_.Swap(&other->id_);
  ip_.Swap(&other->ip_);
  google_user_id_.Swap(&other->google_user_id_);
  std::swap(cookie_version_, other->cookie_version_);
  std::swap(cookie_age_seconds_, other->cookie_age_seconds_);
  hosted_match_data_.Swap(&other->hosted_match_data_);
  user_agent_.Swap(&other->user_agent_);
  std::swap(geo_criteria_id_, other->geo_criteria_id_);
  postal_code_.Swap(&other->postal_code_);
  postal_code_prefix_.Swap(&other->postal_code_prefix_);
  encrypted_hyperlocal_set_.Swap(&other->encrypted_hyperlocal_set_);
  std::swap(timezone_offset_, other->timezone_offset_);
  user_vertical_.UnsafeArenaSwap(&other->user_vertical_);
  user_list_.UnsafeArenaSwap(&other->user_list_);
  std::swap(seller_network_id_, other->seller_network_id_);
  url_.Swap(&other->url_);
  anonymous_id_.Swap(&other->anonymous_id_);
  detected_language_.UnsafeArenaSwap(&other->detected_language_);
  detected_vertical_.UnsafeArenaSwap(&other->detected_vertical_);
  std::swap(vertical_dictionary_version_, other->vertical_dictionary_version_);
  detected_content_label_.UnsafeArenaSwap(&other->detected_content_label_);
  site_list_id_.UnsafeArenaSwap(&other->site_list_id_);
  key_value_.UnsafeArenaSwap(&other->key_value_);
  std::swap(mobile_, other->mobile_);
  std::swap(video_, other->video_);
  std::swap(publisher_settings_list_id_, other->publisher_settings_list_id_);
  adslot_.UnsafeArenaSwap(&other->adslot_);
  bid_response_feedback_.UnsafeArenaSwap(&other->bid_response_feedback_);
  std::swap(is_test_, other->is_test_);
  std::swap(is_ping_, other->is_ping_);
  std::swap(is_predicted_to_be_ignored_, other->is_predicted_to_be_ignored_);
  std::swap(deprecated_protocol_version_, other->deprecated_protocol_version_);
  deprecated_click_tracking_url_.Swap(&other->deprecated_click_tracking_url_);
  std::swap(deprecated_cookie_, other->deprecated_cookie_);
  deprecated_country_.Swap(&other->deprecated_country_);
  deprecated_region_.Swap(&other->deprecated_region_);
  deprecated_city_.Swap(&other->deprecated_city_);
  std::swap(deprecated_metro_, other->deprecated_metro_);
  deprecated_hashed_cookie_.Swap(&other->deprecated_hashed_cookie_);
  deprecated_excluded_click_through_url_.UnsafeArenaSwap(&other->deprecated_excluded_click_through_url_);
  deprecated_seller_network_.Swap(&other->deprecated_seller_network_);
  deprecated_publisher_settings_list_id_.Swap(&other->deprecated_publisher_settings_list_id_);
  deprecated_matching_network_.UnsafeArenaSwap(&other->deprecated_matching_network_);
  std::swap(deprecated_experimental_deadline_, other->deprecated_experimental_deadline_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidRequest_Hyperlocal_Point

// optional float latitude = 1;
bool BidRequest_Hyperlocal_Point::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Hyperlocal_Point::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Hyperlocal_Point::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Hyperlocal_Point::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 float BidRequest_Hyperlocal_Point::latitude() const {
  // @@protoc_insertion_point(field_get:BidRequest.Hyperlocal.Point.latitude)
  return latitude_;
}
 void BidRequest_Hyperlocal_Point::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Hyperlocal.Point.latitude)
}

// optional float longitude = 2;
bool BidRequest_Hyperlocal_Point::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Hyperlocal_Point::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Hyperlocal_Point::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Hyperlocal_Point::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 float BidRequest_Hyperlocal_Point::longitude() const {
  // @@protoc_insertion_point(field_get:BidRequest.Hyperlocal.Point.longitude)
  return longitude_;
}
 void BidRequest_Hyperlocal_Point::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Hyperlocal.Point.longitude)
}

// -------------------------------------------------------------------

// BidRequest_Hyperlocal

// repeated .BidRequest.Hyperlocal.Point corners = 1;
int BidRequest_Hyperlocal::corners_size() const {
  return corners_.size();
}
void BidRequest_Hyperlocal::clear_corners() {
  corners_.Clear();
}
const ::BidRequest_Hyperlocal_Point& BidRequest_Hyperlocal::corners(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Hyperlocal.corners)
  return corners_.Get(index);
}
::BidRequest_Hyperlocal_Point* BidRequest_Hyperlocal::mutable_corners(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.Hyperlocal.corners)
  return corners_.Mutable(index);
}
::BidRequest_Hyperlocal_Point* BidRequest_Hyperlocal::add_corners() {
  // @@protoc_insertion_point(field_add:BidRequest.Hyperlocal.corners)
  return corners_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal_Point >*
BidRequest_Hyperlocal::mutable_corners() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Hyperlocal.corners)
  return &corners_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal_Point >&
BidRequest_Hyperlocal::corners() const {
  // @@protoc_insertion_point(field_list:BidRequest.Hyperlocal.corners)
  return corners_;
}

// -------------------------------------------------------------------

// BidRequest_HyperlocalSet

// repeated .BidRequest.Hyperlocal hyperlocal = 1;
int BidRequest_HyperlocalSet::hyperlocal_size() const {
  return hyperlocal_.size();
}
void BidRequest_HyperlocalSet::clear_hyperlocal() {
  hyperlocal_.Clear();
}
const ::BidRequest_Hyperlocal& BidRequest_HyperlocalSet::hyperlocal(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.HyperlocalSet.hyperlocal)
  return hyperlocal_.Get(index);
}
::BidRequest_Hyperlocal* BidRequest_HyperlocalSet::mutable_hyperlocal(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.HyperlocalSet.hyperlocal)
  return hyperlocal_.Mutable(index);
}
::BidRequest_Hyperlocal* BidRequest_HyperlocalSet::add_hyperlocal() {
  // @@protoc_insertion_point(field_add:BidRequest.HyperlocalSet.hyperlocal)
  return hyperlocal_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal >*
BidRequest_HyperlocalSet::mutable_hyperlocal() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.HyperlocalSet.hyperlocal)
  return &hyperlocal_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_Hyperlocal >&
BidRequest_HyperlocalSet::hyperlocal() const {
  // @@protoc_insertion_point(field_list:BidRequest.HyperlocalSet.hyperlocal)
  return hyperlocal_;
}

// optional .BidRequest.Hyperlocal.Point center_point = 2;
bool BidRequest_HyperlocalSet::has_center_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_HyperlocalSet::set_has_center_point() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_HyperlocalSet::clear_has_center_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_HyperlocalSet::clear_center_point() {
  if (center_point_ != NULL) center_point_->::BidRequest_Hyperlocal_Point::Clear();
  clear_has_center_point();
}
const ::BidRequest_Hyperlocal_Point& BidRequest_HyperlocalSet::center_point() const {
  // @@protoc_insertion_point(field_get:BidRequest.HyperlocalSet.center_point)
  return center_point_ != NULL ? *center_point_ : *default_instance_->center_point_;
}
::BidRequest_Hyperlocal_Point* BidRequest_HyperlocalSet::mutable_center_point() {
  set_has_center_point();
  if (center_point_ == NULL) {
    center_point_ = new ::BidRequest_Hyperlocal_Point;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.HyperlocalSet.center_point)
  return center_point_;
}
::BidRequest_Hyperlocal_Point* BidRequest_HyperlocalSet::release_center_point() {
  clear_has_center_point();
  ::BidRequest_Hyperlocal_Point* temp = center_point_;
  center_point_ = NULL;
  return temp;
}
void BidRequest_HyperlocalSet::set_allocated_center_point(::BidRequest_Hyperlocal_Point* center_point) {
  delete center_point_;
  center_point_ = center_point;
  if (center_point) {
    set_has_center_point();
  } else {
    clear_has_center_point();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.HyperlocalSet.center_point)
}

// -------------------------------------------------------------------

// BidRequest_UserList

// optional int64 id = 1;
bool BidRequest_UserList::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_UserList::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_UserList::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_UserList::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 BidRequest_UserList::id() const {
  // @@protoc_insertion_point(field_get:BidRequest.UserList.id)
  return id_;
}
 void BidRequest_UserList::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.UserList.id)
}

// optional int32 age_seconds = 2;
bool BidRequest_UserList::has_age_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_UserList::set_has_age_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_UserList::clear_has_age_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_UserList::clear_age_seconds() {
  age_seconds_ = 0;
  clear_has_age_seconds();
}
 ::google::protobuf::int32 BidRequest_UserList::age_seconds() const {
  // @@protoc_insertion_point(field_get:BidRequest.UserList.age_seconds)
  return age_seconds_;
}
 void BidRequest_UserList::set_age_seconds(::google::protobuf::int32 value) {
  set_has_age_seconds();
  age_seconds_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.UserList.age_seconds)
}

// -------------------------------------------------------------------

// BidRequest_Vertical

// required int32 id = 1;
bool BidRequest_Vertical::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Vertical::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Vertical::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Vertical::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 BidRequest_Vertical::id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Vertical.id)
  return id_;
}
 void BidRequest_Vertical::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Vertical.id)
}

// required float weight = 2;
bool BidRequest_Vertical::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Vertical::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Vertical::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Vertical::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
 float BidRequest_Vertical::weight() const {
  // @@protoc_insertion_point(field_get:BidRequest.Vertical.weight)
  return weight_;
}
 void BidRequest_Vertical::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Vertical.weight)
}

// -------------------------------------------------------------------

// BidRequest_KeyValue

// optional string key = 1;
bool BidRequest_KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& BidRequest_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:BidRequest.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.KeyValue.key)
}
 void BidRequest_KeyValue::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.KeyValue.key)
}
 void BidRequest_KeyValue::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.KeyValue.key)
}
 ::std::string* BidRequest_KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:BidRequest.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_KeyValue::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.KeyValue.key)
}

// optional string value = 2;
bool BidRequest_KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& BidRequest_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:BidRequest.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.KeyValue.value)
}
 void BidRequest_KeyValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.KeyValue.value)
}
 void BidRequest_KeyValue::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.KeyValue.value)
}
 ::std::string* BidRequest_KeyValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:BidRequest.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_KeyValue::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.KeyValue.value)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_DeviceOsVersion

// optional int32 os_version_major = 1;
bool BidRequest_Mobile_DeviceOsVersion::has_os_version_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile_DeviceOsVersion::set_has_os_version_major() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_has_os_version_major() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_os_version_major() {
  os_version_major_ = 0;
  clear_has_os_version_major();
}
 ::google::protobuf::int32 BidRequest_Mobile_DeviceOsVersion::os_version_major() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DeviceOsVersion.os_version_major)
  return os_version_major_;
}
 void BidRequest_Mobile_DeviceOsVersion::set_os_version_major(::google::protobuf::int32 value) {
  set_has_os_version_major();
  os_version_major_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DeviceOsVersion.os_version_major)
}

// optional int32 os_version_minor = 2;
bool BidRequest_Mobile_DeviceOsVersion::has_os_version_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile_DeviceOsVersion::set_has_os_version_minor() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_has_os_version_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_os_version_minor() {
  os_version_minor_ = 0;
  clear_has_os_version_minor();
}
 ::google::protobuf::int32 BidRequest_Mobile_DeviceOsVersion::os_version_minor() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DeviceOsVersion.os_version_minor)
  return os_version_minor_;
}
 void BidRequest_Mobile_DeviceOsVersion::set_os_version_minor(::google::protobuf::int32 value) {
  set_has_os_version_minor();
  os_version_minor_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DeviceOsVersion.os_version_minor)
}

// optional int32 os_version_micro = 3;
bool BidRequest_Mobile_DeviceOsVersion::has_os_version_micro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Mobile_DeviceOsVersion::set_has_os_version_micro() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_has_os_version_micro() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_os_version_micro() {
  os_version_micro_ = 0;
  clear_has_os_version_micro();
}
 ::google::protobuf::int32 BidRequest_Mobile_DeviceOsVersion::os_version_micro() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DeviceOsVersion.os_version_micro)
  return os_version_micro_;
}
 void BidRequest_Mobile_DeviceOsVersion::set_os_version_micro(::google::protobuf::int32 value) {
  set_has_os_version_micro();
  os_version_micro_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DeviceOsVersion.os_version_micro)
}

// -------------------------------------------------------------------

// BidRequest_Mobile

// optional string platform = 3;
bool BidRequest_Mobile::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
 const ::std::string& BidRequest_Mobile::platform() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.platform)
  return platform_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.platform)
}
 void BidRequest_Mobile::set_platform(const char* value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.platform)
}
 void BidRequest_Mobile::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.platform)
}
 ::std::string* BidRequest_Mobile::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_platform() {
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.platform)
}

// optional string brand = 12;
bool BidRequest_Mobile::has_brand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile::set_has_brand() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile::clear_has_brand() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile::clear_brand() {
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand();
}
 const ::std::string& BidRequest_Mobile::brand() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.brand)
  return brand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_brand(const ::std::string& value) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.brand)
}
 void BidRequest_Mobile::set_brand(const char* value) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.brand)
}
 void BidRequest_Mobile::set_brand(const char* value, size_t size) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.brand)
}
 ::std::string* BidRequest_Mobile::mutable_brand() {
  set_has_brand();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.brand)
  return brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_brand() {
  clear_has_brand();
  return brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    set_has_brand();
  } else {
    clear_has_brand();
  }
  brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.brand)
}

// optional string model = 13;
bool BidRequest_Mobile::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Mobile::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Mobile::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Mobile::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
 const ::std::string& BidRequest_Mobile::model() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.model)
}
 void BidRequest_Mobile::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.model)
}
 void BidRequest_Mobile::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.model)
}
 ::std::string* BidRequest_Mobile::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_model() {
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.model)
}

// optional .BidRequest.Mobile.DeviceOsVersion os_version = 14;
bool BidRequest_Mobile::has_os_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Mobile::set_has_os_version() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Mobile::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Mobile::clear_os_version() {
  if (os_version_ != NULL) os_version_->::BidRequest_Mobile_DeviceOsVersion::Clear();
  clear_has_os_version();
}
const ::BidRequest_Mobile_DeviceOsVersion& BidRequest_Mobile::os_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.os_version)
  return os_version_ != NULL ? *os_version_ : *default_instance_->os_version_;
}
::BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == NULL) {
    os_version_ = new ::BidRequest_Mobile_DeviceOsVersion;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.os_version)
  return os_version_;
}
::BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile::release_os_version() {
  clear_has_os_version();
  ::BidRequest_Mobile_DeviceOsVersion* temp = os_version_;
  os_version_ = NULL;
  return temp;
}
void BidRequest_Mobile::set_allocated_os_version(::BidRequest_Mobile_DeviceOsVersion* os_version) {
  delete os_version_;
  os_version_ = os_version;
  if (os_version) {
    set_has_os_version();
  } else {
    clear_has_os_version();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.os_version)
}

// optional int64 carrier_id = 18;
bool BidRequest_Mobile::has_carrier_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Mobile::set_has_carrier_id() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Mobile::clear_has_carrier_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Mobile::clear_carrier_id() {
  carrier_id_ = GOOGLE_LONGLONG(0);
  clear_has_carrier_id();
}
 ::google::protobuf::int64 BidRequest_Mobile::carrier_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.carrier_id)
  return carrier_id_;
}
 void BidRequest_Mobile::set_carrier_id(::google::protobuf::int64 value) {
  set_has_carrier_id();
  carrier_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.carrier_id)
}

// optional bool is_app = 7 [default = false];
bool BidRequest_Mobile::has_is_app() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Mobile::set_has_is_app() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Mobile::clear_has_is_app() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Mobile::clear_is_app() {
  is_app_ = false;
  clear_has_is_app();
}
 bool BidRequest_Mobile::is_app() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.is_app)
  return is_app_;
}
 void BidRequest_Mobile::set_is_app(bool value) {
  set_has_is_app();
  is_app_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.is_app)
}

// optional string app_id = 6;
bool BidRequest_Mobile::has_app_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Mobile::set_has_app_id() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Mobile::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Mobile::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_id();
}
 const ::std::string& BidRequest_Mobile::app_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_app_id(const ::std::string& value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.app_id)
}
 void BidRequest_Mobile::set_app_id(const char* value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.app_id)
}
 void BidRequest_Mobile::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.app_id)
}
 ::std::string* BidRequest_Mobile::mutable_app_id() {
  set_has_app_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_app_id() {
  clear_has_app_id();
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    set_has_app_id();
  } else {
    clear_has_app_id();
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.app_id)
}

// optional .BidRequest.Mobile.MobileDeviceType mobile_device_type = 8 [default = UNKNOWN];
bool BidRequest_Mobile::has_mobile_device_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Mobile::set_has_mobile_device_type() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Mobile::clear_has_mobile_device_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Mobile::clear_mobile_device_type() {
  mobile_device_type_ = 0;
  clear_has_mobile_device_type();
}
 ::BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::mobile_device_type() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.mobile_device_type)
  return static_cast< ::BidRequest_Mobile_MobileDeviceType >(mobile_device_type_);
}
 void BidRequest_Mobile::set_mobile_device_type(::BidRequest_Mobile_MobileDeviceType value) {
  assert(::BidRequest_Mobile_MobileDeviceType_IsValid(value));
  set_has_mobile_device_type();
  mobile_device_type_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.mobile_device_type)
}

// optional int32 screen_width = 15;
bool BidRequest_Mobile::has_screen_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Mobile::set_has_screen_width() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Mobile::clear_has_screen_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Mobile::clear_screen_width() {
  screen_width_ = 0;
  clear_has_screen_width();
}
 ::google::protobuf::int32 BidRequest_Mobile::screen_width() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.screen_width)
  return screen_width_;
}
 void BidRequest_Mobile::set_screen_width(::google::protobuf::int32 value) {
  set_has_screen_width();
  screen_width_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.screen_width)
}

// optional int32 screen_height = 16;
bool BidRequest_Mobile::has_screen_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_Mobile::set_has_screen_height() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_Mobile::clear_has_screen_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_Mobile::clear_screen_height() {
  screen_height_ = 0;
  clear_has_screen_height();
}
 ::google::protobuf::int32 BidRequest_Mobile::screen_height() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.screen_height)
  return screen_height_;
}
 void BidRequest_Mobile::set_screen_height(::google::protobuf::int32 value) {
  set_has_screen_height();
  screen_height_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.screen_height)
}

// optional int32 screen_orientation = 9 [default = 0];
bool BidRequest_Mobile::has_screen_orientation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest_Mobile::set_has_screen_orientation() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest_Mobile::clear_has_screen_orientation() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest_Mobile::clear_screen_orientation() {
  screen_orientation_ = 0;
  clear_has_screen_orientation();
}
 ::google::protobuf::int32 BidRequest_Mobile::screen_orientation() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.screen_orientation)
  return screen_orientation_;
}
 void BidRequest_Mobile::set_screen_orientation(::google::protobuf::int32 value) {
  set_has_screen_orientation();
  screen_orientation_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.screen_orientation)
}

// optional bool is_interstitial_request = 10 [default = false];
bool BidRequest_Mobile::has_is_interstitial_request() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_Mobile::set_has_is_interstitial_request() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_Mobile::clear_has_is_interstitial_request() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_Mobile::clear_is_interstitial_request() {
  is_interstitial_request_ = false;
  clear_has_is_interstitial_request();
}
 bool BidRequest_Mobile::is_interstitial_request() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.is_interstitial_request)
  return is_interstitial_request_;
}
 void BidRequest_Mobile::set_is_interstitial_request(bool value) {
  set_has_is_interstitial_request();
  is_interstitial_request_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.is_interstitial_request)
}

// repeated int32 app_category_ids = 11;
int BidRequest_Mobile::app_category_ids_size() const {
  return app_category_ids_.size();
}
void BidRequest_Mobile::clear_app_category_ids() {
  app_category_ids_.Clear();
}
 ::google::protobuf::int32 BidRequest_Mobile::app_category_ids(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.app_category_ids)
  return app_category_ids_.Get(index);
}
 void BidRequest_Mobile::set_app_category_ids(int index, ::google::protobuf::int32 value) {
  app_category_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.app_category_ids)
}
 void BidRequest_Mobile::add_app_category_ids(::google::protobuf::int32 value) {
  app_category_ids_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Mobile.app_category_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile::app_category_ids() const {
  // @@protoc_insertion_point(field_list:BidRequest.Mobile.app_category_ids)
  return app_category_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile::mutable_app_category_ids() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Mobile.app_category_ids)
  return &app_category_ids_;
}

// optional bool is_mobile_web_optimized = 17 [default = false];
bool BidRequest_Mobile::has_is_mobile_web_optimized() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest_Mobile::set_has_is_mobile_web_optimized() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest_Mobile::clear_has_is_mobile_web_optimized() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest_Mobile::clear_is_mobile_web_optimized() {
  is_mobile_web_optimized_ = false;
  clear_has_is_mobile_web_optimized();
}
 bool BidRequest_Mobile::is_mobile_web_optimized() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.is_mobile_web_optimized)
  return is_mobile_web_optimized_;
}
 void BidRequest_Mobile::set_is_mobile_web_optimized(bool value) {
  set_has_is_mobile_web_optimized();
  is_mobile_web_optimized_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.is_mobile_web_optimized)
}

// optional int32 device_pixel_ratio_millis = 19 [default = 1000];
bool BidRequest_Mobile::has_device_pixel_ratio_millis() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest_Mobile::set_has_device_pixel_ratio_millis() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest_Mobile::clear_has_device_pixel_ratio_millis() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest_Mobile::clear_device_pixel_ratio_millis() {
  device_pixel_ratio_millis_ = 1000;
  clear_has_device_pixel_ratio_millis();
}
 ::google::protobuf::int32 BidRequest_Mobile::device_pixel_ratio_millis() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.device_pixel_ratio_millis)
  return device_pixel_ratio_millis_;
}
 void BidRequest_Mobile::set_device_pixel_ratio_millis(::google::protobuf::int32 value) {
  set_has_device_pixel_ratio_millis();
  device_pixel_ratio_millis_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.device_pixel_ratio_millis)
}

// optional bytes encrypted_advertising_id = 20;
bool BidRequest_Mobile::has_encrypted_advertising_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidRequest_Mobile::set_has_encrypted_advertising_id() {
  _has_bits_[0] |= 0x00008000u;
}
void BidRequest_Mobile::clear_has_encrypted_advertising_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidRequest_Mobile::clear_encrypted_advertising_id() {
  encrypted_advertising_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypted_advertising_id();
}
 const ::std::string& BidRequest_Mobile::encrypted_advertising_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.encrypted_advertising_id)
  return encrypted_advertising_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_encrypted_advertising_id(const ::std::string& value) {
  set_has_encrypted_advertising_id();
  encrypted_advertising_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.encrypted_advertising_id)
}
 void BidRequest_Mobile::set_encrypted_advertising_id(const char* value) {
  set_has_encrypted_advertising_id();
  encrypted_advertising_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.encrypted_advertising_id)
}
 void BidRequest_Mobile::set_encrypted_advertising_id(const void* value, size_t size) {
  set_has_encrypted_advertising_id();
  encrypted_advertising_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.encrypted_advertising_id)
}
 ::std::string* BidRequest_Mobile::mutable_encrypted_advertising_id() {
  set_has_encrypted_advertising_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.encrypted_advertising_id)
  return encrypted_advertising_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_encrypted_advertising_id() {
  clear_has_encrypted_advertising_id();
  return encrypted_advertising_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_encrypted_advertising_id(::std::string* encrypted_advertising_id) {
  if (encrypted_advertising_id != NULL) {
    set_has_encrypted_advertising_id();
  } else {
    clear_has_encrypted_advertising_id();
  }
  encrypted_advertising_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_advertising_id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.encrypted_advertising_id)
}

// optional bytes encrypted_hashed_idfa = 21;
bool BidRequest_Mobile::has_encrypted_hashed_idfa() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidRequest_Mobile::set_has_encrypted_hashed_idfa() {
  _has_bits_[0] |= 0x00010000u;
}
void BidRequest_Mobile::clear_has_encrypted_hashed_idfa() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidRequest_Mobile::clear_encrypted_hashed_idfa() {
  encrypted_hashed_idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypted_hashed_idfa();
}
 const ::std::string& BidRequest_Mobile::encrypted_hashed_idfa() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.encrypted_hashed_idfa)
  return encrypted_hashed_idfa_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_encrypted_hashed_idfa(const ::std::string& value) {
  set_has_encrypted_hashed_idfa();
  encrypted_hashed_idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.encrypted_hashed_idfa)
}
 void BidRequest_Mobile::set_encrypted_hashed_idfa(const char* value) {
  set_has_encrypted_hashed_idfa();
  encrypted_hashed_idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.encrypted_hashed_idfa)
}
 void BidRequest_Mobile::set_encrypted_hashed_idfa(const void* value, size_t size) {
  set_has_encrypted_hashed_idfa();
  encrypted_hashed_idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.encrypted_hashed_idfa)
}
 ::std::string* BidRequest_Mobile::mutable_encrypted_hashed_idfa() {
  set_has_encrypted_hashed_idfa();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.encrypted_hashed_idfa)
  return encrypted_hashed_idfa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_encrypted_hashed_idfa() {
  clear_has_encrypted_hashed_idfa();
  return encrypted_hashed_idfa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_encrypted_hashed_idfa(::std::string* encrypted_hashed_idfa) {
  if (encrypted_hashed_idfa != NULL) {
    set_has_encrypted_hashed_idfa();
  } else {
    clear_has_encrypted_hashed_idfa();
  }
  encrypted_hashed_idfa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_hashed_idfa);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.encrypted_hashed_idfa)
}

// optional string DEPRECATED_app_name = 1;
bool BidRequest_Mobile::has_deprecated_app_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BidRequest_Mobile::set_has_deprecated_app_name() {
  _has_bits_[0] |= 0x00020000u;
}
void BidRequest_Mobile::clear_has_deprecated_app_name() {
  _has_bits_[0] &= ~0x00020000u;
}
void BidRequest_Mobile::clear_deprecated_app_name() {
  deprecated_app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_app_name();
}
 const ::std::string& BidRequest_Mobile::deprecated_app_name() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_app_name)
  return deprecated_app_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_deprecated_app_name(const ::std::string& value) {
  set_has_deprecated_app_name();
  deprecated_app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_app_name)
}
 void BidRequest_Mobile::set_deprecated_app_name(const char* value) {
  set_has_deprecated_app_name();
  deprecated_app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_app_name)
}
 void BidRequest_Mobile::set_deprecated_app_name(const char* value, size_t size) {
  set_has_deprecated_app_name();
  deprecated_app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_app_name)
}
 ::std::string* BidRequest_Mobile::mutable_deprecated_app_name() {
  set_has_deprecated_app_name();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_app_name)
  return deprecated_app_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_deprecated_app_name() {
  clear_has_deprecated_app_name();
  return deprecated_app_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_deprecated_app_name(::std::string* deprecated_app_name) {
  if (deprecated_app_name != NULL) {
    set_has_deprecated_app_name();
  } else {
    clear_has_deprecated_app_name();
  }
  deprecated_app_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_app_name);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_app_name)
}

// optional string DEPRECATED_company_name = 2;
bool BidRequest_Mobile::has_deprecated_company_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void BidRequest_Mobile::set_has_deprecated_company_name() {
  _has_bits_[0] |= 0x00040000u;
}
void BidRequest_Mobile::clear_has_deprecated_company_name() {
  _has_bits_[0] &= ~0x00040000u;
}
void BidRequest_Mobile::clear_deprecated_company_name() {
  deprecated_company_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_company_name();
}
 const ::std::string& BidRequest_Mobile::deprecated_company_name() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_company_name)
  return deprecated_company_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_deprecated_company_name(const ::std::string& value) {
  set_has_deprecated_company_name();
  deprecated_company_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_company_name)
}
 void BidRequest_Mobile::set_deprecated_company_name(const char* value) {
  set_has_deprecated_company_name();
  deprecated_company_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_company_name)
}
 void BidRequest_Mobile::set_deprecated_company_name(const char* value, size_t size) {
  set_has_deprecated_company_name();
  deprecated_company_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_company_name)
}
 ::std::string* BidRequest_Mobile::mutable_deprecated_company_name() {
  set_has_deprecated_company_name();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_company_name)
  return deprecated_company_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_deprecated_company_name() {
  clear_has_deprecated_company_name();
  return deprecated_company_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_deprecated_company_name(::std::string* deprecated_company_name) {
  if (deprecated_company_name != NULL) {
    set_has_deprecated_company_name();
  } else {
    clear_has_deprecated_company_name();
  }
  deprecated_company_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_company_name);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_company_name)
}

// optional string DEPRECATED_carrier_name = 4;
bool BidRequest_Mobile::has_deprecated_carrier_name() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BidRequest_Mobile::set_has_deprecated_carrier_name() {
  _has_bits_[0] |= 0x00080000u;
}
void BidRequest_Mobile::clear_has_deprecated_carrier_name() {
  _has_bits_[0] &= ~0x00080000u;
}
void BidRequest_Mobile::clear_deprecated_carrier_name() {
  deprecated_carrier_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_carrier_name();
}
 const ::std::string& BidRequest_Mobile::deprecated_carrier_name() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_carrier_name)
  return deprecated_carrier_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_deprecated_carrier_name(const ::std::string& value) {
  set_has_deprecated_carrier_name();
  deprecated_carrier_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_carrier_name)
}
 void BidRequest_Mobile::set_deprecated_carrier_name(const char* value) {
  set_has_deprecated_carrier_name();
  deprecated_carrier_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_carrier_name)
}
 void BidRequest_Mobile::set_deprecated_carrier_name(const char* value, size_t size) {
  set_has_deprecated_carrier_name();
  deprecated_carrier_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_carrier_name)
}
 ::std::string* BidRequest_Mobile::mutable_deprecated_carrier_name() {
  set_has_deprecated_carrier_name();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_carrier_name)
  return deprecated_carrier_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_deprecated_carrier_name() {
  clear_has_deprecated_carrier_name();
  return deprecated_carrier_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_deprecated_carrier_name(::std::string* deprecated_carrier_name) {
  if (deprecated_carrier_name != NULL) {
    set_has_deprecated_carrier_name();
  } else {
    clear_has_deprecated_carrier_name();
  }
  deprecated_carrier_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_carrier_name);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_carrier_name)
}

// optional string DEPRECATED_carrier_country = 5;
bool BidRequest_Mobile::has_deprecated_carrier_country() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void BidRequest_Mobile::set_has_deprecated_carrier_country() {
  _has_bits_[0] |= 0x00100000u;
}
void BidRequest_Mobile::clear_has_deprecated_carrier_country() {
  _has_bits_[0] &= ~0x00100000u;
}
void BidRequest_Mobile::clear_deprecated_carrier_country() {
  deprecated_carrier_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_carrier_country();
}
 const ::std::string& BidRequest_Mobile::deprecated_carrier_country() const {
  // @@protoc_insertion_point(field_get:BidRequest.Mobile.DEPRECATED_carrier_country)
  return deprecated_carrier_country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_deprecated_carrier_country(const ::std::string& value) {
  set_has_deprecated_carrier_country();
  deprecated_carrier_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Mobile.DEPRECATED_carrier_country)
}
 void BidRequest_Mobile::set_deprecated_carrier_country(const char* value) {
  set_has_deprecated_carrier_country();
  deprecated_carrier_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Mobile.DEPRECATED_carrier_country)
}
 void BidRequest_Mobile::set_deprecated_carrier_country(const char* value, size_t size) {
  set_has_deprecated_carrier_country();
  deprecated_carrier_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Mobile.DEPRECATED_carrier_country)
}
 ::std::string* BidRequest_Mobile::mutable_deprecated_carrier_country() {
  set_has_deprecated_carrier_country();
  // @@protoc_insertion_point(field_mutable:BidRequest.Mobile.DEPRECATED_carrier_country)
  return deprecated_carrier_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_deprecated_carrier_country() {
  clear_has_deprecated_carrier_country();
  return deprecated_carrier_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_deprecated_carrier_country(::std::string* deprecated_carrier_country) {
  if (deprecated_carrier_country != NULL) {
    set_has_deprecated_carrier_country();
  } else {
    clear_has_deprecated_carrier_country();
  }
  deprecated_carrier_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_carrier_country);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Mobile.DEPRECATED_carrier_country)
}

// -------------------------------------------------------------------

// BidRequest_Video_CompanionSlot

// repeated int32 height = 1 [packed = true];
int BidRequest_Video_CompanionSlot::height_size() const {
  return height_.size();
}
void BidRequest_Video_CompanionSlot::clear_height() {
  height_.Clear();
}
 ::google::protobuf::int32 BidRequest_Video_CompanionSlot::height(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.CompanionSlot.height)
  return height_.Get(index);
}
 void BidRequest_Video_CompanionSlot::set_height(int index, ::google::protobuf::int32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.CompanionSlot.height)
}
 void BidRequest_Video_CompanionSlot::add_height(::google::protobuf::int32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Video.CompanionSlot.height)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Video_CompanionSlot::height() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.CompanionSlot.height)
  return height_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Video_CompanionSlot::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.CompanionSlot.height)
  return &height_;
}

// repeated int32 width = 2 [packed = true];
int BidRequest_Video_CompanionSlot::width_size() const {
  return width_.size();
}
void BidRequest_Video_CompanionSlot::clear_width() {
  width_.Clear();
}
 ::google::protobuf::int32 BidRequest_Video_CompanionSlot::width(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.CompanionSlot.width)
  return width_.Get(index);
}
 void BidRequest_Video_CompanionSlot::set_width(int index, ::google::protobuf::int32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.CompanionSlot.width)
}
 void BidRequest_Video_CompanionSlot::add_width(::google::protobuf::int32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Video.CompanionSlot.width)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Video_CompanionSlot::width() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.CompanionSlot.width)
  return width_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Video_CompanionSlot::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.CompanionSlot.width)
  return &width_;
}

// repeated .BidRequest.Video.CompanionSlot.CreativeFormat creative_format = 3;
int BidRequest_Video_CompanionSlot::creative_format_size() const {
  return creative_format_.size();
}
void BidRequest_Video_CompanionSlot::clear_creative_format() {
  creative_format_.Clear();
}
 ::BidRequest_Video_CompanionSlot_CreativeFormat BidRequest_Video_CompanionSlot::creative_format(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.CompanionSlot.creative_format)
  return static_cast< ::BidRequest_Video_CompanionSlot_CreativeFormat >(creative_format_.Get(index));
}
 void BidRequest_Video_CompanionSlot::set_creative_format(int index, ::BidRequest_Video_CompanionSlot_CreativeFormat value) {
  assert(::BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(value));
  creative_format_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.CompanionSlot.creative_format)
}
 void BidRequest_Video_CompanionSlot::add_creative_format(::BidRequest_Video_CompanionSlot_CreativeFormat value) {
  assert(::BidRequest_Video_CompanionSlot_CreativeFormat_IsValid(value));
  creative_format_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Video.CompanionSlot.creative_format)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Video_CompanionSlot::creative_format() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.CompanionSlot.creative_format)
  return creative_format_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Video_CompanionSlot::mutable_creative_format() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.CompanionSlot.creative_format)
  return &creative_format_;
}

// -------------------------------------------------------------------

// BidRequest_Video

// optional string description_url = 10;
bool BidRequest_Video::has_description_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Video::set_has_description_url() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Video::clear_has_description_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Video::clear_description_url() {
  description_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description_url();
}
 const ::std::string& BidRequest_Video::description_url() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.description_url)
  return description_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Video::set_description_url(const ::std::string& value) {
  set_has_description_url();
  description_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.description_url)
}
 void BidRequest_Video::set_description_url(const char* value) {
  set_has_description_url();
  description_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.Video.description_url)
}
 void BidRequest_Video::set_description_url(const char* value, size_t size) {
  set_has_description_url();
  description_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.Video.description_url)
}
 ::std::string* BidRequest_Video::mutable_description_url() {
  set_has_description_url();
  // @@protoc_insertion_point(field_mutable:BidRequest.Video.description_url)
  return description_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Video::release_description_url() {
  clear_has_description_url();
  return description_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Video::set_allocated_description_url(::std::string* description_url) {
  if (description_url != NULL) {
    set_has_description_url();
  } else {
    clear_has_description_url();
  }
  description_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description_url);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.Video.description_url)
}

// optional bool is_embedded_offsite = 11 [default = false];
bool BidRequest_Video::has_is_embedded_offsite() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Video::set_has_is_embedded_offsite() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Video::clear_has_is_embedded_offsite() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Video::clear_is_embedded_offsite() {
  is_embedded_offsite_ = false;
  clear_has_is_embedded_offsite();
}
 bool BidRequest_Video::is_embedded_offsite() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.is_embedded_offsite)
  return is_embedded_offsite_;
}
 void BidRequest_Video::set_is_embedded_offsite(bool value) {
  set_has_is_embedded_offsite();
  is_embedded_offsite_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.is_embedded_offsite)
}

// optional int32 videoad_start_delay = 1;
bool BidRequest_Video::has_videoad_start_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Video::set_has_videoad_start_delay() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Video::clear_has_videoad_start_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Video::clear_videoad_start_delay() {
  videoad_start_delay_ = 0;
  clear_has_videoad_start_delay();
}
 ::google::protobuf::int32 BidRequest_Video::videoad_start_delay() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.videoad_start_delay)
  return videoad_start_delay_;
}
 void BidRequest_Video::set_videoad_start_delay(::google::protobuf::int32 value) {
  set_has_videoad_start_delay();
  videoad_start_delay_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.videoad_start_delay)
}

// optional int32 max_ad_duration = 2;
bool BidRequest_Video::has_max_ad_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Video::set_has_max_ad_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Video::clear_has_max_ad_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Video::clear_max_ad_duration() {
  max_ad_duration_ = 0;
  clear_has_max_ad_duration();
}
 ::google::protobuf::int32 BidRequest_Video::max_ad_duration() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.max_ad_duration)
  return max_ad_duration_;
}
 void BidRequest_Video::set_max_ad_duration(::google::protobuf::int32 value) {
  set_has_max_ad_duration();
  max_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.max_ad_duration)
}

// optional int32 min_ad_duration = 8;
bool BidRequest_Video::has_min_ad_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Video::set_has_min_ad_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Video::clear_has_min_ad_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Video::clear_min_ad_duration() {
  min_ad_duration_ = 0;
  clear_has_min_ad_duration();
}
 ::google::protobuf::int32 BidRequest_Video::min_ad_duration() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.min_ad_duration)
  return min_ad_duration_;
}
 void BidRequest_Video::set_min_ad_duration(::google::protobuf::int32 value) {
  set_has_min_ad_duration();
  min_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.min_ad_duration)
}

// optional int32 inventory_type = 3 [default = 0];
bool BidRequest_Video::has_inventory_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Video::set_has_inventory_type() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Video::clear_has_inventory_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Video::clear_inventory_type() {
  inventory_type_ = 0;
  clear_has_inventory_type();
}
 ::google::protobuf::int32 BidRequest_Video::inventory_type() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.inventory_type)
  return inventory_type_;
}
 void BidRequest_Video::set_inventory_type(::google::protobuf::int32 value) {
  set_has_inventory_type();
  inventory_type_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.inventory_type)
}

// optional .BidRequest.Video.SkippableBidRequestType video_ad_skippable = 4 [default = ALLOW_SKIPPABLE];
bool BidRequest_Video::has_video_ad_skippable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Video::set_has_video_ad_skippable() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Video::clear_has_video_ad_skippable() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Video::clear_video_ad_skippable() {
  video_ad_skippable_ = 0;
  clear_has_video_ad_skippable();
}
 ::BidRequest_Video_SkippableBidRequestType BidRequest_Video::video_ad_skippable() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.video_ad_skippable)
  return static_cast< ::BidRequest_Video_SkippableBidRequestType >(video_ad_skippable_);
}
 void BidRequest_Video::set_video_ad_skippable(::BidRequest_Video_SkippableBidRequestType value) {
  assert(::BidRequest_Video_SkippableBidRequestType_IsValid(value));
  set_has_video_ad_skippable();
  video_ad_skippable_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.video_ad_skippable)
}

// optional int32 skippable_max_ad_duration = 5;
bool BidRequest_Video::has_skippable_max_ad_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Video::set_has_skippable_max_ad_duration() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Video::clear_has_skippable_max_ad_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Video::clear_skippable_max_ad_duration() {
  skippable_max_ad_duration_ = 0;
  clear_has_skippable_max_ad_duration();
}
 ::google::protobuf::int32 BidRequest_Video::skippable_max_ad_duration() const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.skippable_max_ad_duration)
  return skippable_max_ad_duration_;
}
 void BidRequest_Video::set_skippable_max_ad_duration(::google::protobuf::int32 value) {
  set_has_skippable_max_ad_duration();
  skippable_max_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.Video.skippable_max_ad_duration)
}

// repeated .BidRequest.Video.VideoFormat allowed_video_formats = 6;
int BidRequest_Video::allowed_video_formats_size() const {
  return allowed_video_formats_.size();
}
void BidRequest_Video::clear_allowed_video_formats() {
  allowed_video_formats_.Clear();
}
 ::BidRequest_Video_VideoFormat BidRequest_Video::allowed_video_formats(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.allowed_video_formats)
  return static_cast< ::BidRequest_Video_VideoFormat >(allowed_video_formats_.Get(index));
}
 void BidRequest_Video::set_allowed_video_formats(int index, ::BidRequest_Video_VideoFormat value) {
  assert(::BidRequest_Video_VideoFormat_IsValid(value));
  allowed_video_formats_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.Video.allowed_video_formats)
}
 void BidRequest_Video::add_allowed_video_formats(::BidRequest_Video_VideoFormat value) {
  assert(::BidRequest_Video_VideoFormat_IsValid(value));
  allowed_video_formats_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.Video.allowed_video_formats)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Video::allowed_video_formats() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.allowed_video_formats)
  return allowed_video_formats_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Video::mutable_allowed_video_formats() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.allowed_video_formats)
  return &allowed_video_formats_;
}

// repeated .BidRequest.Video.CompanionSlot companion_slot = 7;
int BidRequest_Video::companion_slot_size() const {
  return companion_slot_.size();
}
void BidRequest_Video::clear_companion_slot() {
  companion_slot_.Clear();
}
const ::BidRequest_Video_CompanionSlot& BidRequest_Video::companion_slot(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.Video.companion_slot)
  return companion_slot_.Get(index);
}
::BidRequest_Video_CompanionSlot* BidRequest_Video::mutable_companion_slot(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.Video.companion_slot)
  return companion_slot_.Mutable(index);
}
::BidRequest_Video_CompanionSlot* BidRequest_Video::add_companion_slot() {
  // @@protoc_insertion_point(field_add:BidRequest.Video.companion_slot)
  return companion_slot_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_Video_CompanionSlot >*
BidRequest_Video::mutable_companion_slot() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.Video.companion_slot)
  return &companion_slot_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_Video_CompanionSlot >&
BidRequest_Video::companion_slot() const {
  // @@protoc_insertion_point(field_list:BidRequest.Video.companion_slot)
  return companion_slot_;
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_MatchingAdData_DirectDeal

// optional int64 direct_deal_id = 1;
bool BidRequest_AdSlot_MatchingAdData_DirectDeal::has_direct_deal_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_has_direct_deal_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_has_direct_deal_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_direct_deal_id() {
  direct_deal_id_ = GOOGLE_LONGLONG(0);
  clear_has_direct_deal_id();
}
 ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData_DirectDeal::direct_deal_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DirectDeal.direct_deal_id)
  return direct_deal_id_;
}
 void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_direct_deal_id(::google::protobuf::int64 value) {
  set_has_direct_deal_id();
  direct_deal_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DirectDeal.direct_deal_id)
}

// optional int64 fixed_cpm_micros = 2;
bool BidRequest_AdSlot_MatchingAdData_DirectDeal::has_fixed_cpm_micros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_has_fixed_cpm_micros() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_has_fixed_cpm_micros() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_MatchingAdData_DirectDeal::clear_fixed_cpm_micros() {
  fixed_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_fixed_cpm_micros();
}
 ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData_DirectDeal::fixed_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DirectDeal.fixed_cpm_micros)
  return fixed_cpm_micros_;
}
 void BidRequest_AdSlot_MatchingAdData_DirectDeal::set_fixed_cpm_micros(::google::protobuf::int64 value) {
  set_has_fixed_cpm_micros();
  fixed_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DirectDeal.fixed_cpm_micros)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_MatchingAdData

// optional int64 adgroup_id = 2;
bool BidRequest_AdSlot_MatchingAdData::has_adgroup_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot_MatchingAdData::set_has_adgroup_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot_MatchingAdData::clear_has_adgroup_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot_MatchingAdData::clear_adgroup_id() {
  adgroup_id_ = GOOGLE_LONGLONG(0);
  clear_has_adgroup_id();
}
 ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData::adgroup_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.adgroup_id)
  return adgroup_id_;
}
 void BidRequest_AdSlot_MatchingAdData::set_adgroup_id(::google::protobuf::int64 value) {
  set_has_adgroup_id();
  adgroup_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.adgroup_id)
}

// optional int64 minimum_cpm_micros = 5;
bool BidRequest_AdSlot_MatchingAdData::has_minimum_cpm_micros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_MatchingAdData::set_has_minimum_cpm_micros() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_MatchingAdData::clear_has_minimum_cpm_micros() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_MatchingAdData::clear_minimum_cpm_micros() {
  minimum_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_minimum_cpm_micros();
}
 ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData::minimum_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.minimum_cpm_micros)
  return minimum_cpm_micros_;
}
 void BidRequest_AdSlot_MatchingAdData::set_minimum_cpm_micros(::google::protobuf::int64 value) {
  set_has_minimum_cpm_micros();
  minimum_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.minimum_cpm_micros)
}

// repeated .BidRequest.AdSlot.MatchingAdData.DirectDeal direct_deal = 6;
int BidRequest_AdSlot_MatchingAdData::direct_deal_size() const {
  return direct_deal_.size();
}
void BidRequest_AdSlot_MatchingAdData::clear_direct_deal() {
  direct_deal_.Clear();
}
const ::BidRequest_AdSlot_MatchingAdData_DirectDeal& BidRequest_AdSlot_MatchingAdData::direct_deal(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return direct_deal_.Get(index);
}
::BidRequest_AdSlot_MatchingAdData_DirectDeal* BidRequest_AdSlot_MatchingAdData::mutable_direct_deal(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return direct_deal_.Mutable(index);
}
::BidRequest_AdSlot_MatchingAdData_DirectDeal* BidRequest_AdSlot_MatchingAdData::add_direct_deal() {
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return direct_deal_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_DirectDeal >*
BidRequest_AdSlot_MatchingAdData::mutable_direct_deal() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return &direct_deal_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData_DirectDeal >&
BidRequest_AdSlot_MatchingAdData::direct_deal() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.MatchingAdData.direct_deal)
  return direct_deal_;
}

// optional int64 DEPRECATED_campaign_id = 1;
bool BidRequest_AdSlot_MatchingAdData::has_deprecated_campaign_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_AdSlot_MatchingAdData::set_has_deprecated_campaign_id() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_AdSlot_MatchingAdData::clear_has_deprecated_campaign_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_AdSlot_MatchingAdData::clear_deprecated_campaign_id() {
  deprecated_campaign_id_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_campaign_id();
}
 ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData::deprecated_campaign_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DEPRECATED_campaign_id)
  return deprecated_campaign_id_;
}
 void BidRequest_AdSlot_MatchingAdData::set_deprecated_campaign_id(::google::protobuf::int64 value) {
  set_has_deprecated_campaign_id();
  deprecated_campaign_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DEPRECATED_campaign_id)
}

// optional bool DEPRECATED_per_buyer_minimum_cpm = 3;
bool BidRequest_AdSlot_MatchingAdData::has_deprecated_per_buyer_minimum_cpm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_AdSlot_MatchingAdData::set_has_deprecated_per_buyer_minimum_cpm() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_AdSlot_MatchingAdData::clear_has_deprecated_per_buyer_minimum_cpm() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_AdSlot_MatchingAdData::clear_deprecated_per_buyer_minimum_cpm() {
  deprecated_per_buyer_minimum_cpm_ = false;
  clear_has_deprecated_per_buyer_minimum_cpm();
}
 bool BidRequest_AdSlot_MatchingAdData::deprecated_per_buyer_minimum_cpm() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DEPRECATED_per_buyer_minimum_cpm)
  return deprecated_per_buyer_minimum_cpm_;
}
 void BidRequest_AdSlot_MatchingAdData::set_deprecated_per_buyer_minimum_cpm(bool value) {
  set_has_deprecated_per_buyer_minimum_cpm();
  deprecated_per_buyer_minimum_cpm_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DEPRECATED_per_buyer_minimum_cpm)
}

// optional int64 DEPRECATED_fixed_cpm_micros = 4;
bool BidRequest_AdSlot_MatchingAdData::has_deprecated_fixed_cpm_micros() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_AdSlot_MatchingAdData::set_has_deprecated_fixed_cpm_micros() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_AdSlot_MatchingAdData::clear_has_deprecated_fixed_cpm_micros() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_AdSlot_MatchingAdData::clear_deprecated_fixed_cpm_micros() {
  deprecated_fixed_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_fixed_cpm_micros();
}
 ::google::protobuf::int64 BidRequest_AdSlot_MatchingAdData::deprecated_fixed_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.MatchingAdData.DEPRECATED_fixed_cpm_micros)
  return deprecated_fixed_cpm_micros_;
}
 void BidRequest_AdSlot_MatchingAdData::set_deprecated_fixed_cpm_micros(::google::protobuf::int64 value) {
  set_has_deprecated_fixed_cpm_micros();
  deprecated_fixed_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.MatchingAdData.DEPRECATED_fixed_cpm_micros)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot

// required int32 id = 1;
bool BidRequest_AdSlot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 BidRequest_AdSlot::id() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.id)
  return id_;
}
 void BidRequest_AdSlot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.id)
}

// optional uint64 ad_block_key = 14;
bool BidRequest_AdSlot::has_ad_block_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot::set_has_ad_block_key() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot::clear_has_ad_block_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot::clear_ad_block_key() {
  ad_block_key_ = GOOGLE_ULONGLONG(0);
  clear_has_ad_block_key();
}
 ::google::protobuf::uint64 BidRequest_AdSlot::ad_block_key() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.ad_block_key)
  return ad_block_key_;
}
 void BidRequest_AdSlot::set_ad_block_key(::google::protobuf::uint64 value) {
  set_has_ad_block_key();
  ad_block_key_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.ad_block_key)
}

// repeated string targetable_channel = 10;
int BidRequest_AdSlot::targetable_channel_size() const {
  return targetable_channel_.size();
}
void BidRequest_AdSlot::clear_targetable_channel() {
  targetable_channel_.Clear();
}
 const ::std::string& BidRequest_AdSlot::targetable_channel(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.targetable_channel)
  return targetable_channel_.Get(index);
}
 ::std::string* BidRequest_AdSlot::mutable_targetable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.targetable_channel)
  return targetable_channel_.Mutable(index);
}
 void BidRequest_AdSlot::set_targetable_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.targetable_channel)
  targetable_channel_.Mutable(index)->assign(value);
}
 void BidRequest_AdSlot::set_targetable_channel(int index, const char* value) {
  targetable_channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.AdSlot.targetable_channel)
}
 void BidRequest_AdSlot::set_targetable_channel(int index, const char* value, size_t size) {
  targetable_channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.AdSlot.targetable_channel)
}
 ::std::string* BidRequest_AdSlot::add_targetable_channel() {
  return targetable_channel_.Add();
}
 void BidRequest_AdSlot::add_targetable_channel(const ::std::string& value) {
  targetable_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.targetable_channel)
}
 void BidRequest_AdSlot::add_targetable_channel(const char* value) {
  targetable_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.AdSlot.targetable_channel)
}
 void BidRequest_AdSlot::add_targetable_channel(const char* value, size_t size) {
  targetable_channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.AdSlot.targetable_channel)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot::targetable_channel() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.targetable_channel)
  return targetable_channel_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot::mutable_targetable_channel() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.targetable_channel)
  return &targetable_channel_;
}

// repeated int32 width = 2;
int BidRequest_AdSlot::width_size() const {
  return width_.size();
}
void BidRequest_AdSlot::clear_width() {
  width_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot::width(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.width)
  return width_.Get(index);
}
 void BidRequest_AdSlot::set_width(int index, ::google::protobuf::int32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.width)
}
 void BidRequest_AdSlot::add_width(::google::protobuf::int32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.width)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::width() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.width)
  return width_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.width)
  return &width_;
}

// repeated int32 height = 3;
int BidRequest_AdSlot::height_size() const {
  return height_.size();
}
void BidRequest_AdSlot::clear_height() {
  height_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot::height(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.height)
  return height_.Get(index);
}
 void BidRequest_AdSlot::set_height(int index, ::google::protobuf::int32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.height)
}
 void BidRequest_AdSlot::add_height(::google::protobuf::int32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.height)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::height() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.height)
  return height_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.height)
  return &height_;
}

// repeated int32 excluded_attribute = 4 [packed = true];
int BidRequest_AdSlot::excluded_attribute_size() const {
  return excluded_attribute_.size();
}
void BidRequest_AdSlot::clear_excluded_attribute() {
  excluded_attribute_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot::excluded_attribute(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.excluded_attribute)
  return excluded_attribute_.Get(index);
}
 void BidRequest_AdSlot::set_excluded_attribute(int index, ::google::protobuf::int32 value) {
  excluded_attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.excluded_attribute)
}
 void BidRequest_AdSlot::add_excluded_attribute(::google::protobuf::int32 value) {
  excluded_attribute_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.excluded_attribute)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::excluded_attribute() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.excluded_attribute)
  return excluded_attribute_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_excluded_attribute() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.excluded_attribute)
  return &excluded_attribute_;
}

// repeated int32 allowed_vendor_type = 6 [packed = true];
int BidRequest_AdSlot::allowed_vendor_type_size() const {
  return allowed_vendor_type_.size();
}
void BidRequest_AdSlot::clear_allowed_vendor_type() {
  allowed_vendor_type_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot::allowed_vendor_type(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.allowed_vendor_type)
  return allowed_vendor_type_.Get(index);
}
 void BidRequest_AdSlot::set_allowed_vendor_type(int index, ::google::protobuf::int32 value) {
  allowed_vendor_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.allowed_vendor_type)
}
 void BidRequest_AdSlot::add_allowed_vendor_type(::google::protobuf::int32 value) {
  allowed_vendor_type_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.allowed_vendor_type)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::allowed_vendor_type() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.allowed_vendor_type)
  return allowed_vendor_type_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_allowed_vendor_type() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.allowed_vendor_type)
  return &allowed_vendor_type_;
}

// repeated int32 excluded_sensitive_category = 7 [packed = true];
int BidRequest_AdSlot::excluded_sensitive_category_size() const {
  return excluded_sensitive_category_.size();
}
void BidRequest_AdSlot::clear_excluded_sensitive_category() {
  excluded_sensitive_category_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot::excluded_sensitive_category(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.excluded_sensitive_category)
  return excluded_sensitive_category_.Get(index);
}
 void BidRequest_AdSlot::set_excluded_sensitive_category(int index, ::google::protobuf::int32 value) {
  excluded_sensitive_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.excluded_sensitive_category)
}
 void BidRequest_AdSlot::add_excluded_sensitive_category(::google::protobuf::int32 value) {
  excluded_sensitive_category_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.excluded_sensitive_category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::excluded_sensitive_category() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.excluded_sensitive_category)
  return excluded_sensitive_category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_excluded_sensitive_category() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.excluded_sensitive_category)
  return &excluded_sensitive_category_;
}

// repeated int32 allowed_restricted_category = 16 [packed = true];
int BidRequest_AdSlot::allowed_restricted_category_size() const {
  return allowed_restricted_category_.size();
}
void BidRequest_AdSlot::clear_allowed_restricted_category() {
  allowed_restricted_category_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot::allowed_restricted_category(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.allowed_restricted_category)
  return allowed_restricted_category_.Get(index);
}
 void BidRequest_AdSlot::set_allowed_restricted_category(int index, ::google::protobuf::int32 value) {
  allowed_restricted_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.allowed_restricted_category)
}
 void BidRequest_AdSlot::add_allowed_restricted_category(::google::protobuf::int32 value) {
  allowed_restricted_category_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.allowed_restricted_category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::allowed_restricted_category() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.allowed_restricted_category)
  return allowed_restricted_category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_allowed_restricted_category() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.allowed_restricted_category)
  return &allowed_restricted_category_;
}

// repeated int32 excluded_product_category = 13 [packed = true];
int BidRequest_AdSlot::excluded_product_category_size() const {
  return excluded_product_category_.size();
}
void BidRequest_AdSlot::clear_excluded_product_category() {
  excluded_product_category_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot::excluded_product_category(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.excluded_product_category)
  return excluded_product_category_.Get(index);
}
 void BidRequest_AdSlot::set_excluded_product_category(int index, ::google::protobuf::int32 value) {
  excluded_product_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.excluded_product_category)
}
 void BidRequest_AdSlot::add_excluded_product_category(::google::protobuf::int32 value) {
  excluded_product_category_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.excluded_product_category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::excluded_product_category() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.excluded_product_category)
  return excluded_product_category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_excluded_product_category() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.excluded_product_category)
  return &excluded_product_category_;
}

// repeated .BidRequest.AdSlot.MatchingAdData matching_ad_data = 9;
int BidRequest_AdSlot::matching_ad_data_size() const {
  return matching_ad_data_.size();
}
void BidRequest_AdSlot::clear_matching_ad_data() {
  matching_ad_data_.Clear();
}
const ::BidRequest_AdSlot_MatchingAdData& BidRequest_AdSlot::matching_ad_data(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.matching_ad_data)
  return matching_ad_data_.Get(index);
}
::BidRequest_AdSlot_MatchingAdData* BidRequest_AdSlot::mutable_matching_ad_data(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.matching_ad_data)
  return matching_ad_data_.Mutable(index);
}
::BidRequest_AdSlot_MatchingAdData* BidRequest_AdSlot::add_matching_ad_data() {
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.matching_ad_data)
  return matching_ad_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData >*
BidRequest_AdSlot::mutable_matching_ad_data() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.matching_ad_data)
  return &matching_ad_data_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot_MatchingAdData >&
BidRequest_AdSlot::matching_ad_data() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.matching_ad_data)
  return matching_ad_data_;
}

// optional fixed64 publisher_settings_list_id = 15;
bool BidRequest_AdSlot::has_publisher_settings_list_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_AdSlot::set_has_publisher_settings_list_id() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_AdSlot::clear_has_publisher_settings_list_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_AdSlot::clear_publisher_settings_list_id() {
  publisher_settings_list_id_ = GOOGLE_ULONGLONG(0);
  clear_has_publisher_settings_list_id();
}
 ::google::protobuf::uint64 BidRequest_AdSlot::publisher_settings_list_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.publisher_settings_list_id)
  return publisher_settings_list_id_;
}
 void BidRequest_AdSlot::set_publisher_settings_list_id(::google::protobuf::uint64 value) {
  set_has_publisher_settings_list_id();
  publisher_settings_list_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.publisher_settings_list_id)
}

// optional .BidRequest.AdSlot.SlotVisibility slot_visibility = 12 [default = NO_DETECTION];
bool BidRequest_AdSlot::has_slot_visibility() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_AdSlot::set_has_slot_visibility() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_AdSlot::clear_has_slot_visibility() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_AdSlot::clear_slot_visibility() {
  slot_visibility_ = 0;
  clear_has_slot_visibility();
}
 ::BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot::slot_visibility() const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.slot_visibility)
  return static_cast< ::BidRequest_AdSlot_SlotVisibility >(slot_visibility_);
}
 void BidRequest_AdSlot::set_slot_visibility(::BidRequest_AdSlot_SlotVisibility value) {
  assert(::BidRequest_AdSlot_SlotVisibility_IsValid(value));
  set_has_slot_visibility();
  slot_visibility_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.slot_visibility)
}

// repeated int32 DEPRECATED_allowed_attribute = 5;
int BidRequest_AdSlot::deprecated_allowed_attribute_size() const {
  return deprecated_allowed_attribute_.size();
}
void BidRequest_AdSlot::clear_deprecated_allowed_attribute() {
  deprecated_allowed_attribute_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot::deprecated_allowed_attribute(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
  return deprecated_allowed_attribute_.Get(index);
}
 void BidRequest_AdSlot::set_deprecated_allowed_attribute(int index, ::google::protobuf::int32 value) {
  deprecated_allowed_attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
}
 void BidRequest_AdSlot::add_deprecated_allowed_attribute(::google::protobuf::int32 value) {
  deprecated_allowed_attribute_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::deprecated_allowed_attribute() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
  return deprecated_allowed_attribute_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_deprecated_allowed_attribute() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.DEPRECATED_allowed_attribute)
  return &deprecated_allowed_attribute_;
}

// repeated bytes DEPRECATED_publisher_settings_list_id = 11;
int BidRequest_AdSlot::deprecated_publisher_settings_list_id_size() const {
  return deprecated_publisher_settings_list_id_.size();
}
void BidRequest_AdSlot::clear_deprecated_publisher_settings_list_id() {
  deprecated_publisher_settings_list_id_.Clear();
}
 const ::std::string& BidRequest_AdSlot::deprecated_publisher_settings_list_id(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  return deprecated_publisher_settings_list_id_.Get(index);
}
 ::std::string* BidRequest_AdSlot::mutable_deprecated_publisher_settings_list_id(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  return deprecated_publisher_settings_list_id_.Mutable(index);
}
 void BidRequest_AdSlot::set_deprecated_publisher_settings_list_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  deprecated_publisher_settings_list_id_.Mutable(index)->assign(value);
}
 void BidRequest_AdSlot::set_deprecated_publisher_settings_list_id(int index, const char* value) {
  deprecated_publisher_settings_list_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
 void BidRequest_AdSlot::set_deprecated_publisher_settings_list_id(int index, const void* value, size_t size) {
  deprecated_publisher_settings_list_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
 ::std::string* BidRequest_AdSlot::add_deprecated_publisher_settings_list_id() {
  return deprecated_publisher_settings_list_id_.Add();
}
 void BidRequest_AdSlot::add_deprecated_publisher_settings_list_id(const ::std::string& value) {
  deprecated_publisher_settings_list_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
 void BidRequest_AdSlot::add_deprecated_publisher_settings_list_id(const char* value) {
  deprecated_publisher_settings_list_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
 void BidRequest_AdSlot::add_deprecated_publisher_settings_list_id(const void* value, size_t size) {
  deprecated_publisher_settings_list_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot::deprecated_publisher_settings_list_id() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  return deprecated_publisher_settings_list_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot::mutable_deprecated_publisher_settings_list_id() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.DEPRECATED_publisher_settings_list_id)
  return &deprecated_publisher_settings_list_id_;
}

// repeated string DEPRECATED_excluded_click_through_url = 8;
int BidRequest_AdSlot::deprecated_excluded_click_through_url_size() const {
  return deprecated_excluded_click_through_url_.size();
}
void BidRequest_AdSlot::clear_deprecated_excluded_click_through_url() {
  deprecated_excluded_click_through_url_.Clear();
}
 const ::std::string& BidRequest_AdSlot::deprecated_excluded_click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_.Get(index);
}
 ::std::string* BidRequest_AdSlot::mutable_deprecated_excluded_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_.Mutable(index);
}
 void BidRequest_AdSlot::set_deprecated_excluded_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  deprecated_excluded_click_through_url_.Mutable(index)->assign(value);
}
 void BidRequest_AdSlot::set_deprecated_excluded_click_through_url(int index, const char* value) {
  deprecated_excluded_click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
 void BidRequest_AdSlot::set_deprecated_excluded_click_through_url(int index, const char* value, size_t size) {
  deprecated_excluded_click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
 ::std::string* BidRequest_AdSlot::add_deprecated_excluded_click_through_url() {
  return deprecated_excluded_click_through_url_.Add();
}
 void BidRequest_AdSlot::add_deprecated_excluded_click_through_url(const ::std::string& value) {
  deprecated_excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
 void BidRequest_AdSlot::add_deprecated_excluded_click_through_url(const char* value) {
  deprecated_excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
 void BidRequest_AdSlot::add_deprecated_excluded_click_through_url(const char* value, size_t size) {
  deprecated_excluded_click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot::deprecated_excluded_click_through_url() const {
  // @@protoc_insertion_point(field_list:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot::mutable_deprecated_excluded_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.AdSlot.DEPRECATED_excluded_click_through_url)
  return &deprecated_excluded_click_through_url_;
}

// -------------------------------------------------------------------

// BidRequest_BidResponseFeedback

// optional bytes request_id = 1;
bool BidRequest_BidResponseFeedback::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_BidResponseFeedback::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_BidResponseFeedback::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_BidResponseFeedback::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
 const ::std::string& BidRequest_BidResponseFeedback::request_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.BidResponseFeedback.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_BidResponseFeedback::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.BidResponseFeedback.request_id)
}
 void BidRequest_BidResponseFeedback::set_request_id(const char* value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.BidResponseFeedback.request_id)
}
 void BidRequest_BidResponseFeedback::set_request_id(const void* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.BidResponseFeedback.request_id)
}
 ::std::string* BidRequest_BidResponseFeedback::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.BidResponseFeedback.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_BidResponseFeedback::release_request_id() {
  clear_has_request_id();
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_BidResponseFeedback::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.BidResponseFeedback.request_id)
}

// optional int32 creative_index = 2;
bool BidRequest_BidResponseFeedback::has_creative_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_BidResponseFeedback::set_has_creative_index() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_BidResponseFeedback::clear_has_creative_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_BidResponseFeedback::clear_creative_index() {
  creative_index_ = 0;
  clear_has_creative_index();
}
 ::google::protobuf::int32 BidRequest_BidResponseFeedback::creative_index() const {
  // @@protoc_insertion_point(field_get:BidRequest.BidResponseFeedback.creative_index)
  return creative_index_;
}
 void BidRequest_BidResponseFeedback::set_creative_index(::google::protobuf::int32 value) {
  set_has_creative_index();
  creative_index_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.BidResponseFeedback.creative_index)
}

// optional int32 creative_status_code = 3;
bool BidRequest_BidResponseFeedback::has_creative_status_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_BidResponseFeedback::set_has_creative_status_code() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_BidResponseFeedback::clear_has_creative_status_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_BidResponseFeedback::clear_creative_status_code() {
  creative_status_code_ = 0;
  clear_has_creative_status_code();
}
 ::google::protobuf::int32 BidRequest_BidResponseFeedback::creative_status_code() const {
  // @@protoc_insertion_point(field_get:BidRequest.BidResponseFeedback.creative_status_code)
  return creative_status_code_;
}
 void BidRequest_BidResponseFeedback::set_creative_status_code(::google::protobuf::int32 value) {
  set_has_creative_status_code();
  creative_status_code_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.BidResponseFeedback.creative_status_code)
}

// optional int64 cpm_micros = 4;
bool BidRequest_BidResponseFeedback::has_cpm_micros() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_BidResponseFeedback::set_has_cpm_micros() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_BidResponseFeedback::clear_has_cpm_micros() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_BidResponseFeedback::clear_cpm_micros() {
  cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_cpm_micros();
}
 ::google::protobuf::int64 BidRequest_BidResponseFeedback::cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidRequest.BidResponseFeedback.cpm_micros)
  return cpm_micros_;
}
 void BidRequest_BidResponseFeedback::set_cpm_micros(::google::protobuf::int64 value) {
  set_has_cpm_micros();
  cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.BidResponseFeedback.cpm_micros)
}

// -------------------------------------------------------------------

// BidRequest_MatchingNetwork

// optional string DEPRECATED_network_id = 1;
bool BidRequest_MatchingNetwork::has_deprecated_network_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_MatchingNetwork::set_has_deprecated_network_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_MatchingNetwork::clear_has_deprecated_network_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_MatchingNetwork::clear_deprecated_network_id() {
  deprecated_network_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_network_id();
}
 const ::std::string& BidRequest_MatchingNetwork::deprecated_network_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.MatchingNetwork.DEPRECATED_network_id)
  return deprecated_network_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_MatchingNetwork::set_deprecated_network_id(const ::std::string& value) {
  set_has_deprecated_network_id();
  deprecated_network_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.MatchingNetwork.DEPRECATED_network_id)
}
 void BidRequest_MatchingNetwork::set_deprecated_network_id(const char* value) {
  set_has_deprecated_network_id();
  deprecated_network_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.MatchingNetwork.DEPRECATED_network_id)
}
 void BidRequest_MatchingNetwork::set_deprecated_network_id(const char* value, size_t size) {
  set_has_deprecated_network_id();
  deprecated_network_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.MatchingNetwork.DEPRECATED_network_id)
}
 ::std::string* BidRequest_MatchingNetwork::mutable_deprecated_network_id() {
  set_has_deprecated_network_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.MatchingNetwork.DEPRECATED_network_id)
  return deprecated_network_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_MatchingNetwork::release_deprecated_network_id() {
  clear_has_deprecated_network_id();
  return deprecated_network_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_MatchingNetwork::set_allocated_deprecated_network_id(::std::string* deprecated_network_id) {
  if (deprecated_network_id != NULL) {
    set_has_deprecated_network_id();
  } else {
    clear_has_deprecated_network_id();
  }
  deprecated_network_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_network_id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.MatchingNetwork.DEPRECATED_network_id)
}

// optional string DEPRECATED_google_user_id = 2;
bool BidRequest_MatchingNetwork::has_deprecated_google_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_MatchingNetwork::set_has_deprecated_google_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_MatchingNetwork::clear_has_deprecated_google_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_MatchingNetwork::clear_deprecated_google_user_id() {
  deprecated_google_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_google_user_id();
}
 const ::std::string& BidRequest_MatchingNetwork::deprecated_google_user_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
  return deprecated_google_user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_MatchingNetwork::set_deprecated_google_user_id(const ::std::string& value) {
  set_has_deprecated_google_user_id();
  deprecated_google_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
}
 void BidRequest_MatchingNetwork::set_deprecated_google_user_id(const char* value) {
  set_has_deprecated_google_user_id();
  deprecated_google_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
}
 void BidRequest_MatchingNetwork::set_deprecated_google_user_id(const char* value, size_t size) {
  set_has_deprecated_google_user_id();
  deprecated_google_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
}
 ::std::string* BidRequest_MatchingNetwork::mutable_deprecated_google_user_id() {
  set_has_deprecated_google_user_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
  return deprecated_google_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_MatchingNetwork::release_deprecated_google_user_id() {
  clear_has_deprecated_google_user_id();
  return deprecated_google_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_MatchingNetwork::set_allocated_deprecated_google_user_id(::std::string* deprecated_google_user_id) {
  if (deprecated_google_user_id != NULL) {
    set_has_deprecated_google_user_id();
  } else {
    clear_has_deprecated_google_user_id();
  }
  deprecated_google_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_google_user_id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.MatchingNetwork.DEPRECATED_google_user_id)
}

// -------------------------------------------------------------------

// BidRequest

// required bytes id = 2;
bool BidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest::id() const {
  // @@protoc_insertion_point(field_get:BidRequest.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.id)
}
 void BidRequest::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.id)
}
 void BidRequest::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.id)
}
 ::std::string* BidRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.id)
}

// optional bytes ip = 4;
bool BidRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& BidRequest::ip() const {
  // @@protoc_insertion_point(field_get:BidRequest.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.ip)
}
 void BidRequest::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.ip)
}
 void BidRequest::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.ip)
}
 ::std::string* BidRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:BidRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.ip)
}

// optional string google_user_id = 21;
bool BidRequest::has_google_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest::set_has_google_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest::clear_has_google_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest::clear_google_user_id() {
  google_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_google_user_id();
}
 const ::std::string& BidRequest::google_user_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.google_user_id)
  return google_user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_google_user_id(const ::std::string& value) {
  set_has_google_user_id();
  google_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.google_user_id)
}
 void BidRequest::set_google_user_id(const char* value) {
  set_has_google_user_id();
  google_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.google_user_id)
}
 void BidRequest::set_google_user_id(const char* value, size_t size) {
  set_has_google_user_id();
  google_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.google_user_id)
}
 ::std::string* BidRequest::mutable_google_user_id() {
  set_has_google_user_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.google_user_id)
  return google_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_google_user_id() {
  clear_has_google_user_id();
  return google_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_google_user_id(::std::string* google_user_id) {
  if (google_user_id != NULL) {
    set_has_google_user_id();
  } else {
    clear_has_google_user_id();
  }
  google_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), google_user_id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.google_user_id)
}

// optional uint32 cookie_version = 20;
bool BidRequest::has_cookie_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest::set_has_cookie_version() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest::clear_has_cookie_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest::clear_cookie_version() {
  cookie_version_ = 0u;
  clear_has_cookie_version();
}
 ::google::protobuf::uint32 BidRequest::cookie_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.cookie_version)
  return cookie_version_;
}
 void BidRequest::set_cookie_version(::google::protobuf::uint32 value) {
  set_has_cookie_version();
  cookie_version_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.cookie_version)
}

// optional int32 cookie_age_seconds = 31;
bool BidRequest::has_cookie_age_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest::set_has_cookie_age_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest::clear_has_cookie_age_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest::clear_cookie_age_seconds() {
  cookie_age_seconds_ = 0;
  clear_has_cookie_age_seconds();
}
 ::google::protobuf::int32 BidRequest::cookie_age_seconds() const {
  // @@protoc_insertion_point(field_get:BidRequest.cookie_age_seconds)
  return cookie_age_seconds_;
}
 void BidRequest::set_cookie_age_seconds(::google::protobuf::int32 value) {
  set_has_cookie_age_seconds();
  cookie_age_seconds_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.cookie_age_seconds)
}

// optional bytes hosted_match_data = 37;
bool BidRequest::has_hosted_match_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest::set_has_hosted_match_data() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest::clear_has_hosted_match_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest::clear_hosted_match_data() {
  hosted_match_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hosted_match_data();
}
 const ::std::string& BidRequest::hosted_match_data() const {
  // @@protoc_insertion_point(field_get:BidRequest.hosted_match_data)
  return hosted_match_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_hosted_match_data(const ::std::string& value) {
  set_has_hosted_match_data();
  hosted_match_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.hosted_match_data)
}
 void BidRequest::set_hosted_match_data(const char* value) {
  set_has_hosted_match_data();
  hosted_match_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.hosted_match_data)
}
 void BidRequest::set_hosted_match_data(const void* value, size_t size) {
  set_has_hosted_match_data();
  hosted_match_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.hosted_match_data)
}
 ::std::string* BidRequest::mutable_hosted_match_data() {
  set_has_hosted_match_data();
  // @@protoc_insertion_point(field_mutable:BidRequest.hosted_match_data)
  return hosted_match_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_hosted_match_data() {
  clear_has_hosted_match_data();
  return hosted_match_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_hosted_match_data(::std::string* hosted_match_data) {
  if (hosted_match_data != NULL) {
    set_has_hosted_match_data();
  } else {
    clear_has_hosted_match_data();
  }
  hosted_match_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hosted_match_data);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.hosted_match_data)
}

// optional string user_agent = 6;
bool BidRequest::has_user_agent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest::set_has_user_agent() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_agent();
}
 const ::std::string& BidRequest::user_agent() const {
  // @@protoc_insertion_point(field_get:BidRequest.user_agent)
  return user_agent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.user_agent)
}
 void BidRequest::set_user_agent(const char* value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.user_agent)
}
 void BidRequest::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.user_agent)
}
 ::std::string* BidRequest::mutable_user_agent() {
  set_has_user_agent();
  // @@protoc_insertion_point(field_mutable:BidRequest.user_agent)
  return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_user_agent() {
  clear_has_user_agent();
  return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent != NULL) {
    set_has_user_agent();
  } else {
    clear_has_user_agent();
  }
  user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.user_agent)
}

// optional int32 geo_criteria_id = 39;
bool BidRequest::has_geo_criteria_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest::set_has_geo_criteria_id() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest::clear_has_geo_criteria_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest::clear_geo_criteria_id() {
  geo_criteria_id_ = 0;
  clear_has_geo_criteria_id();
}
 ::google::protobuf::int32 BidRequest::geo_criteria_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.geo_criteria_id)
  return geo_criteria_id_;
}
 void BidRequest::set_geo_criteria_id(::google::protobuf::int32 value) {
  set_has_geo_criteria_id();
  geo_criteria_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.geo_criteria_id)
}

// optional string postal_code = 33;
bool BidRequest::has_postal_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest::set_has_postal_code() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest::clear_has_postal_code() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postal_code();
}
 const ::std::string& BidRequest::postal_code() const {
  // @@protoc_insertion_point(field_get:BidRequest.postal_code)
  return postal_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_postal_code(const ::std::string& value) {
  set_has_postal_code();
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.postal_code)
}
 void BidRequest::set_postal_code(const char* value) {
  set_has_postal_code();
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.postal_code)
}
 void BidRequest::set_postal_code(const char* value, size_t size) {
  set_has_postal_code();
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.postal_code)
}
 ::std::string* BidRequest::mutable_postal_code() {
  set_has_postal_code();
  // @@protoc_insertion_point(field_mutable:BidRequest.postal_code)
  return postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_postal_code() {
  clear_has_postal_code();
  return postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_postal_code(::std::string* postal_code) {
  if (postal_code != NULL) {
    set_has_postal_code();
  } else {
    clear_has_postal_code();
  }
  postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.postal_code)
}

// optional string postal_code_prefix = 34;
bool BidRequest::has_postal_code_prefix() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest::set_has_postal_code_prefix() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest::clear_has_postal_code_prefix() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest::clear_postal_code_prefix() {
  postal_code_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postal_code_prefix();
}
 const ::std::string& BidRequest::postal_code_prefix() const {
  // @@protoc_insertion_point(field_get:BidRequest.postal_code_prefix)
  return postal_code_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_postal_code_prefix(const ::std::string& value) {
  set_has_postal_code_prefix();
  postal_code_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.postal_code_prefix)
}
 void BidRequest::set_postal_code_prefix(const char* value) {
  set_has_postal_code_prefix();
  postal_code_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.postal_code_prefix)
}
 void BidRequest::set_postal_code_prefix(const char* value, size_t size) {
  set_has_postal_code_prefix();
  postal_code_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.postal_code_prefix)
}
 ::std::string* BidRequest::mutable_postal_code_prefix() {
  set_has_postal_code_prefix();
  // @@protoc_insertion_point(field_mutable:BidRequest.postal_code_prefix)
  return postal_code_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_postal_code_prefix() {
  clear_has_postal_code_prefix();
  return postal_code_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_postal_code_prefix(::std::string* postal_code_prefix) {
  if (postal_code_prefix != NULL) {
    set_has_postal_code_prefix();
  } else {
    clear_has_postal_code_prefix();
  }
  postal_code_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postal_code_prefix);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.postal_code_prefix)
}

// optional bytes encrypted_hyperlocal_set = 40;
bool BidRequest::has_encrypted_hyperlocal_set() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest::set_has_encrypted_hyperlocal_set() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest::clear_has_encrypted_hyperlocal_set() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest::clear_encrypted_hyperlocal_set() {
  encrypted_hyperlocal_set_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypted_hyperlocal_set();
}
 const ::std::string& BidRequest::encrypted_hyperlocal_set() const {
  // @@protoc_insertion_point(field_get:BidRequest.encrypted_hyperlocal_set)
  return encrypted_hyperlocal_set_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_encrypted_hyperlocal_set(const ::std::string& value) {
  set_has_encrypted_hyperlocal_set();
  encrypted_hyperlocal_set_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.encrypted_hyperlocal_set)
}
 void BidRequest::set_encrypted_hyperlocal_set(const char* value) {
  set_has_encrypted_hyperlocal_set();
  encrypted_hyperlocal_set_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.encrypted_hyperlocal_set)
}
 void BidRequest::set_encrypted_hyperlocal_set(const void* value, size_t size) {
  set_has_encrypted_hyperlocal_set();
  encrypted_hyperlocal_set_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.encrypted_hyperlocal_set)
}
 ::std::string* BidRequest::mutable_encrypted_hyperlocal_set() {
  set_has_encrypted_hyperlocal_set();
  // @@protoc_insertion_point(field_mutable:BidRequest.encrypted_hyperlocal_set)
  return encrypted_hyperlocal_set_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_encrypted_hyperlocal_set() {
  clear_has_encrypted_hyperlocal_set();
  return encrypted_hyperlocal_set_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_encrypted_hyperlocal_set(::std::string* encrypted_hyperlocal_set) {
  if (encrypted_hyperlocal_set != NULL) {
    set_has_encrypted_hyperlocal_set();
  } else {
    clear_has_encrypted_hyperlocal_set();
  }
  encrypted_hyperlocal_set_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_hyperlocal_set);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.encrypted_hyperlocal_set)
}

// optional int32 timezone_offset = 25;
bool BidRequest::has_timezone_offset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest::set_has_timezone_offset() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest::clear_has_timezone_offset() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest::clear_timezone_offset() {
  timezone_offset_ = 0;
  clear_has_timezone_offset();
}
 ::google::protobuf::int32 BidRequest::timezone_offset() const {
  // @@protoc_insertion_point(field_get:BidRequest.timezone_offset)
  return timezone_offset_;
}
 void BidRequest::set_timezone_offset(::google::protobuf::int32 value) {
  set_has_timezone_offset();
  timezone_offset_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.timezone_offset)
}

// repeated int32 user_vertical = 30 [packed = true];
int BidRequest::user_vertical_size() const {
  return user_vertical_.size();
}
void BidRequest::clear_user_vertical() {
  user_vertical_.Clear();
}
 ::google::protobuf::int32 BidRequest::user_vertical(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.user_vertical)
  return user_vertical_.Get(index);
}
 void BidRequest::set_user_vertical(int index, ::google::protobuf::int32 value) {
  user_vertical_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.user_vertical)
}
 void BidRequest::add_user_vertical(::google::protobuf::int32 value) {
  user_vertical_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.user_vertical)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::user_vertical() const {
  // @@protoc_insertion_point(field_list:BidRequest.user_vertical)
  return user_vertical_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_user_vertical() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.user_vertical)
  return &user_vertical_;
}

// repeated .BidRequest.UserList user_list = 32;
int BidRequest::user_list_size() const {
  return user_list_.size();
}
void BidRequest::clear_user_list() {
  user_list_.Clear();
}
const ::BidRequest_UserList& BidRequest::user_list(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.user_list)
  return user_list_.Get(index);
}
::BidRequest_UserList* BidRequest::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.user_list)
  return user_list_.Mutable(index);
}
::BidRequest_UserList* BidRequest::add_user_list() {
  // @@protoc_insertion_point(field_add:BidRequest.user_list)
  return user_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_UserList >*
BidRequest::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.user_list)
  return &user_list_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_UserList >&
BidRequest::user_list() const {
  // @@protoc_insertion_point(field_list:BidRequest.user_list)
  return user_list_;
}

// optional int32 seller_network_id = 41;
bool BidRequest::has_seller_network_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest::set_has_seller_network_id() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest::clear_has_seller_network_id() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest::clear_seller_network_id() {
  seller_network_id_ = 0;
  clear_has_seller_network_id();
}
 ::google::protobuf::int32 BidRequest::seller_network_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.seller_network_id)
  return seller_network_id_;
}
 void BidRequest::set_seller_network_id(::google::protobuf::int32 value) {
  set_has_seller_network_id();
  seller_network_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.seller_network_id)
}

// optional string url = 11;
bool BidRequest::has_url() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidRequest::set_has_url() {
  _has_bits_[0] |= 0x00008000u;
}
void BidRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& BidRequest::url() const {
  // @@protoc_insertion_point(field_get:BidRequest.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.url)
}
 void BidRequest::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.url)
}
 void BidRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.url)
}
 ::std::string* BidRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:BidRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_url() {
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.url)
}

// optional string anonymous_id = 19;
bool BidRequest::has_anonymous_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidRequest::set_has_anonymous_id() {
  _has_bits_[0] |= 0x00010000u;
}
void BidRequest::clear_has_anonymous_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidRequest::clear_anonymous_id() {
  anonymous_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_anonymous_id();
}
 const ::std::string& BidRequest::anonymous_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.anonymous_id)
  return anonymous_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_anonymous_id(const ::std::string& value) {
  set_has_anonymous_id();
  anonymous_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.anonymous_id)
}
 void BidRequest::set_anonymous_id(const char* value) {
  set_has_anonymous_id();
  anonymous_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.anonymous_id)
}
 void BidRequest::set_anonymous_id(const char* value, size_t size) {
  set_has_anonymous_id();
  anonymous_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.anonymous_id)
}
 ::std::string* BidRequest::mutable_anonymous_id() {
  set_has_anonymous_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.anonymous_id)
  return anonymous_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_anonymous_id() {
  clear_has_anonymous_id();
  return anonymous_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_anonymous_id(::std::string* anonymous_id) {
  if (anonymous_id != NULL) {
    set_has_anonymous_id();
  } else {
    clear_has_anonymous_id();
  }
  anonymous_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anonymous_id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.anonymous_id)
}

// repeated string detected_language = 12;
int BidRequest::detected_language_size() const {
  return detected_language_.size();
}
void BidRequest::clear_detected_language() {
  detected_language_.Clear();
}
 const ::std::string& BidRequest::detected_language(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.detected_language)
  return detected_language_.Get(index);
}
 ::std::string* BidRequest::mutable_detected_language(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.detected_language)
  return detected_language_.Mutable(index);
}
 void BidRequest::set_detected_language(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.detected_language)
  detected_language_.Mutable(index)->assign(value);
}
 void BidRequest::set_detected_language(int index, const char* value) {
  detected_language_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.detected_language)
}
 void BidRequest::set_detected_language(int index, const char* value, size_t size) {
  detected_language_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.detected_language)
}
 ::std::string* BidRequest::add_detected_language() {
  return detected_language_.Add();
}
 void BidRequest::add_detected_language(const ::std::string& value) {
  detected_language_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.detected_language)
}
 void BidRequest::add_detected_language(const char* value) {
  detected_language_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.detected_language)
}
 void BidRequest::add_detected_language(const char* value, size_t size) {
  detected_language_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.detected_language)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::detected_language() const {
  // @@protoc_insertion_point(field_list:BidRequest.detected_language)
  return detected_language_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_detected_language() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.detected_language)
  return &detected_language_;
}

// repeated .BidRequest.Vertical detected_vertical = 13;
int BidRequest::detected_vertical_size() const {
  return detected_vertical_.size();
}
void BidRequest::clear_detected_vertical() {
  detected_vertical_.Clear();
}
const ::BidRequest_Vertical& BidRequest::detected_vertical(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.detected_vertical)
  return detected_vertical_.Get(index);
}
::BidRequest_Vertical* BidRequest::mutable_detected_vertical(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.detected_vertical)
  return detected_vertical_.Mutable(index);
}
::BidRequest_Vertical* BidRequest::add_detected_vertical() {
  // @@protoc_insertion_point(field_add:BidRequest.detected_vertical)
  return detected_vertical_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_Vertical >*
BidRequest::mutable_detected_vertical() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.detected_vertical)
  return &detected_vertical_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_Vertical >&
BidRequest::detected_vertical() const {
  // @@protoc_insertion_point(field_list:BidRequest.detected_vertical)
  return detected_vertical_;
}

// optional int32 vertical_dictionary_version = 24;
bool BidRequest::has_vertical_dictionary_version() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BidRequest::set_has_vertical_dictionary_version() {
  _has_bits_[0] |= 0x00080000u;
}
void BidRequest::clear_has_vertical_dictionary_version() {
  _has_bits_[0] &= ~0x00080000u;
}
void BidRequest::clear_vertical_dictionary_version() {
  vertical_dictionary_version_ = 0;
  clear_has_vertical_dictionary_version();
}
 ::google::protobuf::int32 BidRequest::vertical_dictionary_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.vertical_dictionary_version)
  return vertical_dictionary_version_;
}
 void BidRequest::set_vertical_dictionary_version(::google::protobuf::int32 value) {
  set_has_vertical_dictionary_version();
  vertical_dictionary_version_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.vertical_dictionary_version)
}

// repeated int32 detected_content_label = 26 [packed = true];
int BidRequest::detected_content_label_size() const {
  return detected_content_label_.size();
}
void BidRequest::clear_detected_content_label() {
  detected_content_label_.Clear();
}
 ::google::protobuf::int32 BidRequest::detected_content_label(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.detected_content_label)
  return detected_content_label_.Get(index);
}
 void BidRequest::set_detected_content_label(int index, ::google::protobuf::int32 value) {
  detected_content_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.detected_content_label)
}
 void BidRequest::add_detected_content_label(::google::protobuf::int32 value) {
  detected_content_label_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.detected_content_label)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::detected_content_label() const {
  // @@protoc_insertion_point(field_list:BidRequest.detected_content_label)
  return detected_content_label_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_detected_content_label() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.detected_content_label)
  return &detected_content_label_;
}

// repeated int32 site_list_id = 36;
int BidRequest::site_list_id_size() const {
  return site_list_id_.size();
}
void BidRequest::clear_site_list_id() {
  site_list_id_.Clear();
}
 ::google::protobuf::int32 BidRequest::site_list_id(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.site_list_id)
  return site_list_id_.Get(index);
}
 void BidRequest::set_site_list_id(int index, ::google::protobuf::int32 value) {
  site_list_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidRequest.site_list_id)
}
 void BidRequest::add_site_list_id(::google::protobuf::int32 value) {
  site_list_id_.Add(value);
  // @@protoc_insertion_point(field_add:BidRequest.site_list_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::site_list_id() const {
  // @@protoc_insertion_point(field_list:BidRequest.site_list_id)
  return site_list_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_site_list_id() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.site_list_id)
  return &site_list_id_;
}

// repeated .BidRequest.KeyValue key_value = 38;
int BidRequest::key_value_size() const {
  return key_value_.size();
}
void BidRequest::clear_key_value() {
  key_value_.Clear();
}
const ::BidRequest_KeyValue& BidRequest::key_value(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.key_value)
  return key_value_.Get(index);
}
::BidRequest_KeyValue* BidRequest::mutable_key_value(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.key_value)
  return key_value_.Mutable(index);
}
::BidRequest_KeyValue* BidRequest::add_key_value() {
  // @@protoc_insertion_point(field_add:BidRequest.key_value)
  return key_value_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_KeyValue >*
BidRequest::mutable_key_value() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.key_value)
  return &key_value_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_KeyValue >&
BidRequest::key_value() const {
  // @@protoc_insertion_point(field_list:BidRequest.key_value)
  return key_value_;
}

// optional .BidRequest.Mobile mobile = 28;
bool BidRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void BidRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00800000u;
}
void BidRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00800000u;
}
void BidRequest::clear_mobile() {
  if (mobile_ != NULL) mobile_->::BidRequest_Mobile::Clear();
  clear_has_mobile();
}
const ::BidRequest_Mobile& BidRequest::mobile() const {
  // @@protoc_insertion_point(field_get:BidRequest.mobile)
  return mobile_ != NULL ? *mobile_ : *default_instance_->mobile_;
}
::BidRequest_Mobile* BidRequest::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == NULL) {
    mobile_ = new ::BidRequest_Mobile;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.mobile)
  return mobile_;
}
::BidRequest_Mobile* BidRequest::release_mobile() {
  clear_has_mobile();
  ::BidRequest_Mobile* temp = mobile_;
  mobile_ = NULL;
  return temp;
}
void BidRequest::set_allocated_mobile(::BidRequest_Mobile* mobile) {
  delete mobile_;
  mobile_ = mobile;
  if (mobile) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.mobile)
}

// optional .BidRequest.Video video = 29;
bool BidRequest::has_video() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void BidRequest::set_has_video() {
  _has_bits_[0] |= 0x01000000u;
}
void BidRequest::clear_has_video() {
  _has_bits_[0] &= ~0x01000000u;
}
void BidRequest::clear_video() {
  if (video_ != NULL) video_->::BidRequest_Video::Clear();
  clear_has_video();
}
const ::BidRequest_Video& BidRequest::video() const {
  // @@protoc_insertion_point(field_get:BidRequest.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
::BidRequest_Video* BidRequest::mutable_video() {
  set_has_video();
  if (video_ == NULL) {
    video_ = new ::BidRequest_Video;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.video)
  return video_;
}
::BidRequest_Video* BidRequest::release_video() {
  clear_has_video();
  ::BidRequest_Video* temp = video_;
  video_ = NULL;
  return temp;
}
void BidRequest::set_allocated_video(::BidRequest_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.video)
}

// optional fixed64 publisher_settings_list_id = 42;
bool BidRequest::has_publisher_settings_list_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void BidRequest::set_has_publisher_settings_list_id() {
  _has_bits_[0] |= 0x02000000u;
}
void BidRequest::clear_has_publisher_settings_list_id() {
  _has_bits_[0] &= ~0x02000000u;
}
void BidRequest::clear_publisher_settings_list_id() {
  publisher_settings_list_id_ = GOOGLE_ULONGLONG(0);
  clear_has_publisher_settings_list_id();
}
 ::google::protobuf::uint64 BidRequest::publisher_settings_list_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.publisher_settings_list_id)
  return publisher_settings_list_id_;
}
 void BidRequest::set_publisher_settings_list_id(::google::protobuf::uint64 value) {
  set_has_publisher_settings_list_id();
  publisher_settings_list_id_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.publisher_settings_list_id)
}

// repeated .BidRequest.AdSlot adslot = 14;
int BidRequest::adslot_size() const {
  return adslot_.size();
}
void BidRequest::clear_adslot() {
  adslot_.Clear();
}
const ::BidRequest_AdSlot& BidRequest::adslot(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.adslot)
  return adslot_.Get(index);
}
::BidRequest_AdSlot* BidRequest::mutable_adslot(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.adslot)
  return adslot_.Mutable(index);
}
::BidRequest_AdSlot* BidRequest::add_adslot() {
  // @@protoc_insertion_point(field_add:BidRequest.adslot)
  return adslot_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot >*
BidRequest::mutable_adslot() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.adslot)
  return &adslot_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_AdSlot >&
BidRequest::adslot() const {
  // @@protoc_insertion_point(field_list:BidRequest.adslot)
  return adslot_;
}

// repeated .BidRequest.BidResponseFeedback bid_response_feedback = 44;
int BidRequest::bid_response_feedback_size() const {
  return bid_response_feedback_.size();
}
void BidRequest::clear_bid_response_feedback() {
  bid_response_feedback_.Clear();
}
const ::BidRequest_BidResponseFeedback& BidRequest::bid_response_feedback(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.bid_response_feedback)
  return bid_response_feedback_.Get(index);
}
::BidRequest_BidResponseFeedback* BidRequest::mutable_bid_response_feedback(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.bid_response_feedback)
  return bid_response_feedback_.Mutable(index);
}
::BidRequest_BidResponseFeedback* BidRequest::add_bid_response_feedback() {
  // @@protoc_insertion_point(field_add:BidRequest.bid_response_feedback)
  return bid_response_feedback_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_BidResponseFeedback >*
BidRequest::mutable_bid_response_feedback() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.bid_response_feedback)
  return &bid_response_feedback_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_BidResponseFeedback >&
BidRequest::bid_response_feedback() const {
  // @@protoc_insertion_point(field_list:BidRequest.bid_response_feedback)
  return bid_response_feedback_;
}

// optional bool is_test = 15 [default = false];
bool BidRequest::has_is_test() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void BidRequest::set_has_is_test() {
  _has_bits_[0] |= 0x10000000u;
}
void BidRequest::clear_has_is_test() {
  _has_bits_[0] &= ~0x10000000u;
}
void BidRequest::clear_is_test() {
  is_test_ = false;
  clear_has_is_test();
}
 bool BidRequest::is_test() const {
  // @@protoc_insertion_point(field_get:BidRequest.is_test)
  return is_test_;
}
 void BidRequest::set_is_test(bool value) {
  set_has_is_test();
  is_test_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.is_test)
}

// optional bool is_ping = 17 [default = false];
bool BidRequest::has_is_ping() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void BidRequest::set_has_is_ping() {
  _has_bits_[0] |= 0x20000000u;
}
void BidRequest::clear_has_is_ping() {
  _has_bits_[0] &= ~0x20000000u;
}
void BidRequest::clear_is_ping() {
  is_ping_ = false;
  clear_has_is_ping();
}
 bool BidRequest::is_ping() const {
  // @@protoc_insertion_point(field_get:BidRequest.is_ping)
  return is_ping_;
}
 void BidRequest::set_is_ping(bool value) {
  set_has_is_ping();
  is_ping_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.is_ping)
}

// optional bool is_predicted_to_be_ignored = 45 [default = false];
bool BidRequest::has_is_predicted_to_be_ignored() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void BidRequest::set_has_is_predicted_to_be_ignored() {
  _has_bits_[0] |= 0x40000000u;
}
void BidRequest::clear_has_is_predicted_to_be_ignored() {
  _has_bits_[0] &= ~0x40000000u;
}
void BidRequest::clear_is_predicted_to_be_ignored() {
  is_predicted_to_be_ignored_ = false;
  clear_has_is_predicted_to_be_ignored();
}
 bool BidRequest::is_predicted_to_be_ignored() const {
  // @@protoc_insertion_point(field_get:BidRequest.is_predicted_to_be_ignored)
  return is_predicted_to_be_ignored_;
}
 void BidRequest::set_is_predicted_to_be_ignored(bool value) {
  set_has_is_predicted_to_be_ignored();
  is_predicted_to_be_ignored_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.is_predicted_to_be_ignored)
}

// optional int32 DEPRECATED_protocol_version = 1;
bool BidRequest::has_deprecated_protocol_version() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void BidRequest::set_has_deprecated_protocol_version() {
  _has_bits_[0] |= 0x80000000u;
}
void BidRequest::clear_has_deprecated_protocol_version() {
  _has_bits_[0] &= ~0x80000000u;
}
void BidRequest::clear_deprecated_protocol_version() {
  deprecated_protocol_version_ = 0;
  clear_has_deprecated_protocol_version();
}
 ::google::protobuf::int32 BidRequest::deprecated_protocol_version() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_protocol_version)
  return deprecated_protocol_version_;
}
 void BidRequest::set_deprecated_protocol_version(::google::protobuf::int32 value) {
  set_has_deprecated_protocol_version();
  deprecated_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_protocol_version)
}

// optional string DEPRECATED_click_tracking_url = 3;
bool BidRequest::has_deprecated_click_tracking_url() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void BidRequest::set_has_deprecated_click_tracking_url() {
  _has_bits_[1] |= 0x00000001u;
}
void BidRequest::clear_has_deprecated_click_tracking_url() {
  _has_bits_[1] &= ~0x00000001u;
}
void BidRequest::clear_deprecated_click_tracking_url() {
  deprecated_click_tracking_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_click_tracking_url();
}
 const ::std::string& BidRequest::deprecated_click_tracking_url() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_click_tracking_url)
  return deprecated_click_tracking_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_deprecated_click_tracking_url(const ::std::string& value) {
  set_has_deprecated_click_tracking_url();
  deprecated_click_tracking_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_click_tracking_url)
}
 void BidRequest::set_deprecated_click_tracking_url(const char* value) {
  set_has_deprecated_click_tracking_url();
  deprecated_click_tracking_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_click_tracking_url)
}
 void BidRequest::set_deprecated_click_tracking_url(const char* value, size_t size) {
  set_has_deprecated_click_tracking_url();
  deprecated_click_tracking_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_click_tracking_url)
}
 ::std::string* BidRequest::mutable_deprecated_click_tracking_url() {
  set_has_deprecated_click_tracking_url();
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_click_tracking_url)
  return deprecated_click_tracking_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_deprecated_click_tracking_url() {
  clear_has_deprecated_click_tracking_url();
  return deprecated_click_tracking_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_deprecated_click_tracking_url(::std::string* deprecated_click_tracking_url) {
  if (deprecated_click_tracking_url != NULL) {
    set_has_deprecated_click_tracking_url();
  } else {
    clear_has_deprecated_click_tracking_url();
  }
  deprecated_click_tracking_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_click_tracking_url);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_click_tracking_url)
}

// optional uint64 DEPRECATED_cookie = 5;
bool BidRequest::has_deprecated_cookie() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void BidRequest::set_has_deprecated_cookie() {
  _has_bits_[1] |= 0x00000002u;
}
void BidRequest::clear_has_deprecated_cookie() {
  _has_bits_[1] &= ~0x00000002u;
}
void BidRequest::clear_deprecated_cookie() {
  deprecated_cookie_ = GOOGLE_ULONGLONG(0);
  clear_has_deprecated_cookie();
}
 ::google::protobuf::uint64 BidRequest::deprecated_cookie() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_cookie)
  return deprecated_cookie_;
}
 void BidRequest::set_deprecated_cookie(::google::protobuf::uint64 value) {
  set_has_deprecated_cookie();
  deprecated_cookie_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_cookie)
}

// optional string DEPRECATED_country = 7;
bool BidRequest::has_deprecated_country() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void BidRequest::set_has_deprecated_country() {
  _has_bits_[1] |= 0x00000004u;
}
void BidRequest::clear_has_deprecated_country() {
  _has_bits_[1] &= ~0x00000004u;
}
void BidRequest::clear_deprecated_country() {
  deprecated_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_country();
}
 const ::std::string& BidRequest::deprecated_country() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_country)
  return deprecated_country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_deprecated_country(const ::std::string& value) {
  set_has_deprecated_country();
  deprecated_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_country)
}
 void BidRequest::set_deprecated_country(const char* value) {
  set_has_deprecated_country();
  deprecated_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_country)
}
 void BidRequest::set_deprecated_country(const char* value, size_t size) {
  set_has_deprecated_country();
  deprecated_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_country)
}
 ::std::string* BidRequest::mutable_deprecated_country() {
  set_has_deprecated_country();
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_country)
  return deprecated_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_deprecated_country() {
  clear_has_deprecated_country();
  return deprecated_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_deprecated_country(::std::string* deprecated_country) {
  if (deprecated_country != NULL) {
    set_has_deprecated_country();
  } else {
    clear_has_deprecated_country();
  }
  deprecated_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_country);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_country)
}

// optional string DEPRECATED_region = 8;
bool BidRequest::has_deprecated_region() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void BidRequest::set_has_deprecated_region() {
  _has_bits_[1] |= 0x00000008u;
}
void BidRequest::clear_has_deprecated_region() {
  _has_bits_[1] &= ~0x00000008u;
}
void BidRequest::clear_deprecated_region() {
  deprecated_region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_region();
}
 const ::std::string& BidRequest::deprecated_region() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_region)
  return deprecated_region_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_deprecated_region(const ::std::string& value) {
  set_has_deprecated_region();
  deprecated_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_region)
}
 void BidRequest::set_deprecated_region(const char* value) {
  set_has_deprecated_region();
  deprecated_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_region)
}
 void BidRequest::set_deprecated_region(const char* value, size_t size) {
  set_has_deprecated_region();
  deprecated_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_region)
}
 ::std::string* BidRequest::mutable_deprecated_region() {
  set_has_deprecated_region();
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_region)
  return deprecated_region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_deprecated_region() {
  clear_has_deprecated_region();
  return deprecated_region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_deprecated_region(::std::string* deprecated_region) {
  if (deprecated_region != NULL) {
    set_has_deprecated_region();
  } else {
    clear_has_deprecated_region();
  }
  deprecated_region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_region);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_region)
}

// optional string DEPRECATED_city = 9;
bool BidRequest::has_deprecated_city() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void BidRequest::set_has_deprecated_city() {
  _has_bits_[1] |= 0x00000010u;
}
void BidRequest::clear_has_deprecated_city() {
  _has_bits_[1] &= ~0x00000010u;
}
void BidRequest::clear_deprecated_city() {
  deprecated_city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_city();
}
 const ::std::string& BidRequest::deprecated_city() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_city)
  return deprecated_city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_deprecated_city(const ::std::string& value) {
  set_has_deprecated_city();
  deprecated_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_city)
}
 void BidRequest::set_deprecated_city(const char* value) {
  set_has_deprecated_city();
  deprecated_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_city)
}
 void BidRequest::set_deprecated_city(const char* value, size_t size) {
  set_has_deprecated_city();
  deprecated_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_city)
}
 ::std::string* BidRequest::mutable_deprecated_city() {
  set_has_deprecated_city();
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_city)
  return deprecated_city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_deprecated_city() {
  clear_has_deprecated_city();
  return deprecated_city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_deprecated_city(::std::string* deprecated_city) {
  if (deprecated_city != NULL) {
    set_has_deprecated_city();
  } else {
    clear_has_deprecated_city();
  }
  deprecated_city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_city);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_city)
}

// optional int32 DEPRECATED_metro = 10;
bool BidRequest::has_deprecated_metro() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void BidRequest::set_has_deprecated_metro() {
  _has_bits_[1] |= 0x00000020u;
}
void BidRequest::clear_has_deprecated_metro() {
  _has_bits_[1] &= ~0x00000020u;
}
void BidRequest::clear_deprecated_metro() {
  deprecated_metro_ = 0;
  clear_has_deprecated_metro();
}
 ::google::protobuf::int32 BidRequest::deprecated_metro() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_metro)
  return deprecated_metro_;
}
 void BidRequest::set_deprecated_metro(::google::protobuf::int32 value) {
  set_has_deprecated_metro();
  deprecated_metro_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_metro)
}

// optional bytes DEPRECATED_hashed_cookie = 16;
bool BidRequest::has_deprecated_hashed_cookie() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void BidRequest::set_has_deprecated_hashed_cookie() {
  _has_bits_[1] |= 0x00000040u;
}
void BidRequest::clear_has_deprecated_hashed_cookie() {
  _has_bits_[1] &= ~0x00000040u;
}
void BidRequest::clear_deprecated_hashed_cookie() {
  deprecated_hashed_cookie_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_hashed_cookie();
}
 const ::std::string& BidRequest::deprecated_hashed_cookie() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_hashed_cookie)
  return deprecated_hashed_cookie_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_deprecated_hashed_cookie(const ::std::string& value) {
  set_has_deprecated_hashed_cookie();
  deprecated_hashed_cookie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_hashed_cookie)
}
 void BidRequest::set_deprecated_hashed_cookie(const char* value) {
  set_has_deprecated_hashed_cookie();
  deprecated_hashed_cookie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_hashed_cookie)
}
 void BidRequest::set_deprecated_hashed_cookie(const void* value, size_t size) {
  set_has_deprecated_hashed_cookie();
  deprecated_hashed_cookie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_hashed_cookie)
}
 ::std::string* BidRequest::mutable_deprecated_hashed_cookie() {
  set_has_deprecated_hashed_cookie();
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_hashed_cookie)
  return deprecated_hashed_cookie_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_deprecated_hashed_cookie() {
  clear_has_deprecated_hashed_cookie();
  return deprecated_hashed_cookie_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_deprecated_hashed_cookie(::std::string* deprecated_hashed_cookie) {
  if (deprecated_hashed_cookie != NULL) {
    set_has_deprecated_hashed_cookie();
  } else {
    clear_has_deprecated_hashed_cookie();
  }
  deprecated_hashed_cookie_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_hashed_cookie);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_hashed_cookie)
}

// repeated string DEPRECATED_excluded_click_through_url = 18;
int BidRequest::deprecated_excluded_click_through_url_size() const {
  return deprecated_excluded_click_through_url_.size();
}
void BidRequest::clear_deprecated_excluded_click_through_url() {
  deprecated_excluded_click_through_url_.Clear();
}
 const ::std::string& BidRequest::deprecated_excluded_click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_.Get(index);
}
 ::std::string* BidRequest::mutable_deprecated_excluded_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_.Mutable(index);
}
 void BidRequest::set_deprecated_excluded_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_excluded_click_through_url)
  deprecated_excluded_click_through_url_.Mutable(index)->assign(value);
}
 void BidRequest::set_deprecated_excluded_click_through_url(int index, const char* value) {
  deprecated_excluded_click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_excluded_click_through_url)
}
 void BidRequest::set_deprecated_excluded_click_through_url(int index, const char* value, size_t size) {
  deprecated_excluded_click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_excluded_click_through_url)
}
 ::std::string* BidRequest::add_deprecated_excluded_click_through_url() {
  return deprecated_excluded_click_through_url_.Add();
}
 void BidRequest::add_deprecated_excluded_click_through_url(const ::std::string& value) {
  deprecated_excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.DEPRECATED_excluded_click_through_url)
}
 void BidRequest::add_deprecated_excluded_click_through_url(const char* value) {
  deprecated_excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.DEPRECATED_excluded_click_through_url)
}
 void BidRequest::add_deprecated_excluded_click_through_url(const char* value, size_t size) {
  deprecated_excluded_click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.DEPRECATED_excluded_click_through_url)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::deprecated_excluded_click_through_url() const {
  // @@protoc_insertion_point(field_list:BidRequest.DEPRECATED_excluded_click_through_url)
  return deprecated_excluded_click_through_url_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_deprecated_excluded_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.DEPRECATED_excluded_click_through_url)
  return &deprecated_excluded_click_through_url_;
}

// optional string DEPRECATED_seller_network = 22;
bool BidRequest::has_deprecated_seller_network() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void BidRequest::set_has_deprecated_seller_network() {
  _has_bits_[1] |= 0x00000100u;
}
void BidRequest::clear_has_deprecated_seller_network() {
  _has_bits_[1] &= ~0x00000100u;
}
void BidRequest::clear_deprecated_seller_network() {
  deprecated_seller_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_seller_network();
}
 const ::std::string& BidRequest::deprecated_seller_network() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_seller_network)
  return deprecated_seller_network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_deprecated_seller_network(const ::std::string& value) {
  set_has_deprecated_seller_network();
  deprecated_seller_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_seller_network)
}
 void BidRequest::set_deprecated_seller_network(const char* value) {
  set_has_deprecated_seller_network();
  deprecated_seller_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_seller_network)
}
 void BidRequest::set_deprecated_seller_network(const char* value, size_t size) {
  set_has_deprecated_seller_network();
  deprecated_seller_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_seller_network)
}
 ::std::string* BidRequest::mutable_deprecated_seller_network() {
  set_has_deprecated_seller_network();
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_seller_network)
  return deprecated_seller_network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_deprecated_seller_network() {
  clear_has_deprecated_seller_network();
  return deprecated_seller_network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_deprecated_seller_network(::std::string* deprecated_seller_network) {
  if (deprecated_seller_network != NULL) {
    set_has_deprecated_seller_network();
  } else {
    clear_has_deprecated_seller_network();
  }
  deprecated_seller_network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_seller_network);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_seller_network)
}

// optional bytes DEPRECATED_publisher_settings_list_id = 23;
bool BidRequest::has_deprecated_publisher_settings_list_id() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void BidRequest::set_has_deprecated_publisher_settings_list_id() {
  _has_bits_[1] |= 0x00000200u;
}
void BidRequest::clear_has_deprecated_publisher_settings_list_id() {
  _has_bits_[1] &= ~0x00000200u;
}
void BidRequest::clear_deprecated_publisher_settings_list_id() {
  deprecated_publisher_settings_list_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_publisher_settings_list_id();
}
 const ::std::string& BidRequest::deprecated_publisher_settings_list_id() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_publisher_settings_list_id)
  return deprecated_publisher_settings_list_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_deprecated_publisher_settings_list_id(const ::std::string& value) {
  set_has_deprecated_publisher_settings_list_id();
  deprecated_publisher_settings_list_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_publisher_settings_list_id)
}
 void BidRequest::set_deprecated_publisher_settings_list_id(const char* value) {
  set_has_deprecated_publisher_settings_list_id();
  deprecated_publisher_settings_list_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.DEPRECATED_publisher_settings_list_id)
}
 void BidRequest::set_deprecated_publisher_settings_list_id(const void* value, size_t size) {
  set_has_deprecated_publisher_settings_list_id();
  deprecated_publisher_settings_list_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.DEPRECATED_publisher_settings_list_id)
}
 ::std::string* BidRequest::mutable_deprecated_publisher_settings_list_id() {
  set_has_deprecated_publisher_settings_list_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_publisher_settings_list_id)
  return deprecated_publisher_settings_list_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_deprecated_publisher_settings_list_id() {
  clear_has_deprecated_publisher_settings_list_id();
  return deprecated_publisher_settings_list_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_deprecated_publisher_settings_list_id(::std::string* deprecated_publisher_settings_list_id) {
  if (deprecated_publisher_settings_list_id != NULL) {
    set_has_deprecated_publisher_settings_list_id();
  } else {
    clear_has_deprecated_publisher_settings_list_id();
  }
  deprecated_publisher_settings_list_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_publisher_settings_list_id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.DEPRECATED_publisher_settings_list_id)
}

// repeated .BidRequest.MatchingNetwork DEPRECATED_matching_network = 27;
int BidRequest::deprecated_matching_network_size() const {
  return deprecated_matching_network_.size();
}
void BidRequest::clear_deprecated_matching_network() {
  deprecated_matching_network_.Clear();
}
const ::BidRequest_MatchingNetwork& BidRequest::deprecated_matching_network(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_matching_network)
  return deprecated_matching_network_.Get(index);
}
::BidRequest_MatchingNetwork* BidRequest::mutable_deprecated_matching_network(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.DEPRECATED_matching_network)
  return deprecated_matching_network_.Mutable(index);
}
::BidRequest_MatchingNetwork* BidRequest::add_deprecated_matching_network() {
  // @@protoc_insertion_point(field_add:BidRequest.DEPRECATED_matching_network)
  return deprecated_matching_network_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidRequest_MatchingNetwork >*
BidRequest::mutable_deprecated_matching_network() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.DEPRECATED_matching_network)
  return &deprecated_matching_network_;
}
const ::google::protobuf::RepeatedPtrField< ::BidRequest_MatchingNetwork >&
BidRequest::deprecated_matching_network() const {
  // @@protoc_insertion_point(field_list:BidRequest.DEPRECATED_matching_network)
  return deprecated_matching_network_;
}

// optional bool DEPRECATED_experimental_deadline = 35 [default = false];
bool BidRequest::has_deprecated_experimental_deadline() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void BidRequest::set_has_deprecated_experimental_deadline() {
  _has_bits_[1] |= 0x00000800u;
}
void BidRequest::clear_has_deprecated_experimental_deadline() {
  _has_bits_[1] &= ~0x00000800u;
}
void BidRequest::clear_deprecated_experimental_deadline() {
  deprecated_experimental_deadline_ = false;
  clear_has_deprecated_experimental_deadline();
}
 bool BidRequest::deprecated_experimental_deadline() const {
  // @@protoc_insertion_point(field_get:BidRequest.DEPRECATED_experimental_deadline)
  return deprecated_experimental_deadline_;
}
 void BidRequest::set_deprecated_experimental_deadline(bool value) {
  set_has_deprecated_experimental_deadline();
  deprecated_experimental_deadline_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.DEPRECATED_experimental_deadline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ad_TemplateParameter::kParameterValueFieldNumber;
const int BidResponse_Ad_TemplateParameter::kBlankAdParameterValueFieldNumber;
const int BidResponse_Ad_TemplateParameter::kBuyerCreativeIdFieldNumber;
const int BidResponse_Ad_TemplateParameter::kClickThroughUrlFieldNumber;
const int BidResponse_Ad_TemplateParameter::kLeftFieldNumber;
const int BidResponse_Ad_TemplateParameter::kRightFieldNumber;
const int BidResponse_Ad_TemplateParameter::kTopFieldNumber;
const int BidResponse_Ad_TemplateParameter::kBottomFieldNumber;
const int BidResponse_Ad_TemplateParameter::kBackupIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ad_TemplateParameter::BidResponse_Ad_TemplateParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad.TemplateParameter)
}

void BidResponse_Ad_TemplateParameter::InitAsDefaultInstance() {
}

BidResponse_Ad_TemplateParameter::BidResponse_Ad_TemplateParameter(const BidResponse_Ad_TemplateParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad.TemplateParameter)
}

void BidResponse_Ad_TemplateParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parameter_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blank_ad_parameter_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyer_creative_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  click_through_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  backup_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_TemplateParameter::~BidResponse_Ad_TemplateParameter() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad.TemplateParameter)
  SharedDtor();
}

void BidResponse_Ad_TemplateParameter::SharedDtor() {
  parameter_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blank_ad_parameter_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyer_creative_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  click_through_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_TemplateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_TemplateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_TemplateParameter_descriptor_;
}

const BidResponse_Ad_TemplateParameter& BidResponse_Ad_TemplateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_TemplateParameter* BidResponse_Ad_TemplateParameter::default_instance_ = NULL;

BidResponse_Ad_TemplateParameter* BidResponse_Ad_TemplateParameter::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ad_TemplateParameter* n = new BidResponse_Ad_TemplateParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ad_TemplateParameter::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_Ad_TemplateParameter*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(left_, bottom_);
    if (has_parameter_value()) {
      parameter_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_blank_ad_parameter_value()) {
      blank_ad_parameter_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_buyer_creative_id()) {
      buyer_creative_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_click_through_url()) {
      click_through_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  backup_index_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ad_TemplateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad.TemplateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parameter_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameter_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parameter_value().data(), this->parameter_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.TemplateParameter.parameter_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyer_creative_id;
        break;
      }

      // optional string buyer_creative_id = 2;
      case 2: {
        if (tag == 18) {
         parse_buyer_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyer_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyer_creative_id().data(), this->buyer_creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.TemplateParameter.buyer_creative_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_click_through_url;
        break;
      }

      // optional string click_through_url = 3;
      case 3: {
        if (tag == 26) {
         parse_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_through_url().data(), this->click_through_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.TemplateParameter.click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_left;
        break;
      }

      // optional int32 left = 4;
      case 4: {
        if (tag == 32) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_right;
        break;
      }

      // optional int32 right = 5;
      case 5: {
        if (tag == 40) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_top;
        break;
      }

      // optional int32 top = 6;
      case 6: {
        if (tag == 48) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bottom;
        break;
      }

      // optional int32 bottom = 7;
      case 7: {
        if (tag == 56) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_blank_ad_parameter_value;
        break;
      }

      // optional string blank_ad_parameter_value = 8;
      case 8: {
        if (tag == 66) {
         parse_blank_ad_parameter_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blank_ad_parameter_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blank_ad_parameter_value().data(), this->blank_ad_parameter_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.TemplateParameter.blank_ad_parameter_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_backup_index;
        break;
      }

      // optional int32 backup_index = 9;
      case 9: {
        if (tag == 72) {
         parse_backup_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backup_index_)));
          set_has_backup_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad.TemplateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad.TemplateParameter)
  return false;
#undef DO_
}

void BidResponse_Ad_TemplateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad.TemplateParameter)
  // optional string parameter_value = 1;
  if (has_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameter_value().data(), this->parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.TemplateParameter.parameter_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parameter_value(), output);
  }

  // optional string buyer_creative_id = 2;
  if (has_buyer_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_creative_id().data(), this->buyer_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.TemplateParameter.buyer_creative_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buyer_creative_id(), output);
  }

  // optional string click_through_url = 3;
  if (has_click_through_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url().data(), this->click_through_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.TemplateParameter.click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->click_through_url(), output);
  }

  // optional int32 left = 4;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left(), output);
  }

  // optional int32 right = 5;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->right(), output);
  }

  // optional int32 top = 6;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->top(), output);
  }

  // optional int32 bottom = 7;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bottom(), output);
  }

  // optional string blank_ad_parameter_value = 8;
  if (has_blank_ad_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blank_ad_parameter_value().data(), this->blank_ad_parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.TemplateParameter.blank_ad_parameter_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->blank_ad_parameter_value(), output);
  }

  // optional int32 backup_index = 9;
  if (has_backup_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->backup_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad.TemplateParameter)
}

::google::protobuf::uint8* BidResponse_Ad_TemplateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad.TemplateParameter)
  // optional string parameter_value = 1;
  if (has_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameter_value().data(), this->parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.TemplateParameter.parameter_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parameter_value(), target);
  }

  // optional string buyer_creative_id = 2;
  if (has_buyer_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_creative_id().data(), this->buyer_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.TemplateParameter.buyer_creative_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buyer_creative_id(), target);
  }

  // optional string click_through_url = 3;
  if (has_click_through_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url().data(), this->click_through_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.TemplateParameter.click_through_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->click_through_url(), target);
  }

  // optional int32 left = 4;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left(), target);
  }

  // optional int32 right = 5;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->right(), target);
  }

  // optional int32 top = 6;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->top(), target);
  }

  // optional int32 bottom = 7;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bottom(), target);
  }

  // optional string blank_ad_parameter_value = 8;
  if (has_blank_ad_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blank_ad_parameter_value().data(), this->blank_ad_parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.TemplateParameter.blank_ad_parameter_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->blank_ad_parameter_value(), target);
  }

  // optional int32 backup_index = 9;
  if (has_backup_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->backup_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad.TemplateParameter)
  return target;
}

int BidResponse_Ad_TemplateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string parameter_value = 1;
    if (has_parameter_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameter_value());
    }

    // optional string blank_ad_parameter_value = 8;
    if (has_blank_ad_parameter_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blank_ad_parameter_value());
    }

    // optional string buyer_creative_id = 2;
    if (has_buyer_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyer_creative_id());
    }

    // optional string click_through_url = 3;
    if (has_click_through_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->click_through_url());
    }

    // optional int32 left = 4;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // optional int32 right = 5;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // optional int32 top = 6;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // optional int32 bottom = 7;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }

  }
  // optional int32 backup_index = 9;
  if (has_backup_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->backup_index());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_TemplateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidResponse_Ad_TemplateParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ad_TemplateParameter>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad_TemplateParameter::MergeFrom(const BidResponse_Ad_TemplateParameter& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parameter_value()) {
      set_has_parameter_value();
      parameter_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameter_value_);
    }
    if (from.has_blank_ad_parameter_value()) {
      set_has_blank_ad_parameter_value();
      blank_ad_parameter_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blank_ad_parameter_value_);
    }
    if (from.has_buyer_creative_id()) {
      set_has_buyer_creative_id();
      buyer_creative_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_creative_id_);
    }
    if (from.has_click_through_url()) {
      set_has_click_through_url();
      click_through_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.click_through_url_);
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_backup_index()) {
      set_backup_index(from.backup_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ad_TemplateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_TemplateParameter::CopyFrom(const BidResponse_Ad_TemplateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_TemplateParameter::IsInitialized() const {

  return true;
}

void BidResponse_Ad_TemplateParameter::Swap(BidResponse_Ad_TemplateParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ad_TemplateParameter::InternalSwap(BidResponse_Ad_TemplateParameter* other) {
  parameter_value_.Swap(&other->parameter_value_);
  blank_ad_parameter_value_.Swap(&other->blank_ad_parameter_value_);
  buyer_creative_id_.Swap(&other->buyer_creative_id_);
  click_through_url_.Swap(&other->click_through_url_);
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  std::swap(top_, other->top_);
  std::swap(bottom_, other->bottom_);
  std::swap(backup_index_, other->backup_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_Ad_TemplateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_TemplateParameter_descriptor_;
  metadata.reflection = BidResponse_Ad_TemplateParameter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ad_AdSlot::kIdFieldNumber;
const int BidResponse_Ad_AdSlot::kMaxCpmMicrosFieldNumber;
const int BidResponse_Ad_AdSlot::kMinCpmMicrosFieldNumber;
const int BidResponse_Ad_AdSlot::kAdgroupIdFieldNumber;
const int BidResponse_Ad_AdSlot::kDealIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ad_AdSlot::BidResponse_Ad_AdSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad.AdSlot)
}

void BidResponse_Ad_AdSlot::InitAsDefaultInstance() {
}

BidResponse_Ad_AdSlot::BidResponse_Ad_AdSlot(const BidResponse_Ad_AdSlot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad.AdSlot)
}

void BidResponse_Ad_AdSlot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  max_cpm_micros_ = GOOGLE_LONGLONG(0);
  min_cpm_micros_ = GOOGLE_LONGLONG(0);
  adgroup_id_ = GOOGLE_LONGLONG(0);
  deal_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_AdSlot::~BidResponse_Ad_AdSlot() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad.AdSlot)
  SharedDtor();
}

void BidResponse_Ad_AdSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_AdSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_AdSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_AdSlot_descriptor_;
}

const BidResponse_Ad_AdSlot& BidResponse_Ad_AdSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_AdSlot* BidResponse_Ad_AdSlot::default_instance_ = NULL;

BidResponse_Ad_AdSlot* BidResponse_Ad_AdSlot::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ad_AdSlot* n = new BidResponse_Ad_AdSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ad_AdSlot::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_Ad_AdSlot*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(max_cpm_micros_, id_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ad_AdSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad.AdSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_cpm_micros;
        break;
      }

      // required int64 max_cpm_micros = 2;
      case 2: {
        if (tag == 16) {
         parse_max_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_cpm_micros_)));
          set_has_max_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_cpm_micros;
        break;
      }

      // optional int64 min_cpm_micros = 3;
      case 3: {
        if (tag == 24) {
         parse_min_cpm_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_cpm_micros_)));
          set_has_min_cpm_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adgroup_id;
        break;
      }

      // optional int64 adgroup_id = 4;
      case 4: {
        if (tag == 32) {
         parse_adgroup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &adgroup_id_)));
          set_has_adgroup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deal_id;
        break;
      }

      // optional int64 deal_id = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_deal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deal_id_)));
          set_has_deal_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad.AdSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad.AdSlot)
  return false;
#undef DO_
}

void BidResponse_Ad_AdSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad.AdSlot)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 max_cpm_micros = 2;
  if (has_max_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_cpm_micros(), output);
  }

  // optional int64 min_cpm_micros = 3;
  if (has_min_cpm_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->min_cpm_micros(), output);
  }

  // optional int64 adgroup_id = 4;
  if (has_adgroup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->adgroup_id(), output);
  }

  // optional int64 deal_id = 5 [default = 0];
  if (has_deal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->deal_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad.AdSlot)
}

::google::protobuf::uint8* BidResponse_Ad_AdSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad.AdSlot)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 max_cpm_micros = 2;
  if (has_max_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_cpm_micros(), target);
  }

  // optional int64 min_cpm_micros = 3;
  if (has_min_cpm_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->min_cpm_micros(), target);
  }

  // optional int64 adgroup_id = 4;
  if (has_adgroup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->adgroup_id(), target);
  }

  // optional int64 deal_id = 5 [default = 0];
  if (has_deal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->deal_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad.AdSlot)
  return target;
}

int BidResponse_Ad_AdSlot::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_max_cpm_micros()) {
    // required int64 max_cpm_micros = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_cpm_micros());
  }

  return total_size;
}
int BidResponse_Ad_AdSlot::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int64 max_cpm_micros = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_cpm_micros());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional int64 min_cpm_micros = 3;
    if (has_min_cpm_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_cpm_micros());
    }

    // optional int64 adgroup_id = 4;
    if (has_adgroup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->adgroup_id());
    }

    // optional int64 deal_id = 5 [default = 0];
    if (has_deal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deal_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_AdSlot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidResponse_Ad_AdSlot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ad_AdSlot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad_AdSlot::MergeFrom(const BidResponse_Ad_AdSlot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_max_cpm_micros()) {
      set_max_cpm_micros(from.max_cpm_micros());
    }
    if (from.has_min_cpm_micros()) {
      set_min_cpm_micros(from.min_cpm_micros());
    }
    if (from.has_adgroup_id()) {
      set_adgroup_id(from.adgroup_id());
    }
    if (from.has_deal_id()) {
      set_deal_id(from.deal_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ad_AdSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_AdSlot::CopyFrom(const BidResponse_Ad_AdSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_AdSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidResponse_Ad_AdSlot::Swap(BidResponse_Ad_AdSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ad_AdSlot::InternalSwap(BidResponse_Ad_AdSlot* other) {
  std::swap(id_, other->id_);
  std::swap(max_cpm_micros_, other->max_cpm_micros_);
  std::swap(min_cpm_micros_, other->min_cpm_micros_);
  std::swap(adgroup_id_, other->adgroup_id_);
  std::swap(deal_id_, other->deal_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_Ad_AdSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_AdSlot_descriptor_;
  metadata.reflection = BidResponse_Ad_AdSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ad::kBuyerCreativeIdFieldNumber;
const int BidResponse_Ad::kHtmlSnippetFieldNumber;
const int BidResponse_Ad::kVideoUrlFieldNumber;
const int BidResponse_Ad::kSnippetTemplateFieldNumber;
const int BidResponse_Ad::kTemplateParameterFieldNumber;
const int BidResponse_Ad::kClickThroughUrlFieldNumber;
const int BidResponse_Ad::kVendorTypeFieldNumber;
const int BidResponse_Ad::kAttributeFieldNumber;
const int BidResponse_Ad::kCategoryFieldNumber;
const int BidResponse_Ad::kRestrictedCategoryFieldNumber;
const int BidResponse_Ad::kAdvertiserNameFieldNumber;
const int BidResponse_Ad::kWidthFieldNumber;
const int BidResponse_Ad::kHeightFieldNumber;
const int BidResponse_Ad::kAgencyIdFieldNumber;
const int BidResponse_Ad::kAdslotFieldNumber;
const int BidResponse_Ad::kDEPRECATEDCreativeIdFieldNumber;
const int BidResponse_Ad::kDEPRECATEDClickThroughUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ad::BidResponse_Ad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse.Ad)
}

void BidResponse_Ad::InitAsDefaultInstance() {
}

BidResponse_Ad::BidResponse_Ad(const BidResponse_Ad& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse.Ad)
}

void BidResponse_Ad::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buyer_creative_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  agency_id_ = GOOGLE_LONGLONG(0);
  deprecated_creative_id_ = GOOGLE_LONGLONG(0);
  deprecated_click_through_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad::~BidResponse_Ad() {
  // @@protoc_insertion_point(destructor:BidResponse.Ad)
  SharedDtor();
}

void BidResponse_Ad::SharedDtor() {
  buyer_creative_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_click_through_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse_Ad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_descriptor_;
}

const BidResponse_Ad& BidResponse_Ad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad* BidResponse_Ad::default_instance_ = NULL;

BidResponse_Ad* BidResponse_Ad::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ad* n = new BidResponse_Ad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ad::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_Ad*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    if (has_buyer_creative_id()) {
      buyer_creative_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_html_snippet()) {
      html_snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_video_url()) {
      video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_snippet_template()) {
      snippet_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 47104u) {
    ZR_(width_, agency_id_);
    deprecated_creative_id_ = GOOGLE_LONGLONG(0);
  }
  if (has_deprecated_click_through_url()) {
    deprecated_click_through_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  template_parameter_.Clear();
  click_through_url_.Clear();
  vendor_type_.Clear();
  attribute_.Clear();
  category_.Clear();
  restricted_category_.Clear();
  advertiser_name_.Clear();
  adslot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse.Ad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string html_snippet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html_snippet().data(), this->html_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.html_snippet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DEPRECATED_click_through_url;
        break;
      }

      // optional string DEPRECATED_click_through_url = 2;
      case 2: {
        if (tag == 18) {
         parse_DEPRECATED_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_click_through_url().data(), this->deprecated_click_through_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.DEPRECATED_click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_adslot;
        break;
      }

      // repeated .BidResponse.Ad.AdSlot adslot = 3;
      case 3: {
        if (tag == 26) {
         parse_adslot:
          DO_(input->IncrementRecursionDepth());
         parse_loop_adslot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adslot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_adslot;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_click_through_url;
        break;
      }

      // repeated string click_through_url = 4;
      case 4: {
        if (tag == 34) {
         parse_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_through_url(this->click_through_url_size() - 1).data(),
            this->click_through_url(this->click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_click_through_url;
        if (input->ExpectTag(40)) goto parse_vendor_type;
        break;
      }

      // repeated int32 vendor_type = 5;
      case 5: {
        if (tag == 40) {
         parse_vendor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_vendor_type())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vendor_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vendor_type;
        if (input->ExpectTag(48)) goto parse_attribute;
        break;
      }

      // repeated int32 attribute = 6;
      case 6: {
        if (tag == 48) {
         parse_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_attribute())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attribute())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attribute;
        if (input->ExpectTag(56)) goto parse_category;
        break;
      }

      // repeated int32 category = 7;
      case 7: {
        if (tag == 56) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_category())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_category;
        if (input->ExpectTag(64)) goto parse_DEPRECATED_creative_id;
        break;
      }

      // optional int64 DEPRECATED_creative_id = 8;
      case 8: {
        if (tag == 64) {
         parse_DEPRECATED_creative_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_creative_id_)));
          set_has_deprecated_creative_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_video_url;
        break;
      }

      // optional string video_url = 9;
      case 9: {
        if (tag == 74) {
         parse_video_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), this->video_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.video_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_buyer_creative_id;
        break;
      }

      // optional string buyer_creative_id = 10;
      case 10: {
        if (tag == 82) {
         parse_buyer_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyer_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyer_creative_id().data(), this->buyer_creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.buyer_creative_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_advertiser_name;
        break;
      }

      // repeated string advertiser_name = 11;
      case 11: {
        if (tag == 90) {
         parse_advertiser_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_advertiser_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->advertiser_name(this->advertiser_name_size() - 1).data(),
            this->advertiser_name(this->advertiser_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.advertiser_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_advertiser_name;
        if (input->ExpectTag(98)) goto parse_snippet_template;
        break;
      }

      // optional string snippet_template = 12;
      case 12: {
        if (tag == 98) {
         parse_snippet_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet_template()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snippet_template().data(), this->snippet_template().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.Ad.snippet_template");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_template_parameter;
        break;
      }

      // repeated .BidResponse.Ad.TemplateParameter template_parameter = 13;
      case 13: {
        if (tag == 106) {
         parse_template_parameter:
          DO_(input->IncrementRecursionDepth());
         parse_loop_template_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_template_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_template_parameter;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(112)) goto parse_width;
        break;
      }

      // optional int32 width = 14;
      case 14: {
        if (tag == 112) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_height;
        break;
      }

      // optional int32 height = 15;
      case 15: {
        if (tag == 120) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_agency_id;
        break;
      }

      // optional int64 agency_id = 16;
      case 16: {
        if (tag == 128) {
         parse_agency_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &agency_id_)));
          set_has_agency_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_restricted_category;
        break;
      }

      // repeated int32 restricted_category = 17;
      case 17: {
        if (tag == 136) {
         parse_restricted_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_restricted_category())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_restricted_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_restricted_category;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse.Ad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse.Ad)
  return false;
#undef DO_
}

void BidResponse_Ad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse.Ad)
  // optional string html_snippet = 1;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.html_snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->html_snippet(), output);
  }

  // optional string DEPRECATED_click_through_url = 2;
  if (has_deprecated_click_through_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_click_through_url().data(), this->deprecated_click_through_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.DEPRECATED_click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deprecated_click_through_url(), output);
  }

  // repeated .BidResponse.Ad.AdSlot adslot = 3;
  for (unsigned int i = 0, n = this->adslot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->adslot(i), output);
  }

  // repeated string click_through_url = 4;
  for (int i = 0; i < this->click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url(i).data(), this->click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->click_through_url(i), output);
  }

  // repeated int32 vendor_type = 5;
  for (int i = 0; i < this->vendor_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->vendor_type(i), output);
  }

  // repeated int32 attribute = 6;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->attribute(i), output);
  }

  // repeated int32 category = 7;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->category(i), output);
  }

  // optional int64 DEPRECATED_creative_id = 8;
  if (has_deprecated_creative_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->deprecated_creative_id(), output);
  }

  // optional string video_url = 9;
  if (has_video_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), this->video_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->video_url(), output);
  }

  // optional string buyer_creative_id = 10;
  if (has_buyer_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_creative_id().data(), this->buyer_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.buyer_creative_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->buyer_creative_id(), output);
  }

  // repeated string advertiser_name = 11;
  for (int i = 0; i < this->advertiser_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advertiser_name(i).data(), this->advertiser_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.advertiser_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->advertiser_name(i), output);
  }

  // optional string snippet_template = 12;
  if (has_snippet_template()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet_template().data(), this->snippet_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.snippet_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->snippet_template(), output);
  }

  // repeated .BidResponse.Ad.TemplateParameter template_parameter = 13;
  for (unsigned int i = 0, n = this->template_parameter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->template_parameter(i), output);
  }

  // optional int32 width = 14;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->width(), output);
  }

  // optional int32 height = 15;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->height(), output);
  }

  // optional int64 agency_id = 16;
  if (has_agency_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->agency_id(), output);
  }

  // repeated int32 restricted_category = 17;
  for (int i = 0; i < this->restricted_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->restricted_category(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse.Ad)
}

::google::protobuf::uint8* BidResponse_Ad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse.Ad)
  // optional string html_snippet = 1;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.html_snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->html_snippet(), target);
  }

  // optional string DEPRECATED_click_through_url = 2;
  if (has_deprecated_click_through_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_click_through_url().data(), this->deprecated_click_through_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.DEPRECATED_click_through_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deprecated_click_through_url(), target);
  }

  // repeated .BidResponse.Ad.AdSlot adslot = 3;
  for (unsigned int i = 0, n = this->adslot_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->adslot(i), target);
  }

  // repeated string click_through_url = 4;
  for (int i = 0; i < this->click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url(i).data(), this->click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->click_through_url(i), target);
  }

  // repeated int32 vendor_type = 5;
  for (int i = 0; i < this->vendor_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->vendor_type(i), target);
  }

  // repeated int32 attribute = 6;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->attribute(i), target);
  }

  // repeated int32 category = 7;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->category(i), target);
  }

  // optional int64 DEPRECATED_creative_id = 8;
  if (has_deprecated_creative_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->deprecated_creative_id(), target);
  }

  // optional string video_url = 9;
  if (has_video_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), this->video_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->video_url(), target);
  }

  // optional string buyer_creative_id = 10;
  if (has_buyer_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_creative_id().data(), this->buyer_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.buyer_creative_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->buyer_creative_id(), target);
  }

  // repeated string advertiser_name = 11;
  for (int i = 0; i < this->advertiser_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advertiser_name(i).data(), this->advertiser_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.advertiser_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->advertiser_name(i), target);
  }

  // optional string snippet_template = 12;
  if (has_snippet_template()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet_template().data(), this->snippet_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.Ad.snippet_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->snippet_template(), target);
  }

  // repeated .BidResponse.Ad.TemplateParameter template_parameter = 13;
  for (unsigned int i = 0, n = this->template_parameter_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->template_parameter(i), target);
  }

  // optional int32 width = 14;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->width(), target);
  }

  // optional int32 height = 15;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->height(), target);
  }

  // optional int64 agency_id = 16;
  if (has_agency_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->agency_id(), target);
  }

  // repeated int32 restricted_category = 17;
  for (int i = 0; i < this->restricted_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->restricted_category(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse.Ad)
  return target;
}

int BidResponse_Ad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string buyer_creative_id = 10;
    if (has_buyer_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyer_creative_id());
    }

    // optional string html_snippet = 1;
    if (has_html_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->html_snippet());
    }

    // optional string video_url = 9;
    if (has_video_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_url());
    }

    // optional string snippet_template = 12;
    if (has_snippet_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snippet_template());
    }

  }
  if (_has_bits_[11 / 32] & 47104u) {
    // optional int32 width = 14;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 15;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int64 agency_id = 16;
    if (has_agency_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->agency_id());
    }

    // optional int64 DEPRECATED_creative_id = 8;
    if (has_deprecated_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_creative_id());
    }

  }
  // optional string DEPRECATED_click_through_url = 2;
  if (has_deprecated_click_through_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deprecated_click_through_url());
  }

  // repeated .BidResponse.Ad.TemplateParameter template_parameter = 13;
  total_size += 1 * this->template_parameter_size();
  for (int i = 0; i < this->template_parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->template_parameter(i));
  }

  // repeated string click_through_url = 4;
  total_size += 1 * this->click_through_url_size();
  for (int i = 0; i < this->click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_through_url(i));
  }

  // repeated int32 vendor_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->vendor_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vendor_type(i));
    }
    total_size += 1 * this->vendor_type_size() + data_size;
  }

  // repeated int32 attribute = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attribute(i));
    }
    total_size += 1 * this->attribute_size() + data_size;
  }

  // repeated int32 category = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  // repeated int32 restricted_category = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->restricted_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->restricted_category(i));
    }
    total_size += 2 * this->restricted_category_size() + data_size;
  }

  // repeated string advertiser_name = 11;
  total_size += 1 * this->advertiser_name_size();
  for (int i = 0; i < this->advertiser_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->advertiser_name(i));
  }

  // repeated .BidResponse.Ad.AdSlot adslot = 3;
  total_size += 1 * this->adslot_size();
  for (int i = 0; i < this->adslot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adslot(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidResponse_Ad* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ad>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Ad::MergeFrom(const BidResponse_Ad& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  template_parameter_.MergeFrom(from.template_parameter_);
  click_through_url_.MergeFrom(from.click_through_url_);
  vendor_type_.MergeFrom(from.vendor_type_);
  attribute_.MergeFrom(from.attribute_);
  category_.MergeFrom(from.category_);
  restricted_category_.MergeFrom(from.restricted_category_);
  advertiser_name_.MergeFrom(from.advertiser_name_);
  adslot_.MergeFrom(from.adslot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyer_creative_id()) {
      set_has_buyer_creative_id();
      buyer_creative_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_creative_id_);
    }
    if (from.has_html_snippet()) {
      set_has_html_snippet();
      html_snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_snippet_);
    }
    if (from.has_video_url()) {
      set_has_video_url();
      video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
    }
    if (from.has_snippet_template()) {
      set_has_snippet_template();
      snippet_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_template_);
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_agency_id()) {
      set_agency_id(from.agency_id());
    }
    if (from.has_deprecated_creative_id()) {
      set_deprecated_creative_id(from.deprecated_creative_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_deprecated_click_through_url()) {
      set_has_deprecated_click_through_url();
      deprecated_click_through_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_click_through_url_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad::CopyFrom(const BidResponse_Ad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->adslot())) return false;
  return true;
}

void BidResponse_Ad::Swap(BidResponse_Ad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ad::InternalSwap(BidResponse_Ad* other) {
  buyer_creative_id_.Swap(&other->buyer_creative_id_);
  html_snippet_.Swap(&other->html_snippet_);
  video_url_.Swap(&other->video_url_);
  snippet_template_.Swap(&other->snippet_template_);
  template_parameter_.UnsafeArenaSwap(&other->template_parameter_);
  click_through_url_.UnsafeArenaSwap(&other->click_through_url_);
  vendor_type_.UnsafeArenaSwap(&other->vendor_type_);
  attribute_.UnsafeArenaSwap(&other->attribute_);
  category_.UnsafeArenaSwap(&other->category_);
  restricted_category_.UnsafeArenaSwap(&other->restricted_category_);
  advertiser_name_.UnsafeArenaSwap(&other->advertiser_name_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(agency_id_, other->agency_id_);
  adslot_.UnsafeArenaSwap(&other->adslot_);
  std::swap(deprecated_creative_id_, other->deprecated_creative_id_);
  deprecated_click_through_url_.Swap(&other->deprecated_click_through_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_Ad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_descriptor_;
  metadata.reflection = BidResponse_Ad_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse::kAdFieldNumber;
const int BidResponse::kDebugStringFieldNumber;
const int BidResponse::kProcessingTimeMsFieldNumber;
const int BidResponse::kDEPRECATEDProtocolVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse::BidResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  debug_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_time_ms_ = 0;
  deprecated_protocol_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  debug_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_2dbidding_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New(::google::protobuf::Arena* arena) const {
  BidResponse* n = new BidResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 14u) {
    ZR_(processing_time_ms_, deprecated_protocol_version_);
    if (has_debug_string()) {
      debug_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DEPRECATED_protocol_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_protocol_version_)));
          set_has_deprecated_protocol_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ad;
        break;
      }

      // repeated .BidResponse.Ad ad = 2;
      case 2: {
        if (tag == 18) {
         parse_ad:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_ad;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_processing_time_ms;
        break;
      }

      // optional int32 processing_time_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processing_time_ms_)));
          set_has_processing_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_debug_string;
        break;
      }

      // optional string debug_string = 5;
      case 5: {
        if (tag == 42) {
         parse_debug_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_string().data(), this->debug_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.debug_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse)
  // optional int32 DEPRECATED_protocol_version = 1;
  if (has_deprecated_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deprecated_protocol_version(), output);
  }

  // repeated .BidResponse.Ad ad = 2;
  for (unsigned int i = 0, n = this->ad_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ad(i), output);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->processing_time_ms(), output);
  }

  // optional string debug_string = 5;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.debug_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->debug_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse)
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse)
  // optional int32 DEPRECATED_protocol_version = 1;
  if (has_deprecated_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deprecated_protocol_version(), target);
  }

  // repeated .BidResponse.Ad ad = 2;
  for (unsigned int i = 0, n = this->ad_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ad(i), target);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->processing_time_ms(), target);
  }

  // optional string debug_string = 5;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.debug_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & 14u) {
    // optional string debug_string = 5;
    if (has_debug_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_string());
    }

    // optional int32 processing_time_ms = 4;
    if (has_processing_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processing_time_ms());
    }

    // optional int32 DEPRECATED_protocol_version = 1;
    if (has_deprecated_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_protocol_version());
    }

  }
  // repeated .BidResponse.Ad ad = 2;
  total_size += 1 * this->ad_size();
  for (int i = 0; i < this->ad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ad(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BidResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ad_.MergeFrom(from.ad_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_debug_string()) {
      set_has_debug_string();
      debug_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_string_);
    }
    if (from.has_processing_time_ms()) {
      set_processing_time_ms(from.processing_time_ms());
    }
    if (from.has_deprecated_protocol_version()) {
      set_deprecated_protocol_version(from.deprecated_protocol_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ad())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse::InternalSwap(BidResponse* other) {
  ad_.UnsafeArenaSwap(&other->ad_);
  debug_string_.Swap(&other->debug_string_);
  std::swap(processing_time_ms_, other->processing_time_ms_);
  std::swap(deprecated_protocol_version_, other->deprecated_protocol_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidResponse_Ad_TemplateParameter

// optional string parameter_value = 1;
bool BidResponse_Ad_TemplateParameter::has_parameter_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ad_TemplateParameter::set_has_parameter_value() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ad_TemplateParameter::clear_has_parameter_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ad_TemplateParameter::clear_parameter_value() {
  parameter_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parameter_value();
}
 const ::std::string& BidResponse_Ad_TemplateParameter::parameter_value() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.parameter_value)
  return parameter_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_TemplateParameter::set_parameter_value(const ::std::string& value) {
  set_has_parameter_value();
  parameter_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.parameter_value)
}
 void BidResponse_Ad_TemplateParameter::set_parameter_value(const char* value) {
  set_has_parameter_value();
  parameter_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.TemplateParameter.parameter_value)
}
 void BidResponse_Ad_TemplateParameter::set_parameter_value(const char* value, size_t size) {
  set_has_parameter_value();
  parameter_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.TemplateParameter.parameter_value)
}
 ::std::string* BidResponse_Ad_TemplateParameter::mutable_parameter_value() {
  set_has_parameter_value();
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.TemplateParameter.parameter_value)
  return parameter_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_TemplateParameter::release_parameter_value() {
  clear_has_parameter_value();
  return parameter_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_TemplateParameter::set_allocated_parameter_value(::std::string* parameter_value) {
  if (parameter_value != NULL) {
    set_has_parameter_value();
  } else {
    clear_has_parameter_value();
  }
  parameter_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter_value);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.TemplateParameter.parameter_value)
}

// optional string blank_ad_parameter_value = 8;
bool BidResponse_Ad_TemplateParameter::has_blank_ad_parameter_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_Ad_TemplateParameter::set_has_blank_ad_parameter_value() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_Ad_TemplateParameter::clear_has_blank_ad_parameter_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_Ad_TemplateParameter::clear_blank_ad_parameter_value() {
  blank_ad_parameter_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blank_ad_parameter_value();
}
 const ::std::string& BidResponse_Ad_TemplateParameter::blank_ad_parameter_value() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
  return blank_ad_parameter_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_TemplateParameter::set_blank_ad_parameter_value(const ::std::string& value) {
  set_has_blank_ad_parameter_value();
  blank_ad_parameter_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
}
 void BidResponse_Ad_TemplateParameter::set_blank_ad_parameter_value(const char* value) {
  set_has_blank_ad_parameter_value();
  blank_ad_parameter_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
}
 void BidResponse_Ad_TemplateParameter::set_blank_ad_parameter_value(const char* value, size_t size) {
  set_has_blank_ad_parameter_value();
  blank_ad_parameter_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
}
 ::std::string* BidResponse_Ad_TemplateParameter::mutable_blank_ad_parameter_value() {
  set_has_blank_ad_parameter_value();
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
  return blank_ad_parameter_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_TemplateParameter::release_blank_ad_parameter_value() {
  clear_has_blank_ad_parameter_value();
  return blank_ad_parameter_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_TemplateParameter::set_allocated_blank_ad_parameter_value(::std::string* blank_ad_parameter_value) {
  if (blank_ad_parameter_value != NULL) {
    set_has_blank_ad_parameter_value();
  } else {
    clear_has_blank_ad_parameter_value();
  }
  blank_ad_parameter_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blank_ad_parameter_value);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.TemplateParameter.blank_ad_parameter_value)
}

// optional string buyer_creative_id = 2;
bool BidResponse_Ad_TemplateParameter::has_buyer_creative_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_Ad_TemplateParameter::set_has_buyer_creative_id() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_Ad_TemplateParameter::clear_has_buyer_creative_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_Ad_TemplateParameter::clear_buyer_creative_id() {
  buyer_creative_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyer_creative_id();
}
 const ::std::string& BidResponse_Ad_TemplateParameter::buyer_creative_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.buyer_creative_id)
  return buyer_creative_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_TemplateParameter::set_buyer_creative_id(const ::std::string& value) {
  set_has_buyer_creative_id();
  buyer_creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.buyer_creative_id)
}
 void BidResponse_Ad_TemplateParameter::set_buyer_creative_id(const char* value) {
  set_has_buyer_creative_id();
  buyer_creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.TemplateParameter.buyer_creative_id)
}
 void BidResponse_Ad_TemplateParameter::set_buyer_creative_id(const char* value, size_t size) {
  set_has_buyer_creative_id();
  buyer_creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.TemplateParameter.buyer_creative_id)
}
 ::std::string* BidResponse_Ad_TemplateParameter::mutable_buyer_creative_id() {
  set_has_buyer_creative_id();
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.TemplateParameter.buyer_creative_id)
  return buyer_creative_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_TemplateParameter::release_buyer_creative_id() {
  clear_has_buyer_creative_id();
  return buyer_creative_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_TemplateParameter::set_allocated_buyer_creative_id(::std::string* buyer_creative_id) {
  if (buyer_creative_id != NULL) {
    set_has_buyer_creative_id();
  } else {
    clear_has_buyer_creative_id();
  }
  buyer_creative_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyer_creative_id);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.TemplateParameter.buyer_creative_id)
}

// optional string click_through_url = 3;
bool BidResponse_Ad_TemplateParameter::has_click_through_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_Ad_TemplateParameter::set_has_click_through_url() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_Ad_TemplateParameter::clear_has_click_through_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_Ad_TemplateParameter::clear_click_through_url() {
  click_through_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_click_through_url();
}
 const ::std::string& BidResponse_Ad_TemplateParameter::click_through_url() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.click_through_url)
  return click_through_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_TemplateParameter::set_click_through_url(const ::std::string& value) {
  set_has_click_through_url();
  click_through_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.click_through_url)
}
 void BidResponse_Ad_TemplateParameter::set_click_through_url(const char* value) {
  set_has_click_through_url();
  click_through_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.TemplateParameter.click_through_url)
}
 void BidResponse_Ad_TemplateParameter::set_click_through_url(const char* value, size_t size) {
  set_has_click_through_url();
  click_through_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.TemplateParameter.click_through_url)
}
 ::std::string* BidResponse_Ad_TemplateParameter::mutable_click_through_url() {
  set_has_click_through_url();
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.TemplateParameter.click_through_url)
  return click_through_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_TemplateParameter::release_click_through_url() {
  clear_has_click_through_url();
  return click_through_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_TemplateParameter::set_allocated_click_through_url(::std::string* click_through_url) {
  if (click_through_url != NULL) {
    set_has_click_through_url();
  } else {
    clear_has_click_through_url();
  }
  click_through_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), click_through_url);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.TemplateParameter.click_through_url)
}

// optional int32 left = 4;
bool BidResponse_Ad_TemplateParameter::has_left() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResponse_Ad_TemplateParameter::set_has_left() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResponse_Ad_TemplateParameter::clear_has_left() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResponse_Ad_TemplateParameter::clear_left() {
  left_ = 0;
  clear_has_left();
}
 ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::left() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.left)
  return left_;
}
 void BidResponse_Ad_TemplateParameter::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.left)
}

// optional int32 right = 5;
bool BidResponse_Ad_TemplateParameter::has_right() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidResponse_Ad_TemplateParameter::set_has_right() {
  _has_bits_[0] |= 0x00000020u;
}
void BidResponse_Ad_TemplateParameter::clear_has_right() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidResponse_Ad_TemplateParameter::clear_right() {
  right_ = 0;
  clear_has_right();
}
 ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::right() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.right)
  return right_;
}
 void BidResponse_Ad_TemplateParameter::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.right)
}

// optional int32 top = 6;
bool BidResponse_Ad_TemplateParameter::has_top() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidResponse_Ad_TemplateParameter::set_has_top() {
  _has_bits_[0] |= 0x00000040u;
}
void BidResponse_Ad_TemplateParameter::clear_has_top() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidResponse_Ad_TemplateParameter::clear_top() {
  top_ = 0;
  clear_has_top();
}
 ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::top() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.top)
  return top_;
}
 void BidResponse_Ad_TemplateParameter::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.top)
}

// optional int32 bottom = 7;
bool BidResponse_Ad_TemplateParameter::has_bottom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidResponse_Ad_TemplateParameter::set_has_bottom() {
  _has_bits_[0] |= 0x00000080u;
}
void BidResponse_Ad_TemplateParameter::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidResponse_Ad_TemplateParameter::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
 ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::bottom() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.bottom)
  return bottom_;
}
 void BidResponse_Ad_TemplateParameter::set_bottom(::google::protobuf::int32 value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.bottom)
}

// optional int32 backup_index = 9;
bool BidResponse_Ad_TemplateParameter::has_backup_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidResponse_Ad_TemplateParameter::set_has_backup_index() {
  _has_bits_[0] |= 0x00000100u;
}
void BidResponse_Ad_TemplateParameter::clear_has_backup_index() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidResponse_Ad_TemplateParameter::clear_backup_index() {
  backup_index_ = 0;
  clear_has_backup_index();
}
 ::google::protobuf::int32 BidResponse_Ad_TemplateParameter::backup_index() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.TemplateParameter.backup_index)
  return backup_index_;
}
 void BidResponse_Ad_TemplateParameter::set_backup_index(::google::protobuf::int32 value) {
  set_has_backup_index();
  backup_index_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.TemplateParameter.backup_index)
}

// -------------------------------------------------------------------

// BidResponse_Ad_AdSlot

// required int32 id = 1;
bool BidResponse_Ad_AdSlot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ad_AdSlot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ad_AdSlot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ad_AdSlot::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 BidResponse_Ad_AdSlot::id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.id)
  return id_;
}
 void BidResponse_Ad_AdSlot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.id)
}

// required int64 max_cpm_micros = 2;
bool BidResponse_Ad_AdSlot::has_max_cpm_micros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_Ad_AdSlot::set_has_max_cpm_micros() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_Ad_AdSlot::clear_has_max_cpm_micros() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_Ad_AdSlot::clear_max_cpm_micros() {
  max_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_max_cpm_micros();
}
 ::google::protobuf::int64 BidResponse_Ad_AdSlot::max_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.max_cpm_micros)
  return max_cpm_micros_;
}
 void BidResponse_Ad_AdSlot::set_max_cpm_micros(::google::protobuf::int64 value) {
  set_has_max_cpm_micros();
  max_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.max_cpm_micros)
}

// optional int64 min_cpm_micros = 3;
bool BidResponse_Ad_AdSlot::has_min_cpm_micros() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_Ad_AdSlot::set_has_min_cpm_micros() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_Ad_AdSlot::clear_has_min_cpm_micros() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_Ad_AdSlot::clear_min_cpm_micros() {
  min_cpm_micros_ = GOOGLE_LONGLONG(0);
  clear_has_min_cpm_micros();
}
 ::google::protobuf::int64 BidResponse_Ad_AdSlot::min_cpm_micros() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.min_cpm_micros)
  return min_cpm_micros_;
}
 void BidResponse_Ad_AdSlot::set_min_cpm_micros(::google::protobuf::int64 value) {
  set_has_min_cpm_micros();
  min_cpm_micros_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.min_cpm_micros)
}

// optional int64 adgroup_id = 4;
bool BidResponse_Ad_AdSlot::has_adgroup_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_Ad_AdSlot::set_has_adgroup_id() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_Ad_AdSlot::clear_has_adgroup_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_Ad_AdSlot::clear_adgroup_id() {
  adgroup_id_ = GOOGLE_LONGLONG(0);
  clear_has_adgroup_id();
}
 ::google::protobuf::int64 BidResponse_Ad_AdSlot::adgroup_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.adgroup_id)
  return adgroup_id_;
}
 void BidResponse_Ad_AdSlot::set_adgroup_id(::google::protobuf::int64 value) {
  set_has_adgroup_id();
  adgroup_id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.adgroup_id)
}

// optional int64 deal_id = 5 [default = 0];
bool BidResponse_Ad_AdSlot::has_deal_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResponse_Ad_AdSlot::set_has_deal_id() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResponse_Ad_AdSlot::clear_has_deal_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResponse_Ad_AdSlot::clear_deal_id() {
  deal_id_ = GOOGLE_LONGLONG(0);
  clear_has_deal_id();
}
 ::google::protobuf::int64 BidResponse_Ad_AdSlot::deal_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.AdSlot.deal_id)
  return deal_id_;
}
 void BidResponse_Ad_AdSlot::set_deal_id(::google::protobuf::int64 value) {
  set_has_deal_id();
  deal_id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.AdSlot.deal_id)
}

// -------------------------------------------------------------------

// BidResponse_Ad

// optional string buyer_creative_id = 10;
bool BidResponse_Ad::has_buyer_creative_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ad::set_has_buyer_creative_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ad::clear_has_buyer_creative_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ad::clear_buyer_creative_id() {
  buyer_creative_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyer_creative_id();
}
 const ::std::string& BidResponse_Ad::buyer_creative_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.buyer_creative_id)
  return buyer_creative_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_buyer_creative_id(const ::std::string& value) {
  set_has_buyer_creative_id();
  buyer_creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.buyer_creative_id)
}
 void BidResponse_Ad::set_buyer_creative_id(const char* value) {
  set_has_buyer_creative_id();
  buyer_creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.buyer_creative_id)
}
 void BidResponse_Ad::set_buyer_creative_id(const char* value, size_t size) {
  set_has_buyer_creative_id();
  buyer_creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.buyer_creative_id)
}
 ::std::string* BidResponse_Ad::mutable_buyer_creative_id() {
  set_has_buyer_creative_id();
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.buyer_creative_id)
  return buyer_creative_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad::release_buyer_creative_id() {
  clear_has_buyer_creative_id();
  return buyer_creative_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_allocated_buyer_creative_id(::std::string* buyer_creative_id) {
  if (buyer_creative_id != NULL) {
    set_has_buyer_creative_id();
  } else {
    clear_has_buyer_creative_id();
  }
  buyer_creative_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyer_creative_id);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.buyer_creative_id)
}

// optional string html_snippet = 1;
bool BidResponse_Ad::has_html_snippet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_Ad::set_has_html_snippet() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_Ad::clear_has_html_snippet() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_Ad::clear_html_snippet() {
  html_snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html_snippet();
}
 const ::std::string& BidResponse_Ad::html_snippet() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.html_snippet)
  return html_snippet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_html_snippet(const ::std::string& value) {
  set_has_html_snippet();
  html_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.html_snippet)
}
 void BidResponse_Ad::set_html_snippet(const char* value) {
  set_has_html_snippet();
  html_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.html_snippet)
}
 void BidResponse_Ad::set_html_snippet(const char* value, size_t size) {
  set_has_html_snippet();
  html_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.html_snippet)
}
 ::std::string* BidResponse_Ad::mutable_html_snippet() {
  set_has_html_snippet();
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.html_snippet)
  return html_snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad::release_html_snippet() {
  clear_has_html_snippet();
  return html_snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_allocated_html_snippet(::std::string* html_snippet) {
  if (html_snippet != NULL) {
    set_has_html_snippet();
  } else {
    clear_has_html_snippet();
  }
  html_snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html_snippet);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.html_snippet)
}

// optional string video_url = 9;
bool BidResponse_Ad::has_video_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_Ad::set_has_video_url() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_Ad::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_Ad::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
 const ::std::string& BidResponse_Ad::video_url() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.video_url)
  return video_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.video_url)
}
 void BidResponse_Ad::set_video_url(const char* value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.video_url)
}
 void BidResponse_Ad::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.video_url)
}
 ::std::string* BidResponse_Ad::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad::release_video_url() {
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.video_url)
}

// optional string snippet_template = 12;
bool BidResponse_Ad::has_snippet_template() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_Ad::set_has_snippet_template() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_Ad::clear_has_snippet_template() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_Ad::clear_snippet_template() {
  snippet_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet_template();
}
 const ::std::string& BidResponse_Ad::snippet_template() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.snippet_template)
  return snippet_template_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_snippet_template(const ::std::string& value) {
  set_has_snippet_template();
  snippet_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.snippet_template)
}
 void BidResponse_Ad::set_snippet_template(const char* value) {
  set_has_snippet_template();
  snippet_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.snippet_template)
}
 void BidResponse_Ad::set_snippet_template(const char* value, size_t size) {
  set_has_snippet_template();
  snippet_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.snippet_template)
}
 ::std::string* BidResponse_Ad::mutable_snippet_template() {
  set_has_snippet_template();
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.snippet_template)
  return snippet_template_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad::release_snippet_template() {
  clear_has_snippet_template();
  return snippet_template_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_allocated_snippet_template(::std::string* snippet_template) {
  if (snippet_template != NULL) {
    set_has_snippet_template();
  } else {
    clear_has_snippet_template();
  }
  snippet_template_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet_template);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.snippet_template)
}

// repeated .BidResponse.Ad.TemplateParameter template_parameter = 13;
int BidResponse_Ad::template_parameter_size() const {
  return template_parameter_.size();
}
void BidResponse_Ad::clear_template_parameter() {
  template_parameter_.Clear();
}
const ::BidResponse_Ad_TemplateParameter& BidResponse_Ad::template_parameter(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.template_parameter)
  return template_parameter_.Get(index);
}
::BidResponse_Ad_TemplateParameter* BidResponse_Ad::mutable_template_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.template_parameter)
  return template_parameter_.Mutable(index);
}
::BidResponse_Ad_TemplateParameter* BidResponse_Ad::add_template_parameter() {
  // @@protoc_insertion_point(field_add:BidResponse.Ad.template_parameter)
  return template_parameter_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_TemplateParameter >*
BidResponse_Ad::mutable_template_parameter() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.template_parameter)
  return &template_parameter_;
}
const ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_TemplateParameter >&
BidResponse_Ad::template_parameter() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.template_parameter)
  return template_parameter_;
}

// repeated string click_through_url = 4;
int BidResponse_Ad::click_through_url_size() const {
  return click_through_url_.size();
}
void BidResponse_Ad::clear_click_through_url() {
  click_through_url_.Clear();
}
 const ::std::string& BidResponse_Ad::click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.click_through_url)
  return click_through_url_.Get(index);
}
 ::std::string* BidResponse_Ad::mutable_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.click_through_url)
  return click_through_url_.Mutable(index);
}
 void BidResponse_Ad::set_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidResponse.Ad.click_through_url)
  click_through_url_.Mutable(index)->assign(value);
}
 void BidResponse_Ad::set_click_through_url(int index, const char* value) {
  click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.click_through_url)
}
 void BidResponse_Ad::set_click_through_url(int index, const char* value, size_t size) {
  click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.click_through_url)
}
 ::std::string* BidResponse_Ad::add_click_through_url() {
  return click_through_url_.Add();
}
 void BidResponse_Ad::add_click_through_url(const ::std::string& value) {
  click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.click_through_url)
}
 void BidResponse_Ad::add_click_through_url(const char* value) {
  click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidResponse.Ad.click_through_url)
}
 void BidResponse_Ad::add_click_through_url(const char* value, size_t size) {
  click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidResponse.Ad.click_through_url)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ad::click_through_url() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.click_through_url)
  return click_through_url_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ad::mutable_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.click_through_url)
  return &click_through_url_;
}

// repeated int32 vendor_type = 5;
int BidResponse_Ad::vendor_type_size() const {
  return vendor_type_.size();
}
void BidResponse_Ad::clear_vendor_type() {
  vendor_type_.Clear();
}
 ::google::protobuf::int32 BidResponse_Ad::vendor_type(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.vendor_type)
  return vendor_type_.Get(index);
}
 void BidResponse_Ad::set_vendor_type(int index, ::google::protobuf::int32 value) {
  vendor_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.vendor_type)
}
 void BidResponse_Ad::add_vendor_type(::google::protobuf::int32 value) {
  vendor_type_.Add(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.vendor_type)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ad::vendor_type() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.vendor_type)
  return vendor_type_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ad::mutable_vendor_type() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.vendor_type)
  return &vendor_type_;
}

// repeated int32 attribute = 6;
int BidResponse_Ad::attribute_size() const {
  return attribute_.size();
}
void BidResponse_Ad::clear_attribute() {
  attribute_.Clear();
}
 ::google::protobuf::int32 BidResponse_Ad::attribute(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.attribute)
  return attribute_.Get(index);
}
 void BidResponse_Ad::set_attribute(int index, ::google::protobuf::int32 value) {
  attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.attribute)
}
 void BidResponse_Ad::add_attribute(::google::protobuf::int32 value) {
  attribute_.Add(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.attribute)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ad::attribute() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.attribute)
  return attribute_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ad::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.attribute)
  return &attribute_;
}

// repeated int32 category = 7;
int BidResponse_Ad::category_size() const {
  return category_.size();
}
void BidResponse_Ad::clear_category() {
  category_.Clear();
}
 ::google::protobuf::int32 BidResponse_Ad::category(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.category)
  return category_.Get(index);
}
 void BidResponse_Ad::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.category)
}
 void BidResponse_Ad::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ad::category() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.category)
  return category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ad::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.category)
  return &category_;
}

// repeated int32 restricted_category = 17;
int BidResponse_Ad::restricted_category_size() const {
  return restricted_category_.size();
}
void BidResponse_Ad::clear_restricted_category() {
  restricted_category_.Clear();
}
 ::google::protobuf::int32 BidResponse_Ad::restricted_category(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.restricted_category)
  return restricted_category_.Get(index);
}
 void BidResponse_Ad::set_restricted_category(int index, ::google::protobuf::int32 value) {
  restricted_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.restricted_category)
}
 void BidResponse_Ad::add_restricted_category(::google::protobuf::int32 value) {
  restricted_category_.Add(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.restricted_category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ad::restricted_category() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.restricted_category)
  return restricted_category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ad::mutable_restricted_category() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.restricted_category)
  return &restricted_category_;
}

// repeated string advertiser_name = 11;
int BidResponse_Ad::advertiser_name_size() const {
  return advertiser_name_.size();
}
void BidResponse_Ad::clear_advertiser_name() {
  advertiser_name_.Clear();
}
 const ::std::string& BidResponse_Ad::advertiser_name(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.advertiser_name)
  return advertiser_name_.Get(index);
}
 ::std::string* BidResponse_Ad::mutable_advertiser_name(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.advertiser_name)
  return advertiser_name_.Mutable(index);
}
 void BidResponse_Ad::set_advertiser_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidResponse.Ad.advertiser_name)
  advertiser_name_.Mutable(index)->assign(value);
}
 void BidResponse_Ad::set_advertiser_name(int index, const char* value) {
  advertiser_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.advertiser_name)
}
 void BidResponse_Ad::set_advertiser_name(int index, const char* value, size_t size) {
  advertiser_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.advertiser_name)
}
 ::std::string* BidResponse_Ad::add_advertiser_name() {
  return advertiser_name_.Add();
}
 void BidResponse_Ad::add_advertiser_name(const ::std::string& value) {
  advertiser_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidResponse.Ad.advertiser_name)
}
 void BidResponse_Ad::add_advertiser_name(const char* value) {
  advertiser_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidResponse.Ad.advertiser_name)
}
 void BidResponse_Ad::add_advertiser_name(const char* value, size_t size) {
  advertiser_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidResponse.Ad.advertiser_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ad::advertiser_name() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.advertiser_name)
  return advertiser_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ad::mutable_advertiser_name() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.advertiser_name)
  return &advertiser_name_;
}

// optional int32 width = 14;
bool BidResponse_Ad::has_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidResponse_Ad::set_has_width() {
  _has_bits_[0] |= 0x00000800u;
}
void BidResponse_Ad::clear_has_width() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidResponse_Ad::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 BidResponse_Ad::width() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.width)
  return width_;
}
 void BidResponse_Ad::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.width)
}

// optional int32 height = 15;
bool BidResponse_Ad::has_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidResponse_Ad::set_has_height() {
  _has_bits_[0] |= 0x00001000u;
}
void BidResponse_Ad::clear_has_height() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidResponse_Ad::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 BidResponse_Ad::height() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.height)
  return height_;
}
 void BidResponse_Ad::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.height)
}

// optional int64 agency_id = 16;
bool BidResponse_Ad::has_agency_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidResponse_Ad::set_has_agency_id() {
  _has_bits_[0] |= 0x00002000u;
}
void BidResponse_Ad::clear_has_agency_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidResponse_Ad::clear_agency_id() {
  agency_id_ = GOOGLE_LONGLONG(0);
  clear_has_agency_id();
}
 ::google::protobuf::int64 BidResponse_Ad::agency_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.agency_id)
  return agency_id_;
}
 void BidResponse_Ad::set_agency_id(::google::protobuf::int64 value) {
  set_has_agency_id();
  agency_id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.agency_id)
}

// repeated .BidResponse.Ad.AdSlot adslot = 3;
int BidResponse_Ad::adslot_size() const {
  return adslot_.size();
}
void BidResponse_Ad::clear_adslot() {
  adslot_.Clear();
}
const ::BidResponse_Ad_AdSlot& BidResponse_Ad::adslot(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.adslot)
  return adslot_.Get(index);
}
::BidResponse_Ad_AdSlot* BidResponse_Ad::mutable_adslot(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.adslot)
  return adslot_.Mutable(index);
}
::BidResponse_Ad_AdSlot* BidResponse_Ad::add_adslot() {
  // @@protoc_insertion_point(field_add:BidResponse.Ad.adslot)
  return adslot_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_AdSlot >*
BidResponse_Ad::mutable_adslot() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.Ad.adslot)
  return &adslot_;
}
const ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad_AdSlot >&
BidResponse_Ad::adslot() const {
  // @@protoc_insertion_point(field_list:BidResponse.Ad.adslot)
  return adslot_;
}

// optional int64 DEPRECATED_creative_id = 8;
bool BidResponse_Ad::has_deprecated_creative_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidResponse_Ad::set_has_deprecated_creative_id() {
  _has_bits_[0] |= 0x00008000u;
}
void BidResponse_Ad::clear_has_deprecated_creative_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidResponse_Ad::clear_deprecated_creative_id() {
  deprecated_creative_id_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_creative_id();
}
 ::google::protobuf::int64 BidResponse_Ad::deprecated_creative_id() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.DEPRECATED_creative_id)
  return deprecated_creative_id_;
}
 void BidResponse_Ad::set_deprecated_creative_id(::google::protobuf::int64 value) {
  set_has_deprecated_creative_id();
  deprecated_creative_id_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.Ad.DEPRECATED_creative_id)
}

// optional string DEPRECATED_click_through_url = 2;
bool BidResponse_Ad::has_deprecated_click_through_url() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidResponse_Ad::set_has_deprecated_click_through_url() {
  _has_bits_[0] |= 0x00010000u;
}
void BidResponse_Ad::clear_has_deprecated_click_through_url() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidResponse_Ad::clear_deprecated_click_through_url() {
  deprecated_click_through_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_click_through_url();
}
 const ::std::string& BidResponse_Ad::deprecated_click_through_url() const {
  // @@protoc_insertion_point(field_get:BidResponse.Ad.DEPRECATED_click_through_url)
  return deprecated_click_through_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_deprecated_click_through_url(const ::std::string& value) {
  set_has_deprecated_click_through_url();
  deprecated_click_through_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.Ad.DEPRECATED_click_through_url)
}
 void BidResponse_Ad::set_deprecated_click_through_url(const char* value) {
  set_has_deprecated_click_through_url();
  deprecated_click_through_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.Ad.DEPRECATED_click_through_url)
}
 void BidResponse_Ad::set_deprecated_click_through_url(const char* value, size_t size) {
  set_has_deprecated_click_through_url();
  deprecated_click_through_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.Ad.DEPRECATED_click_through_url)
}
 ::std::string* BidResponse_Ad::mutable_deprecated_click_through_url() {
  set_has_deprecated_click_through_url();
  // @@protoc_insertion_point(field_mutable:BidResponse.Ad.DEPRECATED_click_through_url)
  return deprecated_click_through_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad::release_deprecated_click_through_url() {
  clear_has_deprecated_click_through_url();
  return deprecated_click_through_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_allocated_deprecated_click_through_url(::std::string* deprecated_click_through_url) {
  if (deprecated_click_through_url != NULL) {
    set_has_deprecated_click_through_url();
  } else {
    clear_has_deprecated_click_through_url();
  }
  deprecated_click_through_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_click_through_url);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.Ad.DEPRECATED_click_through_url)
}

// -------------------------------------------------------------------

// BidResponse

// repeated .BidResponse.Ad ad = 2;
int BidResponse::ad_size() const {
  return ad_.size();
}
void BidResponse::clear_ad() {
  ad_.Clear();
}
const ::BidResponse_Ad& BidResponse::ad(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.ad)
  return ad_.Get(index);
}
::BidResponse_Ad* BidResponse::mutable_ad(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.ad)
  return ad_.Mutable(index);
}
::BidResponse_Ad* BidResponse::add_ad() {
  // @@protoc_insertion_point(field_add:BidResponse.ad)
  return ad_.Add();
}
::google::protobuf::RepeatedPtrField< ::BidResponse_Ad >*
BidResponse::mutable_ad() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.ad)
  return &ad_;
}
const ::google::protobuf::RepeatedPtrField< ::BidResponse_Ad >&
BidResponse::ad() const {
  // @@protoc_insertion_point(field_list:BidResponse.ad)
  return ad_;
}

// optional string debug_string = 5;
bool BidResponse::has_debug_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse::set_has_debug_string() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse::clear_has_debug_string() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse::clear_debug_string() {
  debug_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug_string();
}
 const ::std::string& BidResponse::debug_string() const {
  // @@protoc_insertion_point(field_get:BidResponse.debug_string)
  return debug_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_debug_string(const ::std::string& value) {
  set_has_debug_string();
  debug_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.debug_string)
}
 void BidResponse::set_debug_string(const char* value) {
  set_has_debug_string();
  debug_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.debug_string)
}
 void BidResponse::set_debug_string(const char* value, size_t size) {
  set_has_debug_string();
  debug_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.debug_string)
}
 ::std::string* BidResponse::mutable_debug_string() {
  set_has_debug_string();
  // @@protoc_insertion_point(field_mutable:BidResponse.debug_string)
  return debug_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_debug_string() {
  clear_has_debug_string();
  return debug_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_debug_string(::std::string* debug_string) {
  if (debug_string != NULL) {
    set_has_debug_string();
  } else {
    clear_has_debug_string();
  }
  debug_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_string);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.debug_string)
}

// optional int32 processing_time_ms = 4;
bool BidResponse::has_processing_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse::set_has_processing_time_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse::clear_has_processing_time_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse::clear_processing_time_ms() {
  processing_time_ms_ = 0;
  clear_has_processing_time_ms();
}
 ::google::protobuf::int32 BidResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:BidResponse.processing_time_ms)
  return processing_time_ms_;
}
 void BidResponse::set_processing_time_ms(::google::protobuf::int32 value) {
  set_has_processing_time_ms();
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.processing_time_ms)
}

// optional int32 DEPRECATED_protocol_version = 1;
bool BidResponse::has_deprecated_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse::set_has_deprecated_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse::clear_has_deprecated_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse::clear_deprecated_protocol_version() {
  deprecated_protocol_version_ = 0;
  clear_has_deprecated_protocol_version();
}
 ::google::protobuf::int32 BidResponse::deprecated_protocol_version() const {
  // @@protoc_insertion_point(field_get:BidResponse.DEPRECATED_protocol_version)
  return deprecated_protocol_version_;
}
 void BidResponse::set_deprecated_protocol_version(::google::protobuf::int32 value) {
  set_has_deprecated_protocol_version();
  deprecated_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.DEPRECATED_protocol_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
